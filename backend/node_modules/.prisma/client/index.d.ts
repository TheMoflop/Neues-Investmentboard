
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Broker
 * 
 */
export type Broker = $Result.DefaultSelection<Prisma.$BrokerPayload>
/**
 * Model Konto
 * 
 */
export type Konto = $Result.DefaultSelection<Prisma.$KontoPayload>
/**
 * Model Position
 * 
 */
export type Position = $Result.DefaultSelection<Prisma.$PositionPayload>
/**
 * Model Aktienidee
 * 
 */
export type Aktienidee = $Result.DefaultSelection<Prisma.$AktienideePayload>
/**
 * Model Alarm
 * 
 */
export type Alarm = $Result.DefaultSelection<Prisma.$AlarmPayload>
/**
 * Model Transaktion
 * 
 */
export type Transaktion = $Result.DefaultSelection<Prisma.$TransaktionPayload>
/**
 * Model KiBewertung
 * 
 */
export type KiBewertung = $Result.DefaultSelection<Prisma.$KiBewertungPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.broker`: Exposes CRUD operations for the **Broker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brokers
    * const brokers = await prisma.broker.findMany()
    * ```
    */
  get broker(): Prisma.BrokerDelegate<ExtArgs>;

  /**
   * `prisma.konto`: Exposes CRUD operations for the **Konto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kontos
    * const kontos = await prisma.konto.findMany()
    * ```
    */
  get konto(): Prisma.KontoDelegate<ExtArgs>;

  /**
   * `prisma.position`: Exposes CRUD operations for the **Position** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Positions
    * const positions = await prisma.position.findMany()
    * ```
    */
  get position(): Prisma.PositionDelegate<ExtArgs>;

  /**
   * `prisma.aktienidee`: Exposes CRUD operations for the **Aktienidee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aktienidees
    * const aktienidees = await prisma.aktienidee.findMany()
    * ```
    */
  get aktienidee(): Prisma.AktienideeDelegate<ExtArgs>;

  /**
   * `prisma.alarm`: Exposes CRUD operations for the **Alarm** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alarms
    * const alarms = await prisma.alarm.findMany()
    * ```
    */
  get alarm(): Prisma.AlarmDelegate<ExtArgs>;

  /**
   * `prisma.transaktion`: Exposes CRUD operations for the **Transaktion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transaktions
    * const transaktions = await prisma.transaktion.findMany()
    * ```
    */
  get transaktion(): Prisma.TransaktionDelegate<ExtArgs>;

  /**
   * `prisma.kiBewertung`: Exposes CRUD operations for the **KiBewertung** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KiBewertungs
    * const kiBewertungs = await prisma.kiBewertung.findMany()
    * ```
    */
  get kiBewertung(): Prisma.KiBewertungDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Broker: 'Broker',
    Konto: 'Konto',
    Position: 'Position',
    Aktienidee: 'Aktienidee',
    Alarm: 'Alarm',
    Transaktion: 'Transaktion',
    KiBewertung: 'KiBewertung'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "broker" | "konto" | "position" | "aktienidee" | "alarm" | "transaktion" | "kiBewertung"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Broker: {
        payload: Prisma.$BrokerPayload<ExtArgs>
        fields: Prisma.BrokerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrokerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrokerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          findFirst: {
            args: Prisma.BrokerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrokerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          findMany: {
            args: Prisma.BrokerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>[]
          }
          create: {
            args: Prisma.BrokerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          createMany: {
            args: Prisma.BrokerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BrokerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>[]
          }
          delete: {
            args: Prisma.BrokerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          update: {
            args: Prisma.BrokerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          deleteMany: {
            args: Prisma.BrokerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrokerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BrokerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          aggregate: {
            args: Prisma.BrokerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBroker>
          }
          groupBy: {
            args: Prisma.BrokerGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrokerGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrokerCountArgs<ExtArgs>
            result: $Utils.Optional<BrokerCountAggregateOutputType> | number
          }
        }
      }
      Konto: {
        payload: Prisma.$KontoPayload<ExtArgs>
        fields: Prisma.KontoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KontoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KontoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KontoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KontoPayload>
          }
          findFirst: {
            args: Prisma.KontoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KontoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KontoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KontoPayload>
          }
          findMany: {
            args: Prisma.KontoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KontoPayload>[]
          }
          create: {
            args: Prisma.KontoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KontoPayload>
          }
          createMany: {
            args: Prisma.KontoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KontoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KontoPayload>[]
          }
          delete: {
            args: Prisma.KontoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KontoPayload>
          }
          update: {
            args: Prisma.KontoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KontoPayload>
          }
          deleteMany: {
            args: Prisma.KontoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KontoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KontoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KontoPayload>
          }
          aggregate: {
            args: Prisma.KontoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKonto>
          }
          groupBy: {
            args: Prisma.KontoGroupByArgs<ExtArgs>
            result: $Utils.Optional<KontoGroupByOutputType>[]
          }
          count: {
            args: Prisma.KontoCountArgs<ExtArgs>
            result: $Utils.Optional<KontoCountAggregateOutputType> | number
          }
        }
      }
      Position: {
        payload: Prisma.$PositionPayload<ExtArgs>
        fields: Prisma.PositionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PositionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PositionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          findFirst: {
            args: Prisma.PositionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PositionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          findMany: {
            args: Prisma.PositionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>[]
          }
          create: {
            args: Prisma.PositionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          createMany: {
            args: Prisma.PositionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PositionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>[]
          }
          delete: {
            args: Prisma.PositionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          update: {
            args: Prisma.PositionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          deleteMany: {
            args: Prisma.PositionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PositionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PositionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          aggregate: {
            args: Prisma.PositionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePosition>
          }
          groupBy: {
            args: Prisma.PositionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PositionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PositionCountArgs<ExtArgs>
            result: $Utils.Optional<PositionCountAggregateOutputType> | number
          }
        }
      }
      Aktienidee: {
        payload: Prisma.$AktienideePayload<ExtArgs>
        fields: Prisma.AktienideeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AktienideeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AktienideePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AktienideeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AktienideePayload>
          }
          findFirst: {
            args: Prisma.AktienideeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AktienideePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AktienideeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AktienideePayload>
          }
          findMany: {
            args: Prisma.AktienideeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AktienideePayload>[]
          }
          create: {
            args: Prisma.AktienideeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AktienideePayload>
          }
          createMany: {
            args: Prisma.AktienideeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AktienideeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AktienideePayload>[]
          }
          delete: {
            args: Prisma.AktienideeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AktienideePayload>
          }
          update: {
            args: Prisma.AktienideeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AktienideePayload>
          }
          deleteMany: {
            args: Prisma.AktienideeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AktienideeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AktienideeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AktienideePayload>
          }
          aggregate: {
            args: Prisma.AktienideeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAktienidee>
          }
          groupBy: {
            args: Prisma.AktienideeGroupByArgs<ExtArgs>
            result: $Utils.Optional<AktienideeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AktienideeCountArgs<ExtArgs>
            result: $Utils.Optional<AktienideeCountAggregateOutputType> | number
          }
        }
      }
      Alarm: {
        payload: Prisma.$AlarmPayload<ExtArgs>
        fields: Prisma.AlarmFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlarmFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlarmFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          findFirst: {
            args: Prisma.AlarmFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlarmFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          findMany: {
            args: Prisma.AlarmFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>[]
          }
          create: {
            args: Prisma.AlarmCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          createMany: {
            args: Prisma.AlarmCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlarmCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>[]
          }
          delete: {
            args: Prisma.AlarmDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          update: {
            args: Prisma.AlarmUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          deleteMany: {
            args: Prisma.AlarmDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlarmUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlarmUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          aggregate: {
            args: Prisma.AlarmAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlarm>
          }
          groupBy: {
            args: Prisma.AlarmGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlarmGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlarmCountArgs<ExtArgs>
            result: $Utils.Optional<AlarmCountAggregateOutputType> | number
          }
        }
      }
      Transaktion: {
        payload: Prisma.$TransaktionPayload<ExtArgs>
        fields: Prisma.TransaktionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransaktionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaktionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransaktionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaktionPayload>
          }
          findFirst: {
            args: Prisma.TransaktionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaktionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransaktionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaktionPayload>
          }
          findMany: {
            args: Prisma.TransaktionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaktionPayload>[]
          }
          create: {
            args: Prisma.TransaktionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaktionPayload>
          }
          createMany: {
            args: Prisma.TransaktionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransaktionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaktionPayload>[]
          }
          delete: {
            args: Prisma.TransaktionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaktionPayload>
          }
          update: {
            args: Prisma.TransaktionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaktionPayload>
          }
          deleteMany: {
            args: Prisma.TransaktionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransaktionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransaktionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaktionPayload>
          }
          aggregate: {
            args: Prisma.TransaktionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaktion>
          }
          groupBy: {
            args: Prisma.TransaktionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransaktionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransaktionCountArgs<ExtArgs>
            result: $Utils.Optional<TransaktionCountAggregateOutputType> | number
          }
        }
      }
      KiBewertung: {
        payload: Prisma.$KiBewertungPayload<ExtArgs>
        fields: Prisma.KiBewertungFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KiBewertungFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KiBewertungPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KiBewertungFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KiBewertungPayload>
          }
          findFirst: {
            args: Prisma.KiBewertungFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KiBewertungPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KiBewertungFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KiBewertungPayload>
          }
          findMany: {
            args: Prisma.KiBewertungFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KiBewertungPayload>[]
          }
          create: {
            args: Prisma.KiBewertungCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KiBewertungPayload>
          }
          createMany: {
            args: Prisma.KiBewertungCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KiBewertungCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KiBewertungPayload>[]
          }
          delete: {
            args: Prisma.KiBewertungDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KiBewertungPayload>
          }
          update: {
            args: Prisma.KiBewertungUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KiBewertungPayload>
          }
          deleteMany: {
            args: Prisma.KiBewertungDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KiBewertungUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KiBewertungUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KiBewertungPayload>
          }
          aggregate: {
            args: Prisma.KiBewertungAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKiBewertung>
          }
          groupBy: {
            args: Prisma.KiBewertungGroupByArgs<ExtArgs>
            result: $Utils.Optional<KiBewertungGroupByOutputType>[]
          }
          count: {
            args: Prisma.KiBewertungCountArgs<ExtArgs>
            result: $Utils.Optional<KiBewertungCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    brokers: number
    aktienideen: number
    alarme: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brokers?: boolean | UserCountOutputTypeCountBrokersArgs
    aktienideen?: boolean | UserCountOutputTypeCountAktienideenArgs
    alarme?: boolean | UserCountOutputTypeCountAlarmeArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBrokersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrokerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAktienideenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AktienideeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAlarmeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlarmWhereInput
  }


  /**
   * Count Type BrokerCountOutputType
   */

  export type BrokerCountOutputType = {
    konten: number
  }

  export type BrokerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    konten?: boolean | BrokerCountOutputTypeCountKontenArgs
  }

  // Custom InputTypes
  /**
   * BrokerCountOutputType without action
   */
  export type BrokerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrokerCountOutputType
     */
    select?: BrokerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrokerCountOutputType without action
   */
  export type BrokerCountOutputTypeCountKontenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KontoWhereInput
  }


  /**
   * Count Type KontoCountOutputType
   */

  export type KontoCountOutputType = {
    positionen: number
    transaktionen: number
  }

  export type KontoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    positionen?: boolean | KontoCountOutputTypeCountPositionenArgs
    transaktionen?: boolean | KontoCountOutputTypeCountTransaktionenArgs
  }

  // Custom InputTypes
  /**
   * KontoCountOutputType without action
   */
  export type KontoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KontoCountOutputType
     */
    select?: KontoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KontoCountOutputType without action
   */
  export type KontoCountOutputTypeCountPositionenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PositionWhereInput
  }

  /**
   * KontoCountOutputType without action
   */
  export type KontoCountOutputTypeCountTransaktionenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransaktionWhereInput
  }


  /**
   * Count Type PositionCountOutputType
   */

  export type PositionCountOutputType = {
    transaktionen: number
  }

  export type PositionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaktionen?: boolean | PositionCountOutputTypeCountTransaktionenArgs
  }

  // Custom InputTypes
  /**
   * PositionCountOutputType without action
   */
  export type PositionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PositionCountOutputType
     */
    select?: PositionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PositionCountOutputType without action
   */
  export type PositionCountOutputTypeCountTransaktionenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransaktionWhereInput
  }


  /**
   * Count Type AktienideeCountOutputType
   */

  export type AktienideeCountOutputType = {
    bewertungen: number
  }

  export type AktienideeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bewertungen?: boolean | AktienideeCountOutputTypeCountBewertungenArgs
  }

  // Custom InputTypes
  /**
   * AktienideeCountOutputType without action
   */
  export type AktienideeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AktienideeCountOutputType
     */
    select?: AktienideeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AktienideeCountOutputType without action
   */
  export type AktienideeCountOutputTypeCountBewertungenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KiBewertungWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    settings: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    settings?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string | null
    settings: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brokers?: boolean | User$brokersArgs<ExtArgs>
    aktienideen?: boolean | User$aktienideenArgs<ExtArgs>
    alarme?: boolean | User$alarmeArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brokers?: boolean | User$brokersArgs<ExtArgs>
    aktienideen?: boolean | User$aktienideenArgs<ExtArgs>
    alarme?: boolean | User$alarmeArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      brokers: Prisma.$BrokerPayload<ExtArgs>[]
      aktienideen: Prisma.$AktienideePayload<ExtArgs>[]
      alarme: Prisma.$AlarmPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string | null
      settings: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brokers<T extends User$brokersArgs<ExtArgs> = {}>(args?: Subset<T, User$brokersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "findMany"> | Null>
    aktienideen<T extends User$aktienideenArgs<ExtArgs> = {}>(args?: Subset<T, User$aktienideenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AktienideePayload<ExtArgs>, T, "findMany"> | Null>
    alarme<T extends User$alarmeArgs<ExtArgs> = {}>(args?: Subset<T, User$alarmeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly settings: FieldRef<"User", 'Json'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.brokers
   */
  export type User$brokersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    where?: BrokerWhereInput
    orderBy?: BrokerOrderByWithRelationInput | BrokerOrderByWithRelationInput[]
    cursor?: BrokerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BrokerScalarFieldEnum | BrokerScalarFieldEnum[]
  }

  /**
   * User.aktienideen
   */
  export type User$aktienideenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aktienidee
     */
    select?: AktienideeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AktienideeInclude<ExtArgs> | null
    where?: AktienideeWhereInput
    orderBy?: AktienideeOrderByWithRelationInput | AktienideeOrderByWithRelationInput[]
    cursor?: AktienideeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AktienideeScalarFieldEnum | AktienideeScalarFieldEnum[]
  }

  /**
   * User.alarme
   */
  export type User$alarmeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    where?: AlarmWhereInput
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    cursor?: AlarmWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlarmScalarFieldEnum | AlarmScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Broker
   */

  export type AggregateBroker = {
    _count: BrokerCountAggregateOutputType | null
    _avg: BrokerAvgAggregateOutputType | null
    _sum: BrokerSumAggregateOutputType | null
    _min: BrokerMinAggregateOutputType | null
    _max: BrokerMaxAggregateOutputType | null
  }

  export type BrokerAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type BrokerSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type BrokerMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    notes: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BrokerMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    notes: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BrokerCountAggregateOutputType = {
    id: number
    name: number
    type: number
    notes: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BrokerAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type BrokerSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type BrokerMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    notes?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BrokerMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    notes?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BrokerCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    notes?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BrokerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Broker to aggregate.
     */
    where?: BrokerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brokers to fetch.
     */
    orderBy?: BrokerOrderByWithRelationInput | BrokerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrokerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brokers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brokers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brokers
    **/
    _count?: true | BrokerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BrokerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BrokerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrokerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrokerMaxAggregateInputType
  }

  export type GetBrokerAggregateType<T extends BrokerAggregateArgs> = {
        [P in keyof T & keyof AggregateBroker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBroker[P]>
      : GetScalarType<T[P], AggregateBroker[P]>
  }




  export type BrokerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrokerWhereInput
    orderBy?: BrokerOrderByWithAggregationInput | BrokerOrderByWithAggregationInput[]
    by: BrokerScalarFieldEnum[] | BrokerScalarFieldEnum
    having?: BrokerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrokerCountAggregateInputType | true
    _avg?: BrokerAvgAggregateInputType
    _sum?: BrokerSumAggregateInputType
    _min?: BrokerMinAggregateInputType
    _max?: BrokerMaxAggregateInputType
  }

  export type BrokerGroupByOutputType = {
    id: number
    name: string
    type: string
    notes: string | null
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: BrokerCountAggregateOutputType | null
    _avg: BrokerAvgAggregateOutputType | null
    _sum: BrokerSumAggregateOutputType | null
    _min: BrokerMinAggregateOutputType | null
    _max: BrokerMaxAggregateOutputType | null
  }

  type GetBrokerGroupByPayload<T extends BrokerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrokerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrokerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrokerGroupByOutputType[P]>
            : GetScalarType<T[P], BrokerGroupByOutputType[P]>
        }
      >
    >


  export type BrokerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    notes?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    konten?: boolean | Broker$kontenArgs<ExtArgs>
    _count?: boolean | BrokerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["broker"]>

  export type BrokerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    notes?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["broker"]>

  export type BrokerSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    notes?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BrokerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    konten?: boolean | Broker$kontenArgs<ExtArgs>
    _count?: boolean | BrokerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BrokerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BrokerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Broker"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      konten: Prisma.$KontoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: string
      notes: string | null
      userId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["broker"]>
    composites: {}
  }

  type BrokerGetPayload<S extends boolean | null | undefined | BrokerDefaultArgs> = $Result.GetResult<Prisma.$BrokerPayload, S>

  type BrokerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BrokerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BrokerCountAggregateInputType | true
    }

  export interface BrokerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Broker'], meta: { name: 'Broker' } }
    /**
     * Find zero or one Broker that matches the filter.
     * @param {BrokerFindUniqueArgs} args - Arguments to find a Broker
     * @example
     * // Get one Broker
     * const broker = await prisma.broker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrokerFindUniqueArgs>(args: SelectSubset<T, BrokerFindUniqueArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Broker that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BrokerFindUniqueOrThrowArgs} args - Arguments to find a Broker
     * @example
     * // Get one Broker
     * const broker = await prisma.broker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrokerFindUniqueOrThrowArgs>(args: SelectSubset<T, BrokerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Broker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerFindFirstArgs} args - Arguments to find a Broker
     * @example
     * // Get one Broker
     * const broker = await prisma.broker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrokerFindFirstArgs>(args?: SelectSubset<T, BrokerFindFirstArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Broker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerFindFirstOrThrowArgs} args - Arguments to find a Broker
     * @example
     * // Get one Broker
     * const broker = await prisma.broker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrokerFindFirstOrThrowArgs>(args?: SelectSubset<T, BrokerFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Brokers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brokers
     * const brokers = await prisma.broker.findMany()
     * 
     * // Get first 10 Brokers
     * const brokers = await prisma.broker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brokerWithIdOnly = await prisma.broker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BrokerFindManyArgs>(args?: SelectSubset<T, BrokerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Broker.
     * @param {BrokerCreateArgs} args - Arguments to create a Broker.
     * @example
     * // Create one Broker
     * const Broker = await prisma.broker.create({
     *   data: {
     *     // ... data to create a Broker
     *   }
     * })
     * 
     */
    create<T extends BrokerCreateArgs>(args: SelectSubset<T, BrokerCreateArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Brokers.
     * @param {BrokerCreateManyArgs} args - Arguments to create many Brokers.
     * @example
     * // Create many Brokers
     * const broker = await prisma.broker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrokerCreateManyArgs>(args?: SelectSubset<T, BrokerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Brokers and returns the data saved in the database.
     * @param {BrokerCreateManyAndReturnArgs} args - Arguments to create many Brokers.
     * @example
     * // Create many Brokers
     * const broker = await prisma.broker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Brokers and only return the `id`
     * const brokerWithIdOnly = await prisma.broker.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BrokerCreateManyAndReturnArgs>(args?: SelectSubset<T, BrokerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Broker.
     * @param {BrokerDeleteArgs} args - Arguments to delete one Broker.
     * @example
     * // Delete one Broker
     * const Broker = await prisma.broker.delete({
     *   where: {
     *     // ... filter to delete one Broker
     *   }
     * })
     * 
     */
    delete<T extends BrokerDeleteArgs>(args: SelectSubset<T, BrokerDeleteArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Broker.
     * @param {BrokerUpdateArgs} args - Arguments to update one Broker.
     * @example
     * // Update one Broker
     * const broker = await prisma.broker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrokerUpdateArgs>(args: SelectSubset<T, BrokerUpdateArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Brokers.
     * @param {BrokerDeleteManyArgs} args - Arguments to filter Brokers to delete.
     * @example
     * // Delete a few Brokers
     * const { count } = await prisma.broker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrokerDeleteManyArgs>(args?: SelectSubset<T, BrokerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brokers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brokers
     * const broker = await prisma.broker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrokerUpdateManyArgs>(args: SelectSubset<T, BrokerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Broker.
     * @param {BrokerUpsertArgs} args - Arguments to update or create a Broker.
     * @example
     * // Update or create a Broker
     * const broker = await prisma.broker.upsert({
     *   create: {
     *     // ... data to create a Broker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Broker we want to update
     *   }
     * })
     */
    upsert<T extends BrokerUpsertArgs>(args: SelectSubset<T, BrokerUpsertArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Brokers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerCountArgs} args - Arguments to filter Brokers to count.
     * @example
     * // Count the number of Brokers
     * const count = await prisma.broker.count({
     *   where: {
     *     // ... the filter for the Brokers we want to count
     *   }
     * })
    **/
    count<T extends BrokerCountArgs>(
      args?: Subset<T, BrokerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrokerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Broker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrokerAggregateArgs>(args: Subset<T, BrokerAggregateArgs>): Prisma.PrismaPromise<GetBrokerAggregateType<T>>

    /**
     * Group by Broker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrokerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrokerGroupByArgs['orderBy'] }
        : { orderBy?: BrokerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrokerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrokerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Broker model
   */
  readonly fields: BrokerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Broker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrokerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    konten<T extends Broker$kontenArgs<ExtArgs> = {}>(args?: Subset<T, Broker$kontenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KontoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Broker model
   */ 
  interface BrokerFieldRefs {
    readonly id: FieldRef<"Broker", 'Int'>
    readonly name: FieldRef<"Broker", 'String'>
    readonly type: FieldRef<"Broker", 'String'>
    readonly notes: FieldRef<"Broker", 'String'>
    readonly userId: FieldRef<"Broker", 'Int'>
    readonly createdAt: FieldRef<"Broker", 'DateTime'>
    readonly updatedAt: FieldRef<"Broker", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Broker findUnique
   */
  export type BrokerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * Filter, which Broker to fetch.
     */
    where: BrokerWhereUniqueInput
  }

  /**
   * Broker findUniqueOrThrow
   */
  export type BrokerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * Filter, which Broker to fetch.
     */
    where: BrokerWhereUniqueInput
  }

  /**
   * Broker findFirst
   */
  export type BrokerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * Filter, which Broker to fetch.
     */
    where?: BrokerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brokers to fetch.
     */
    orderBy?: BrokerOrderByWithRelationInput | BrokerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brokers.
     */
    cursor?: BrokerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brokers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brokers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brokers.
     */
    distinct?: BrokerScalarFieldEnum | BrokerScalarFieldEnum[]
  }

  /**
   * Broker findFirstOrThrow
   */
  export type BrokerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * Filter, which Broker to fetch.
     */
    where?: BrokerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brokers to fetch.
     */
    orderBy?: BrokerOrderByWithRelationInput | BrokerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brokers.
     */
    cursor?: BrokerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brokers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brokers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brokers.
     */
    distinct?: BrokerScalarFieldEnum | BrokerScalarFieldEnum[]
  }

  /**
   * Broker findMany
   */
  export type BrokerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * Filter, which Brokers to fetch.
     */
    where?: BrokerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brokers to fetch.
     */
    orderBy?: BrokerOrderByWithRelationInput | BrokerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brokers.
     */
    cursor?: BrokerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brokers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brokers.
     */
    skip?: number
    distinct?: BrokerScalarFieldEnum | BrokerScalarFieldEnum[]
  }

  /**
   * Broker create
   */
  export type BrokerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * The data needed to create a Broker.
     */
    data: XOR<BrokerCreateInput, BrokerUncheckedCreateInput>
  }

  /**
   * Broker createMany
   */
  export type BrokerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brokers.
     */
    data: BrokerCreateManyInput | BrokerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Broker createManyAndReturn
   */
  export type BrokerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Brokers.
     */
    data: BrokerCreateManyInput | BrokerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Broker update
   */
  export type BrokerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * The data needed to update a Broker.
     */
    data: XOR<BrokerUpdateInput, BrokerUncheckedUpdateInput>
    /**
     * Choose, which Broker to update.
     */
    where: BrokerWhereUniqueInput
  }

  /**
   * Broker updateMany
   */
  export type BrokerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brokers.
     */
    data: XOR<BrokerUpdateManyMutationInput, BrokerUncheckedUpdateManyInput>
    /**
     * Filter which Brokers to update
     */
    where?: BrokerWhereInput
  }

  /**
   * Broker upsert
   */
  export type BrokerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * The filter to search for the Broker to update in case it exists.
     */
    where: BrokerWhereUniqueInput
    /**
     * In case the Broker found by the `where` argument doesn't exist, create a new Broker with this data.
     */
    create: XOR<BrokerCreateInput, BrokerUncheckedCreateInput>
    /**
     * In case the Broker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrokerUpdateInput, BrokerUncheckedUpdateInput>
  }

  /**
   * Broker delete
   */
  export type BrokerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * Filter which Broker to delete.
     */
    where: BrokerWhereUniqueInput
  }

  /**
   * Broker deleteMany
   */
  export type BrokerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brokers to delete
     */
    where?: BrokerWhereInput
  }

  /**
   * Broker.konten
   */
  export type Broker$kontenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konto
     */
    select?: KontoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KontoInclude<ExtArgs> | null
    where?: KontoWhereInput
    orderBy?: KontoOrderByWithRelationInput | KontoOrderByWithRelationInput[]
    cursor?: KontoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KontoScalarFieldEnum | KontoScalarFieldEnum[]
  }

  /**
   * Broker without action
   */
  export type BrokerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
  }


  /**
   * Model Konto
   */

  export type AggregateKonto = {
    _count: KontoCountAggregateOutputType | null
    _avg: KontoAvgAggregateOutputType | null
    _sum: KontoSumAggregateOutputType | null
    _min: KontoMinAggregateOutputType | null
    _max: KontoMaxAggregateOutputType | null
  }

  export type KontoAvgAggregateOutputType = {
    id: number | null
    brokerId: number | null
  }

  export type KontoSumAggregateOutputType = {
    id: number | null
    brokerId: number | null
  }

  export type KontoMinAggregateOutputType = {
    id: number | null
    name: string | null
    accountNumber: string | null
    currency: string | null
    brokerId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KontoMaxAggregateOutputType = {
    id: number | null
    name: string | null
    accountNumber: string | null
    currency: string | null
    brokerId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KontoCountAggregateOutputType = {
    id: number
    name: number
    accountNumber: number
    currency: number
    brokerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KontoAvgAggregateInputType = {
    id?: true
    brokerId?: true
  }

  export type KontoSumAggregateInputType = {
    id?: true
    brokerId?: true
  }

  export type KontoMinAggregateInputType = {
    id?: true
    name?: true
    accountNumber?: true
    currency?: true
    brokerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KontoMaxAggregateInputType = {
    id?: true
    name?: true
    accountNumber?: true
    currency?: true
    brokerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KontoCountAggregateInputType = {
    id?: true
    name?: true
    accountNumber?: true
    currency?: true
    brokerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KontoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Konto to aggregate.
     */
    where?: KontoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kontos to fetch.
     */
    orderBy?: KontoOrderByWithRelationInput | KontoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KontoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kontos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kontos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kontos
    **/
    _count?: true | KontoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KontoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KontoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KontoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KontoMaxAggregateInputType
  }

  export type GetKontoAggregateType<T extends KontoAggregateArgs> = {
        [P in keyof T & keyof AggregateKonto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKonto[P]>
      : GetScalarType<T[P], AggregateKonto[P]>
  }




  export type KontoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KontoWhereInput
    orderBy?: KontoOrderByWithAggregationInput | KontoOrderByWithAggregationInput[]
    by: KontoScalarFieldEnum[] | KontoScalarFieldEnum
    having?: KontoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KontoCountAggregateInputType | true
    _avg?: KontoAvgAggregateInputType
    _sum?: KontoSumAggregateInputType
    _min?: KontoMinAggregateInputType
    _max?: KontoMaxAggregateInputType
  }

  export type KontoGroupByOutputType = {
    id: number
    name: string
    accountNumber: string | null
    currency: string
    brokerId: number
    createdAt: Date
    updatedAt: Date
    _count: KontoCountAggregateOutputType | null
    _avg: KontoAvgAggregateOutputType | null
    _sum: KontoSumAggregateOutputType | null
    _min: KontoMinAggregateOutputType | null
    _max: KontoMaxAggregateOutputType | null
  }

  type GetKontoGroupByPayload<T extends KontoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KontoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KontoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KontoGroupByOutputType[P]>
            : GetScalarType<T[P], KontoGroupByOutputType[P]>
        }
      >
    >


  export type KontoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    accountNumber?: boolean
    currency?: boolean
    brokerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    broker?: boolean | BrokerDefaultArgs<ExtArgs>
    positionen?: boolean | Konto$positionenArgs<ExtArgs>
    transaktionen?: boolean | Konto$transaktionenArgs<ExtArgs>
    _count?: boolean | KontoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["konto"]>

  export type KontoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    accountNumber?: boolean
    currency?: boolean
    brokerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    broker?: boolean | BrokerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["konto"]>

  export type KontoSelectScalar = {
    id?: boolean
    name?: boolean
    accountNumber?: boolean
    currency?: boolean
    brokerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KontoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    broker?: boolean | BrokerDefaultArgs<ExtArgs>
    positionen?: boolean | Konto$positionenArgs<ExtArgs>
    transaktionen?: boolean | Konto$transaktionenArgs<ExtArgs>
    _count?: boolean | KontoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type KontoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    broker?: boolean | BrokerDefaultArgs<ExtArgs>
  }

  export type $KontoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Konto"
    objects: {
      broker: Prisma.$BrokerPayload<ExtArgs>
      positionen: Prisma.$PositionPayload<ExtArgs>[]
      transaktionen: Prisma.$TransaktionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      accountNumber: string | null
      currency: string
      brokerId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["konto"]>
    composites: {}
  }

  type KontoGetPayload<S extends boolean | null | undefined | KontoDefaultArgs> = $Result.GetResult<Prisma.$KontoPayload, S>

  type KontoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KontoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KontoCountAggregateInputType | true
    }

  export interface KontoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Konto'], meta: { name: 'Konto' } }
    /**
     * Find zero or one Konto that matches the filter.
     * @param {KontoFindUniqueArgs} args - Arguments to find a Konto
     * @example
     * // Get one Konto
     * const konto = await prisma.konto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KontoFindUniqueArgs>(args: SelectSubset<T, KontoFindUniqueArgs<ExtArgs>>): Prisma__KontoClient<$Result.GetResult<Prisma.$KontoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Konto that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KontoFindUniqueOrThrowArgs} args - Arguments to find a Konto
     * @example
     * // Get one Konto
     * const konto = await prisma.konto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KontoFindUniqueOrThrowArgs>(args: SelectSubset<T, KontoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KontoClient<$Result.GetResult<Prisma.$KontoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Konto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KontoFindFirstArgs} args - Arguments to find a Konto
     * @example
     * // Get one Konto
     * const konto = await prisma.konto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KontoFindFirstArgs>(args?: SelectSubset<T, KontoFindFirstArgs<ExtArgs>>): Prisma__KontoClient<$Result.GetResult<Prisma.$KontoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Konto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KontoFindFirstOrThrowArgs} args - Arguments to find a Konto
     * @example
     * // Get one Konto
     * const konto = await prisma.konto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KontoFindFirstOrThrowArgs>(args?: SelectSubset<T, KontoFindFirstOrThrowArgs<ExtArgs>>): Prisma__KontoClient<$Result.GetResult<Prisma.$KontoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Kontos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KontoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kontos
     * const kontos = await prisma.konto.findMany()
     * 
     * // Get first 10 Kontos
     * const kontos = await prisma.konto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kontoWithIdOnly = await prisma.konto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KontoFindManyArgs>(args?: SelectSubset<T, KontoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KontoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Konto.
     * @param {KontoCreateArgs} args - Arguments to create a Konto.
     * @example
     * // Create one Konto
     * const Konto = await prisma.konto.create({
     *   data: {
     *     // ... data to create a Konto
     *   }
     * })
     * 
     */
    create<T extends KontoCreateArgs>(args: SelectSubset<T, KontoCreateArgs<ExtArgs>>): Prisma__KontoClient<$Result.GetResult<Prisma.$KontoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Kontos.
     * @param {KontoCreateManyArgs} args - Arguments to create many Kontos.
     * @example
     * // Create many Kontos
     * const konto = await prisma.konto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KontoCreateManyArgs>(args?: SelectSubset<T, KontoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Kontos and returns the data saved in the database.
     * @param {KontoCreateManyAndReturnArgs} args - Arguments to create many Kontos.
     * @example
     * // Create many Kontos
     * const konto = await prisma.konto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Kontos and only return the `id`
     * const kontoWithIdOnly = await prisma.konto.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KontoCreateManyAndReturnArgs>(args?: SelectSubset<T, KontoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KontoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Konto.
     * @param {KontoDeleteArgs} args - Arguments to delete one Konto.
     * @example
     * // Delete one Konto
     * const Konto = await prisma.konto.delete({
     *   where: {
     *     // ... filter to delete one Konto
     *   }
     * })
     * 
     */
    delete<T extends KontoDeleteArgs>(args: SelectSubset<T, KontoDeleteArgs<ExtArgs>>): Prisma__KontoClient<$Result.GetResult<Prisma.$KontoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Konto.
     * @param {KontoUpdateArgs} args - Arguments to update one Konto.
     * @example
     * // Update one Konto
     * const konto = await prisma.konto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KontoUpdateArgs>(args: SelectSubset<T, KontoUpdateArgs<ExtArgs>>): Prisma__KontoClient<$Result.GetResult<Prisma.$KontoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Kontos.
     * @param {KontoDeleteManyArgs} args - Arguments to filter Kontos to delete.
     * @example
     * // Delete a few Kontos
     * const { count } = await prisma.konto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KontoDeleteManyArgs>(args?: SelectSubset<T, KontoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kontos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KontoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kontos
     * const konto = await prisma.konto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KontoUpdateManyArgs>(args: SelectSubset<T, KontoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Konto.
     * @param {KontoUpsertArgs} args - Arguments to update or create a Konto.
     * @example
     * // Update or create a Konto
     * const konto = await prisma.konto.upsert({
     *   create: {
     *     // ... data to create a Konto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Konto we want to update
     *   }
     * })
     */
    upsert<T extends KontoUpsertArgs>(args: SelectSubset<T, KontoUpsertArgs<ExtArgs>>): Prisma__KontoClient<$Result.GetResult<Prisma.$KontoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Kontos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KontoCountArgs} args - Arguments to filter Kontos to count.
     * @example
     * // Count the number of Kontos
     * const count = await prisma.konto.count({
     *   where: {
     *     // ... the filter for the Kontos we want to count
     *   }
     * })
    **/
    count<T extends KontoCountArgs>(
      args?: Subset<T, KontoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KontoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Konto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KontoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KontoAggregateArgs>(args: Subset<T, KontoAggregateArgs>): Prisma.PrismaPromise<GetKontoAggregateType<T>>

    /**
     * Group by Konto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KontoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KontoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KontoGroupByArgs['orderBy'] }
        : { orderBy?: KontoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KontoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKontoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Konto model
   */
  readonly fields: KontoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Konto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KontoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    broker<T extends BrokerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BrokerDefaultArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    positionen<T extends Konto$positionenArgs<ExtArgs> = {}>(args?: Subset<T, Konto$positionenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findMany"> | Null>
    transaktionen<T extends Konto$transaktionenArgs<ExtArgs> = {}>(args?: Subset<T, Konto$transaktionenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransaktionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Konto model
   */ 
  interface KontoFieldRefs {
    readonly id: FieldRef<"Konto", 'Int'>
    readonly name: FieldRef<"Konto", 'String'>
    readonly accountNumber: FieldRef<"Konto", 'String'>
    readonly currency: FieldRef<"Konto", 'String'>
    readonly brokerId: FieldRef<"Konto", 'Int'>
    readonly createdAt: FieldRef<"Konto", 'DateTime'>
    readonly updatedAt: FieldRef<"Konto", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Konto findUnique
   */
  export type KontoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konto
     */
    select?: KontoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KontoInclude<ExtArgs> | null
    /**
     * Filter, which Konto to fetch.
     */
    where: KontoWhereUniqueInput
  }

  /**
   * Konto findUniqueOrThrow
   */
  export type KontoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konto
     */
    select?: KontoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KontoInclude<ExtArgs> | null
    /**
     * Filter, which Konto to fetch.
     */
    where: KontoWhereUniqueInput
  }

  /**
   * Konto findFirst
   */
  export type KontoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konto
     */
    select?: KontoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KontoInclude<ExtArgs> | null
    /**
     * Filter, which Konto to fetch.
     */
    where?: KontoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kontos to fetch.
     */
    orderBy?: KontoOrderByWithRelationInput | KontoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kontos.
     */
    cursor?: KontoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kontos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kontos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kontos.
     */
    distinct?: KontoScalarFieldEnum | KontoScalarFieldEnum[]
  }

  /**
   * Konto findFirstOrThrow
   */
  export type KontoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konto
     */
    select?: KontoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KontoInclude<ExtArgs> | null
    /**
     * Filter, which Konto to fetch.
     */
    where?: KontoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kontos to fetch.
     */
    orderBy?: KontoOrderByWithRelationInput | KontoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kontos.
     */
    cursor?: KontoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kontos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kontos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kontos.
     */
    distinct?: KontoScalarFieldEnum | KontoScalarFieldEnum[]
  }

  /**
   * Konto findMany
   */
  export type KontoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konto
     */
    select?: KontoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KontoInclude<ExtArgs> | null
    /**
     * Filter, which Kontos to fetch.
     */
    where?: KontoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kontos to fetch.
     */
    orderBy?: KontoOrderByWithRelationInput | KontoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kontos.
     */
    cursor?: KontoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kontos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kontos.
     */
    skip?: number
    distinct?: KontoScalarFieldEnum | KontoScalarFieldEnum[]
  }

  /**
   * Konto create
   */
  export type KontoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konto
     */
    select?: KontoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KontoInclude<ExtArgs> | null
    /**
     * The data needed to create a Konto.
     */
    data: XOR<KontoCreateInput, KontoUncheckedCreateInput>
  }

  /**
   * Konto createMany
   */
  export type KontoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Kontos.
     */
    data: KontoCreateManyInput | KontoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Konto createManyAndReturn
   */
  export type KontoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konto
     */
    select?: KontoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Kontos.
     */
    data: KontoCreateManyInput | KontoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KontoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Konto update
   */
  export type KontoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konto
     */
    select?: KontoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KontoInclude<ExtArgs> | null
    /**
     * The data needed to update a Konto.
     */
    data: XOR<KontoUpdateInput, KontoUncheckedUpdateInput>
    /**
     * Choose, which Konto to update.
     */
    where: KontoWhereUniqueInput
  }

  /**
   * Konto updateMany
   */
  export type KontoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kontos.
     */
    data: XOR<KontoUpdateManyMutationInput, KontoUncheckedUpdateManyInput>
    /**
     * Filter which Kontos to update
     */
    where?: KontoWhereInput
  }

  /**
   * Konto upsert
   */
  export type KontoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konto
     */
    select?: KontoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KontoInclude<ExtArgs> | null
    /**
     * The filter to search for the Konto to update in case it exists.
     */
    where: KontoWhereUniqueInput
    /**
     * In case the Konto found by the `where` argument doesn't exist, create a new Konto with this data.
     */
    create: XOR<KontoCreateInput, KontoUncheckedCreateInput>
    /**
     * In case the Konto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KontoUpdateInput, KontoUncheckedUpdateInput>
  }

  /**
   * Konto delete
   */
  export type KontoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konto
     */
    select?: KontoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KontoInclude<ExtArgs> | null
    /**
     * Filter which Konto to delete.
     */
    where: KontoWhereUniqueInput
  }

  /**
   * Konto deleteMany
   */
  export type KontoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kontos to delete
     */
    where?: KontoWhereInput
  }

  /**
   * Konto.positionen
   */
  export type Konto$positionenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    where?: PositionWhereInput
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    cursor?: PositionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Konto.transaktionen
   */
  export type Konto$transaktionenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaktion
     */
    select?: TransaktionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaktionInclude<ExtArgs> | null
    where?: TransaktionWhereInput
    orderBy?: TransaktionOrderByWithRelationInput | TransaktionOrderByWithRelationInput[]
    cursor?: TransaktionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransaktionScalarFieldEnum | TransaktionScalarFieldEnum[]
  }

  /**
   * Konto without action
   */
  export type KontoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konto
     */
    select?: KontoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KontoInclude<ExtArgs> | null
  }


  /**
   * Model Position
   */

  export type AggregatePosition = {
    _count: PositionCountAggregateOutputType | null
    _avg: PositionAvgAggregateOutputType | null
    _sum: PositionSumAggregateOutputType | null
    _min: PositionMinAggregateOutputType | null
    _max: PositionMaxAggregateOutputType | null
  }

  export type PositionAvgAggregateOutputType = {
    id: number | null
    kontoId: number | null
    quantity: number | null
    entryPrice: number | null
    currentPrice: number | null
    fees: number | null
    leverage: number | null
  }

  export type PositionSumAggregateOutputType = {
    id: number | null
    kontoId: number | null
    quantity: number | null
    entryPrice: number | null
    currentPrice: number | null
    fees: number | null
    leverage: number | null
  }

  export type PositionMinAggregateOutputType = {
    id: number | null
    kontoId: number | null
    assetType: string | null
    symbol: string | null
    name: string | null
    quantity: number | null
    entryPrice: number | null
    currentPrice: number | null
    entryDate: Date | null
    fees: number | null
    leverage: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type PositionMaxAggregateOutputType = {
    id: number | null
    kontoId: number | null
    assetType: string | null
    symbol: string | null
    name: string | null
    quantity: number | null
    entryPrice: number | null
    currentPrice: number | null
    entryDate: Date | null
    fees: number | null
    leverage: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type PositionCountAggregateOutputType = {
    id: number
    kontoId: number
    assetType: number
    symbol: number
    name: number
    quantity: number
    entryPrice: number
    currentPrice: number
    entryDate: number
    fees: number
    leverage: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type PositionAvgAggregateInputType = {
    id?: true
    kontoId?: true
    quantity?: true
    entryPrice?: true
    currentPrice?: true
    fees?: true
    leverage?: true
  }

  export type PositionSumAggregateInputType = {
    id?: true
    kontoId?: true
    quantity?: true
    entryPrice?: true
    currentPrice?: true
    fees?: true
    leverage?: true
  }

  export type PositionMinAggregateInputType = {
    id?: true
    kontoId?: true
    assetType?: true
    symbol?: true
    name?: true
    quantity?: true
    entryPrice?: true
    currentPrice?: true
    entryDate?: true
    fees?: true
    leverage?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type PositionMaxAggregateInputType = {
    id?: true
    kontoId?: true
    assetType?: true
    symbol?: true
    name?: true
    quantity?: true
    entryPrice?: true
    currentPrice?: true
    entryDate?: true
    fees?: true
    leverage?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type PositionCountAggregateInputType = {
    id?: true
    kontoId?: true
    assetType?: true
    symbol?: true
    name?: true
    quantity?: true
    entryPrice?: true
    currentPrice?: true
    entryDate?: true
    fees?: true
    leverage?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type PositionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Position to aggregate.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Positions
    **/
    _count?: true | PositionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PositionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PositionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PositionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PositionMaxAggregateInputType
  }

  export type GetPositionAggregateType<T extends PositionAggregateArgs> = {
        [P in keyof T & keyof AggregatePosition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePosition[P]>
      : GetScalarType<T[P], AggregatePosition[P]>
  }




  export type PositionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PositionWhereInput
    orderBy?: PositionOrderByWithAggregationInput | PositionOrderByWithAggregationInput[]
    by: PositionScalarFieldEnum[] | PositionScalarFieldEnum
    having?: PositionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PositionCountAggregateInputType | true
    _avg?: PositionAvgAggregateInputType
    _sum?: PositionSumAggregateInputType
    _min?: PositionMinAggregateInputType
    _max?: PositionMaxAggregateInputType
  }

  export type PositionGroupByOutputType = {
    id: number
    kontoId: number
    assetType: string
    symbol: string
    name: string | null
    quantity: number
    entryPrice: number
    currentPrice: number | null
    entryDate: Date
    fees: number | null
    leverage: number | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: PositionCountAggregateOutputType | null
    _avg: PositionAvgAggregateOutputType | null
    _sum: PositionSumAggregateOutputType | null
    _min: PositionMinAggregateOutputType | null
    _max: PositionMaxAggregateOutputType | null
  }

  type GetPositionGroupByPayload<T extends PositionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PositionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PositionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PositionGroupByOutputType[P]>
            : GetScalarType<T[P], PositionGroupByOutputType[P]>
        }
      >
    >


  export type PositionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kontoId?: boolean
    assetType?: boolean
    symbol?: boolean
    name?: boolean
    quantity?: boolean
    entryPrice?: boolean
    currentPrice?: boolean
    entryDate?: boolean
    fees?: boolean
    leverage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    konto?: boolean | KontoDefaultArgs<ExtArgs>
    transaktionen?: boolean | Position$transaktionenArgs<ExtArgs>
    _count?: boolean | PositionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["position"]>

  export type PositionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kontoId?: boolean
    assetType?: boolean
    symbol?: boolean
    name?: boolean
    quantity?: boolean
    entryPrice?: boolean
    currentPrice?: boolean
    entryDate?: boolean
    fees?: boolean
    leverage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    konto?: boolean | KontoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["position"]>

  export type PositionSelectScalar = {
    id?: boolean
    kontoId?: boolean
    assetType?: boolean
    symbol?: boolean
    name?: boolean
    quantity?: boolean
    entryPrice?: boolean
    currentPrice?: boolean
    entryDate?: boolean
    fees?: boolean
    leverage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type PositionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    konto?: boolean | KontoDefaultArgs<ExtArgs>
    transaktionen?: boolean | Position$transaktionenArgs<ExtArgs>
    _count?: boolean | PositionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PositionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    konto?: boolean | KontoDefaultArgs<ExtArgs>
  }

  export type $PositionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Position"
    objects: {
      konto: Prisma.$KontoPayload<ExtArgs>
      transaktionen: Prisma.$TransaktionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      kontoId: number
      assetType: string
      symbol: string
      name: string | null
      quantity: number
      entryPrice: number
      currentPrice: number | null
      entryDate: Date
      fees: number | null
      leverage: number | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["position"]>
    composites: {}
  }

  type PositionGetPayload<S extends boolean | null | undefined | PositionDefaultArgs> = $Result.GetResult<Prisma.$PositionPayload, S>

  type PositionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PositionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PositionCountAggregateInputType | true
    }

  export interface PositionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Position'], meta: { name: 'Position' } }
    /**
     * Find zero or one Position that matches the filter.
     * @param {PositionFindUniqueArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PositionFindUniqueArgs>(args: SelectSubset<T, PositionFindUniqueArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Position that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PositionFindUniqueOrThrowArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PositionFindUniqueOrThrowArgs>(args: SelectSubset<T, PositionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Position that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindFirstArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PositionFindFirstArgs>(args?: SelectSubset<T, PositionFindFirstArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Position that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindFirstOrThrowArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PositionFindFirstOrThrowArgs>(args?: SelectSubset<T, PositionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Positions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Positions
     * const positions = await prisma.position.findMany()
     * 
     * // Get first 10 Positions
     * const positions = await prisma.position.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const positionWithIdOnly = await prisma.position.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PositionFindManyArgs>(args?: SelectSubset<T, PositionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Position.
     * @param {PositionCreateArgs} args - Arguments to create a Position.
     * @example
     * // Create one Position
     * const Position = await prisma.position.create({
     *   data: {
     *     // ... data to create a Position
     *   }
     * })
     * 
     */
    create<T extends PositionCreateArgs>(args: SelectSubset<T, PositionCreateArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Positions.
     * @param {PositionCreateManyArgs} args - Arguments to create many Positions.
     * @example
     * // Create many Positions
     * const position = await prisma.position.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PositionCreateManyArgs>(args?: SelectSubset<T, PositionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Positions and returns the data saved in the database.
     * @param {PositionCreateManyAndReturnArgs} args - Arguments to create many Positions.
     * @example
     * // Create many Positions
     * const position = await prisma.position.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Positions and only return the `id`
     * const positionWithIdOnly = await prisma.position.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PositionCreateManyAndReturnArgs>(args?: SelectSubset<T, PositionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Position.
     * @param {PositionDeleteArgs} args - Arguments to delete one Position.
     * @example
     * // Delete one Position
     * const Position = await prisma.position.delete({
     *   where: {
     *     // ... filter to delete one Position
     *   }
     * })
     * 
     */
    delete<T extends PositionDeleteArgs>(args: SelectSubset<T, PositionDeleteArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Position.
     * @param {PositionUpdateArgs} args - Arguments to update one Position.
     * @example
     * // Update one Position
     * const position = await prisma.position.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PositionUpdateArgs>(args: SelectSubset<T, PositionUpdateArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Positions.
     * @param {PositionDeleteManyArgs} args - Arguments to filter Positions to delete.
     * @example
     * // Delete a few Positions
     * const { count } = await prisma.position.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PositionDeleteManyArgs>(args?: SelectSubset<T, PositionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Positions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Positions
     * const position = await prisma.position.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PositionUpdateManyArgs>(args: SelectSubset<T, PositionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Position.
     * @param {PositionUpsertArgs} args - Arguments to update or create a Position.
     * @example
     * // Update or create a Position
     * const position = await prisma.position.upsert({
     *   create: {
     *     // ... data to create a Position
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Position we want to update
     *   }
     * })
     */
    upsert<T extends PositionUpsertArgs>(args: SelectSubset<T, PositionUpsertArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Positions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionCountArgs} args - Arguments to filter Positions to count.
     * @example
     * // Count the number of Positions
     * const count = await prisma.position.count({
     *   where: {
     *     // ... the filter for the Positions we want to count
     *   }
     * })
    **/
    count<T extends PositionCountArgs>(
      args?: Subset<T, PositionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PositionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Position.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PositionAggregateArgs>(args: Subset<T, PositionAggregateArgs>): Prisma.PrismaPromise<GetPositionAggregateType<T>>

    /**
     * Group by Position.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PositionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PositionGroupByArgs['orderBy'] }
        : { orderBy?: PositionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PositionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPositionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Position model
   */
  readonly fields: PositionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Position.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PositionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    konto<T extends KontoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KontoDefaultArgs<ExtArgs>>): Prisma__KontoClient<$Result.GetResult<Prisma.$KontoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    transaktionen<T extends Position$transaktionenArgs<ExtArgs> = {}>(args?: Subset<T, Position$transaktionenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransaktionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Position model
   */ 
  interface PositionFieldRefs {
    readonly id: FieldRef<"Position", 'Int'>
    readonly kontoId: FieldRef<"Position", 'Int'>
    readonly assetType: FieldRef<"Position", 'String'>
    readonly symbol: FieldRef<"Position", 'String'>
    readonly name: FieldRef<"Position", 'String'>
    readonly quantity: FieldRef<"Position", 'Float'>
    readonly entryPrice: FieldRef<"Position", 'Float'>
    readonly currentPrice: FieldRef<"Position", 'Float'>
    readonly entryDate: FieldRef<"Position", 'DateTime'>
    readonly fees: FieldRef<"Position", 'Float'>
    readonly leverage: FieldRef<"Position", 'Float'>
    readonly createdAt: FieldRef<"Position", 'DateTime'>
    readonly updatedAt: FieldRef<"Position", 'DateTime'>
    readonly deletedAt: FieldRef<"Position", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Position findUnique
   */
  export type PositionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position findUniqueOrThrow
   */
  export type PositionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position findFirst
   */
  export type PositionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Positions.
     */
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position findFirstOrThrow
   */
  export type PositionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Positions.
     */
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position findMany
   */
  export type PositionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Positions to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position create
   */
  export type PositionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The data needed to create a Position.
     */
    data: XOR<PositionCreateInput, PositionUncheckedCreateInput>
  }

  /**
   * Position createMany
   */
  export type PositionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Positions.
     */
    data: PositionCreateManyInput | PositionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Position createManyAndReturn
   */
  export type PositionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Positions.
     */
    data: PositionCreateManyInput | PositionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Position update
   */
  export type PositionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The data needed to update a Position.
     */
    data: XOR<PositionUpdateInput, PositionUncheckedUpdateInput>
    /**
     * Choose, which Position to update.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position updateMany
   */
  export type PositionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Positions.
     */
    data: XOR<PositionUpdateManyMutationInput, PositionUncheckedUpdateManyInput>
    /**
     * Filter which Positions to update
     */
    where?: PositionWhereInput
  }

  /**
   * Position upsert
   */
  export type PositionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The filter to search for the Position to update in case it exists.
     */
    where: PositionWhereUniqueInput
    /**
     * In case the Position found by the `where` argument doesn't exist, create a new Position with this data.
     */
    create: XOR<PositionCreateInput, PositionUncheckedCreateInput>
    /**
     * In case the Position was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PositionUpdateInput, PositionUncheckedUpdateInput>
  }

  /**
   * Position delete
   */
  export type PositionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter which Position to delete.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position deleteMany
   */
  export type PositionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Positions to delete
     */
    where?: PositionWhereInput
  }

  /**
   * Position.transaktionen
   */
  export type Position$transaktionenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaktion
     */
    select?: TransaktionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaktionInclude<ExtArgs> | null
    where?: TransaktionWhereInput
    orderBy?: TransaktionOrderByWithRelationInput | TransaktionOrderByWithRelationInput[]
    cursor?: TransaktionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransaktionScalarFieldEnum | TransaktionScalarFieldEnum[]
  }

  /**
   * Position without action
   */
  export type PositionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
  }


  /**
   * Model Aktienidee
   */

  export type AggregateAktienidee = {
    _count: AktienideeCountAggregateOutputType | null
    _avg: AktienideeAvgAggregateOutputType | null
    _sum: AktienideeSumAggregateOutputType | null
    _min: AktienideeMinAggregateOutputType | null
    _max: AktienideeMaxAggregateOutputType | null
  }

  export type AktienideeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    entryPrice: number | null
    kursziel: number | null
  }

  export type AktienideeSumAggregateOutputType = {
    id: number | null
    userId: number | null
    entryPrice: number | null
    kursziel: number | null
  }

  export type AktienideeMinAggregateOutputType = {
    id: number | null
    userId: number | null
    symbol: string | null
    name: string | null
    strategie: string | null
    branche: string | null
    analyst: string | null
    entryPrice: number | null
    kursziel: number | null
    reasoning: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AktienideeMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    symbol: string | null
    name: string | null
    strategie: string | null
    branche: string | null
    analyst: string | null
    entryPrice: number | null
    kursziel: number | null
    reasoning: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AktienideeCountAggregateOutputType = {
    id: number
    userId: number
    symbol: number
    name: number
    strategie: number
    branche: number
    analyst: number
    entryPrice: number
    kursziel: number
    reasoning: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AktienideeAvgAggregateInputType = {
    id?: true
    userId?: true
    entryPrice?: true
    kursziel?: true
  }

  export type AktienideeSumAggregateInputType = {
    id?: true
    userId?: true
    entryPrice?: true
    kursziel?: true
  }

  export type AktienideeMinAggregateInputType = {
    id?: true
    userId?: true
    symbol?: true
    name?: true
    strategie?: true
    branche?: true
    analyst?: true
    entryPrice?: true
    kursziel?: true
    reasoning?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AktienideeMaxAggregateInputType = {
    id?: true
    userId?: true
    symbol?: true
    name?: true
    strategie?: true
    branche?: true
    analyst?: true
    entryPrice?: true
    kursziel?: true
    reasoning?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AktienideeCountAggregateInputType = {
    id?: true
    userId?: true
    symbol?: true
    name?: true
    strategie?: true
    branche?: true
    analyst?: true
    entryPrice?: true
    kursziel?: true
    reasoning?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AktienideeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aktienidee to aggregate.
     */
    where?: AktienideeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aktienidees to fetch.
     */
    orderBy?: AktienideeOrderByWithRelationInput | AktienideeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AktienideeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aktienidees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aktienidees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Aktienidees
    **/
    _count?: true | AktienideeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AktienideeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AktienideeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AktienideeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AktienideeMaxAggregateInputType
  }

  export type GetAktienideeAggregateType<T extends AktienideeAggregateArgs> = {
        [P in keyof T & keyof AggregateAktienidee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAktienidee[P]>
      : GetScalarType<T[P], AggregateAktienidee[P]>
  }




  export type AktienideeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AktienideeWhereInput
    orderBy?: AktienideeOrderByWithAggregationInput | AktienideeOrderByWithAggregationInput[]
    by: AktienideeScalarFieldEnum[] | AktienideeScalarFieldEnum
    having?: AktienideeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AktienideeCountAggregateInputType | true
    _avg?: AktienideeAvgAggregateInputType
    _sum?: AktienideeSumAggregateInputType
    _min?: AktienideeMinAggregateInputType
    _max?: AktienideeMaxAggregateInputType
  }

  export type AktienideeGroupByOutputType = {
    id: number
    userId: number
    symbol: string
    name: string
    strategie: string
    branche: string | null
    analyst: string | null
    entryPrice: number | null
    kursziel: number | null
    reasoning: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    _count: AktienideeCountAggregateOutputType | null
    _avg: AktienideeAvgAggregateOutputType | null
    _sum: AktienideeSumAggregateOutputType | null
    _min: AktienideeMinAggregateOutputType | null
    _max: AktienideeMaxAggregateOutputType | null
  }

  type GetAktienideeGroupByPayload<T extends AktienideeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AktienideeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AktienideeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AktienideeGroupByOutputType[P]>
            : GetScalarType<T[P], AktienideeGroupByOutputType[P]>
        }
      >
    >


  export type AktienideeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    symbol?: boolean
    name?: boolean
    strategie?: boolean
    branche?: boolean
    analyst?: boolean
    entryPrice?: boolean
    kursziel?: boolean
    reasoning?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    bewertungen?: boolean | Aktienidee$bewertungenArgs<ExtArgs>
    _count?: boolean | AktienideeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aktienidee"]>

  export type AktienideeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    symbol?: boolean
    name?: boolean
    strategie?: boolean
    branche?: boolean
    analyst?: boolean
    entryPrice?: boolean
    kursziel?: boolean
    reasoning?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aktienidee"]>

  export type AktienideeSelectScalar = {
    id?: boolean
    userId?: boolean
    symbol?: boolean
    name?: boolean
    strategie?: boolean
    branche?: boolean
    analyst?: boolean
    entryPrice?: boolean
    kursziel?: boolean
    reasoning?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AktienideeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    bewertungen?: boolean | Aktienidee$bewertungenArgs<ExtArgs>
    _count?: boolean | AktienideeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AktienideeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AktienideePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Aktienidee"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      bewertungen: Prisma.$KiBewertungPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      symbol: string
      name: string
      strategie: string
      branche: string | null
      analyst: string | null
      entryPrice: number | null
      kursziel: number | null
      reasoning: string | null
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["aktienidee"]>
    composites: {}
  }

  type AktienideeGetPayload<S extends boolean | null | undefined | AktienideeDefaultArgs> = $Result.GetResult<Prisma.$AktienideePayload, S>

  type AktienideeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AktienideeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AktienideeCountAggregateInputType | true
    }

  export interface AktienideeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Aktienidee'], meta: { name: 'Aktienidee' } }
    /**
     * Find zero or one Aktienidee that matches the filter.
     * @param {AktienideeFindUniqueArgs} args - Arguments to find a Aktienidee
     * @example
     * // Get one Aktienidee
     * const aktienidee = await prisma.aktienidee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AktienideeFindUniqueArgs>(args: SelectSubset<T, AktienideeFindUniqueArgs<ExtArgs>>): Prisma__AktienideeClient<$Result.GetResult<Prisma.$AktienideePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Aktienidee that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AktienideeFindUniqueOrThrowArgs} args - Arguments to find a Aktienidee
     * @example
     * // Get one Aktienidee
     * const aktienidee = await prisma.aktienidee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AktienideeFindUniqueOrThrowArgs>(args: SelectSubset<T, AktienideeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AktienideeClient<$Result.GetResult<Prisma.$AktienideePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Aktienidee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AktienideeFindFirstArgs} args - Arguments to find a Aktienidee
     * @example
     * // Get one Aktienidee
     * const aktienidee = await prisma.aktienidee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AktienideeFindFirstArgs>(args?: SelectSubset<T, AktienideeFindFirstArgs<ExtArgs>>): Prisma__AktienideeClient<$Result.GetResult<Prisma.$AktienideePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Aktienidee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AktienideeFindFirstOrThrowArgs} args - Arguments to find a Aktienidee
     * @example
     * // Get one Aktienidee
     * const aktienidee = await prisma.aktienidee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AktienideeFindFirstOrThrowArgs>(args?: SelectSubset<T, AktienideeFindFirstOrThrowArgs<ExtArgs>>): Prisma__AktienideeClient<$Result.GetResult<Prisma.$AktienideePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Aktienidees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AktienideeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aktienidees
     * const aktienidees = await prisma.aktienidee.findMany()
     * 
     * // Get first 10 Aktienidees
     * const aktienidees = await prisma.aktienidee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aktienideeWithIdOnly = await prisma.aktienidee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AktienideeFindManyArgs>(args?: SelectSubset<T, AktienideeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AktienideePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Aktienidee.
     * @param {AktienideeCreateArgs} args - Arguments to create a Aktienidee.
     * @example
     * // Create one Aktienidee
     * const Aktienidee = await prisma.aktienidee.create({
     *   data: {
     *     // ... data to create a Aktienidee
     *   }
     * })
     * 
     */
    create<T extends AktienideeCreateArgs>(args: SelectSubset<T, AktienideeCreateArgs<ExtArgs>>): Prisma__AktienideeClient<$Result.GetResult<Prisma.$AktienideePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Aktienidees.
     * @param {AktienideeCreateManyArgs} args - Arguments to create many Aktienidees.
     * @example
     * // Create many Aktienidees
     * const aktienidee = await prisma.aktienidee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AktienideeCreateManyArgs>(args?: SelectSubset<T, AktienideeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Aktienidees and returns the data saved in the database.
     * @param {AktienideeCreateManyAndReturnArgs} args - Arguments to create many Aktienidees.
     * @example
     * // Create many Aktienidees
     * const aktienidee = await prisma.aktienidee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Aktienidees and only return the `id`
     * const aktienideeWithIdOnly = await prisma.aktienidee.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AktienideeCreateManyAndReturnArgs>(args?: SelectSubset<T, AktienideeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AktienideePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Aktienidee.
     * @param {AktienideeDeleteArgs} args - Arguments to delete one Aktienidee.
     * @example
     * // Delete one Aktienidee
     * const Aktienidee = await prisma.aktienidee.delete({
     *   where: {
     *     // ... filter to delete one Aktienidee
     *   }
     * })
     * 
     */
    delete<T extends AktienideeDeleteArgs>(args: SelectSubset<T, AktienideeDeleteArgs<ExtArgs>>): Prisma__AktienideeClient<$Result.GetResult<Prisma.$AktienideePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Aktienidee.
     * @param {AktienideeUpdateArgs} args - Arguments to update one Aktienidee.
     * @example
     * // Update one Aktienidee
     * const aktienidee = await prisma.aktienidee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AktienideeUpdateArgs>(args: SelectSubset<T, AktienideeUpdateArgs<ExtArgs>>): Prisma__AktienideeClient<$Result.GetResult<Prisma.$AktienideePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Aktienidees.
     * @param {AktienideeDeleteManyArgs} args - Arguments to filter Aktienidees to delete.
     * @example
     * // Delete a few Aktienidees
     * const { count } = await prisma.aktienidee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AktienideeDeleteManyArgs>(args?: SelectSubset<T, AktienideeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aktienidees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AktienideeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aktienidees
     * const aktienidee = await prisma.aktienidee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AktienideeUpdateManyArgs>(args: SelectSubset<T, AktienideeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aktienidee.
     * @param {AktienideeUpsertArgs} args - Arguments to update or create a Aktienidee.
     * @example
     * // Update or create a Aktienidee
     * const aktienidee = await prisma.aktienidee.upsert({
     *   create: {
     *     // ... data to create a Aktienidee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aktienidee we want to update
     *   }
     * })
     */
    upsert<T extends AktienideeUpsertArgs>(args: SelectSubset<T, AktienideeUpsertArgs<ExtArgs>>): Prisma__AktienideeClient<$Result.GetResult<Prisma.$AktienideePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Aktienidees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AktienideeCountArgs} args - Arguments to filter Aktienidees to count.
     * @example
     * // Count the number of Aktienidees
     * const count = await prisma.aktienidee.count({
     *   where: {
     *     // ... the filter for the Aktienidees we want to count
     *   }
     * })
    **/
    count<T extends AktienideeCountArgs>(
      args?: Subset<T, AktienideeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AktienideeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aktienidee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AktienideeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AktienideeAggregateArgs>(args: Subset<T, AktienideeAggregateArgs>): Prisma.PrismaPromise<GetAktienideeAggregateType<T>>

    /**
     * Group by Aktienidee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AktienideeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AktienideeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AktienideeGroupByArgs['orderBy'] }
        : { orderBy?: AktienideeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AktienideeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAktienideeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Aktienidee model
   */
  readonly fields: AktienideeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Aktienidee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AktienideeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    bewertungen<T extends Aktienidee$bewertungenArgs<ExtArgs> = {}>(args?: Subset<T, Aktienidee$bewertungenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KiBewertungPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Aktienidee model
   */ 
  interface AktienideeFieldRefs {
    readonly id: FieldRef<"Aktienidee", 'Int'>
    readonly userId: FieldRef<"Aktienidee", 'Int'>
    readonly symbol: FieldRef<"Aktienidee", 'String'>
    readonly name: FieldRef<"Aktienidee", 'String'>
    readonly strategie: FieldRef<"Aktienidee", 'String'>
    readonly branche: FieldRef<"Aktienidee", 'String'>
    readonly analyst: FieldRef<"Aktienidee", 'String'>
    readonly entryPrice: FieldRef<"Aktienidee", 'Float'>
    readonly kursziel: FieldRef<"Aktienidee", 'Float'>
    readonly reasoning: FieldRef<"Aktienidee", 'String'>
    readonly status: FieldRef<"Aktienidee", 'String'>
    readonly createdAt: FieldRef<"Aktienidee", 'DateTime'>
    readonly updatedAt: FieldRef<"Aktienidee", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Aktienidee findUnique
   */
  export type AktienideeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aktienidee
     */
    select?: AktienideeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AktienideeInclude<ExtArgs> | null
    /**
     * Filter, which Aktienidee to fetch.
     */
    where: AktienideeWhereUniqueInput
  }

  /**
   * Aktienidee findUniqueOrThrow
   */
  export type AktienideeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aktienidee
     */
    select?: AktienideeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AktienideeInclude<ExtArgs> | null
    /**
     * Filter, which Aktienidee to fetch.
     */
    where: AktienideeWhereUniqueInput
  }

  /**
   * Aktienidee findFirst
   */
  export type AktienideeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aktienidee
     */
    select?: AktienideeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AktienideeInclude<ExtArgs> | null
    /**
     * Filter, which Aktienidee to fetch.
     */
    where?: AktienideeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aktienidees to fetch.
     */
    orderBy?: AktienideeOrderByWithRelationInput | AktienideeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aktienidees.
     */
    cursor?: AktienideeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aktienidees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aktienidees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aktienidees.
     */
    distinct?: AktienideeScalarFieldEnum | AktienideeScalarFieldEnum[]
  }

  /**
   * Aktienidee findFirstOrThrow
   */
  export type AktienideeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aktienidee
     */
    select?: AktienideeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AktienideeInclude<ExtArgs> | null
    /**
     * Filter, which Aktienidee to fetch.
     */
    where?: AktienideeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aktienidees to fetch.
     */
    orderBy?: AktienideeOrderByWithRelationInput | AktienideeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aktienidees.
     */
    cursor?: AktienideeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aktienidees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aktienidees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aktienidees.
     */
    distinct?: AktienideeScalarFieldEnum | AktienideeScalarFieldEnum[]
  }

  /**
   * Aktienidee findMany
   */
  export type AktienideeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aktienidee
     */
    select?: AktienideeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AktienideeInclude<ExtArgs> | null
    /**
     * Filter, which Aktienidees to fetch.
     */
    where?: AktienideeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aktienidees to fetch.
     */
    orderBy?: AktienideeOrderByWithRelationInput | AktienideeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Aktienidees.
     */
    cursor?: AktienideeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aktienidees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aktienidees.
     */
    skip?: number
    distinct?: AktienideeScalarFieldEnum | AktienideeScalarFieldEnum[]
  }

  /**
   * Aktienidee create
   */
  export type AktienideeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aktienidee
     */
    select?: AktienideeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AktienideeInclude<ExtArgs> | null
    /**
     * The data needed to create a Aktienidee.
     */
    data: XOR<AktienideeCreateInput, AktienideeUncheckedCreateInput>
  }

  /**
   * Aktienidee createMany
   */
  export type AktienideeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Aktienidees.
     */
    data: AktienideeCreateManyInput | AktienideeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Aktienidee createManyAndReturn
   */
  export type AktienideeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aktienidee
     */
    select?: AktienideeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Aktienidees.
     */
    data: AktienideeCreateManyInput | AktienideeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AktienideeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Aktienidee update
   */
  export type AktienideeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aktienidee
     */
    select?: AktienideeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AktienideeInclude<ExtArgs> | null
    /**
     * The data needed to update a Aktienidee.
     */
    data: XOR<AktienideeUpdateInput, AktienideeUncheckedUpdateInput>
    /**
     * Choose, which Aktienidee to update.
     */
    where: AktienideeWhereUniqueInput
  }

  /**
   * Aktienidee updateMany
   */
  export type AktienideeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Aktienidees.
     */
    data: XOR<AktienideeUpdateManyMutationInput, AktienideeUncheckedUpdateManyInput>
    /**
     * Filter which Aktienidees to update
     */
    where?: AktienideeWhereInput
  }

  /**
   * Aktienidee upsert
   */
  export type AktienideeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aktienidee
     */
    select?: AktienideeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AktienideeInclude<ExtArgs> | null
    /**
     * The filter to search for the Aktienidee to update in case it exists.
     */
    where: AktienideeWhereUniqueInput
    /**
     * In case the Aktienidee found by the `where` argument doesn't exist, create a new Aktienidee with this data.
     */
    create: XOR<AktienideeCreateInput, AktienideeUncheckedCreateInput>
    /**
     * In case the Aktienidee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AktienideeUpdateInput, AktienideeUncheckedUpdateInput>
  }

  /**
   * Aktienidee delete
   */
  export type AktienideeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aktienidee
     */
    select?: AktienideeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AktienideeInclude<ExtArgs> | null
    /**
     * Filter which Aktienidee to delete.
     */
    where: AktienideeWhereUniqueInput
  }

  /**
   * Aktienidee deleteMany
   */
  export type AktienideeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aktienidees to delete
     */
    where?: AktienideeWhereInput
  }

  /**
   * Aktienidee.bewertungen
   */
  export type Aktienidee$bewertungenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KiBewertung
     */
    select?: KiBewertungSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KiBewertungInclude<ExtArgs> | null
    where?: KiBewertungWhereInput
    orderBy?: KiBewertungOrderByWithRelationInput | KiBewertungOrderByWithRelationInput[]
    cursor?: KiBewertungWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KiBewertungScalarFieldEnum | KiBewertungScalarFieldEnum[]
  }

  /**
   * Aktienidee without action
   */
  export type AktienideeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aktienidee
     */
    select?: AktienideeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AktienideeInclude<ExtArgs> | null
  }


  /**
   * Model Alarm
   */

  export type AggregateAlarm = {
    _count: AlarmCountAggregateOutputType | null
    _avg: AlarmAvgAggregateOutputType | null
    _sum: AlarmSumAggregateOutputType | null
    _min: AlarmMinAggregateOutputType | null
    _max: AlarmMaxAggregateOutputType | null
  }

  export type AlarmAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    schwelle: number | null
  }

  export type AlarmSumAggregateOutputType = {
    id: number | null
    userId: number | null
    schwelle: number | null
  }

  export type AlarmMinAggregateOutputType = {
    id: number | null
    userId: number | null
    symbol: string | null
    name: string | null
    typ: string | null
    schwelle: number | null
    richtung: string | null
    status: string | null
    channel: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ausgeloestAt: Date | null
  }

  export type AlarmMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    symbol: string | null
    name: string | null
    typ: string | null
    schwelle: number | null
    richtung: string | null
    status: string | null
    channel: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ausgeloestAt: Date | null
  }

  export type AlarmCountAggregateOutputType = {
    id: number
    userId: number
    symbol: number
    name: number
    typ: number
    schwelle: number
    richtung: number
    status: number
    channel: number
    createdAt: number
    updatedAt: number
    ausgeloestAt: number
    _all: number
  }


  export type AlarmAvgAggregateInputType = {
    id?: true
    userId?: true
    schwelle?: true
  }

  export type AlarmSumAggregateInputType = {
    id?: true
    userId?: true
    schwelle?: true
  }

  export type AlarmMinAggregateInputType = {
    id?: true
    userId?: true
    symbol?: true
    name?: true
    typ?: true
    schwelle?: true
    richtung?: true
    status?: true
    channel?: true
    createdAt?: true
    updatedAt?: true
    ausgeloestAt?: true
  }

  export type AlarmMaxAggregateInputType = {
    id?: true
    userId?: true
    symbol?: true
    name?: true
    typ?: true
    schwelle?: true
    richtung?: true
    status?: true
    channel?: true
    createdAt?: true
    updatedAt?: true
    ausgeloestAt?: true
  }

  export type AlarmCountAggregateInputType = {
    id?: true
    userId?: true
    symbol?: true
    name?: true
    typ?: true
    schwelle?: true
    richtung?: true
    status?: true
    channel?: true
    createdAt?: true
    updatedAt?: true
    ausgeloestAt?: true
    _all?: true
  }

  export type AlarmAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alarm to aggregate.
     */
    where?: AlarmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlarmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alarms
    **/
    _count?: true | AlarmCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlarmAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlarmSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlarmMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlarmMaxAggregateInputType
  }

  export type GetAlarmAggregateType<T extends AlarmAggregateArgs> = {
        [P in keyof T & keyof AggregateAlarm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlarm[P]>
      : GetScalarType<T[P], AggregateAlarm[P]>
  }




  export type AlarmGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlarmWhereInput
    orderBy?: AlarmOrderByWithAggregationInput | AlarmOrderByWithAggregationInput[]
    by: AlarmScalarFieldEnum[] | AlarmScalarFieldEnum
    having?: AlarmScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlarmCountAggregateInputType | true
    _avg?: AlarmAvgAggregateInputType
    _sum?: AlarmSumAggregateInputType
    _min?: AlarmMinAggregateInputType
    _max?: AlarmMaxAggregateInputType
  }

  export type AlarmGroupByOutputType = {
    id: number
    userId: number
    symbol: string
    name: string
    typ: string
    schwelle: number
    richtung: string
    status: string
    channel: string
    createdAt: Date
    updatedAt: Date
    ausgeloestAt: Date | null
    _count: AlarmCountAggregateOutputType | null
    _avg: AlarmAvgAggregateOutputType | null
    _sum: AlarmSumAggregateOutputType | null
    _min: AlarmMinAggregateOutputType | null
    _max: AlarmMaxAggregateOutputType | null
  }

  type GetAlarmGroupByPayload<T extends AlarmGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlarmGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlarmGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlarmGroupByOutputType[P]>
            : GetScalarType<T[P], AlarmGroupByOutputType[P]>
        }
      >
    >


  export type AlarmSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    symbol?: boolean
    name?: boolean
    typ?: boolean
    schwelle?: boolean
    richtung?: boolean
    status?: boolean
    channel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ausgeloestAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alarm"]>

  export type AlarmSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    symbol?: boolean
    name?: boolean
    typ?: boolean
    schwelle?: boolean
    richtung?: boolean
    status?: boolean
    channel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ausgeloestAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alarm"]>

  export type AlarmSelectScalar = {
    id?: boolean
    userId?: boolean
    symbol?: boolean
    name?: boolean
    typ?: boolean
    schwelle?: boolean
    richtung?: boolean
    status?: boolean
    channel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ausgeloestAt?: boolean
  }

  export type AlarmInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AlarmIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AlarmPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alarm"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      symbol: string
      name: string
      typ: string
      schwelle: number
      richtung: string
      status: string
      channel: string
      createdAt: Date
      updatedAt: Date
      ausgeloestAt: Date | null
    }, ExtArgs["result"]["alarm"]>
    composites: {}
  }

  type AlarmGetPayload<S extends boolean | null | undefined | AlarmDefaultArgs> = $Result.GetResult<Prisma.$AlarmPayload, S>

  type AlarmCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlarmFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlarmCountAggregateInputType | true
    }

  export interface AlarmDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alarm'], meta: { name: 'Alarm' } }
    /**
     * Find zero or one Alarm that matches the filter.
     * @param {AlarmFindUniqueArgs} args - Arguments to find a Alarm
     * @example
     * // Get one Alarm
     * const alarm = await prisma.alarm.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlarmFindUniqueArgs>(args: SelectSubset<T, AlarmFindUniqueArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Alarm that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AlarmFindUniqueOrThrowArgs} args - Arguments to find a Alarm
     * @example
     * // Get one Alarm
     * const alarm = await prisma.alarm.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlarmFindUniqueOrThrowArgs>(args: SelectSubset<T, AlarmFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Alarm that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmFindFirstArgs} args - Arguments to find a Alarm
     * @example
     * // Get one Alarm
     * const alarm = await prisma.alarm.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlarmFindFirstArgs>(args?: SelectSubset<T, AlarmFindFirstArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Alarm that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmFindFirstOrThrowArgs} args - Arguments to find a Alarm
     * @example
     * // Get one Alarm
     * const alarm = await prisma.alarm.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlarmFindFirstOrThrowArgs>(args?: SelectSubset<T, AlarmFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Alarms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alarms
     * const alarms = await prisma.alarm.findMany()
     * 
     * // Get first 10 Alarms
     * const alarms = await prisma.alarm.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alarmWithIdOnly = await prisma.alarm.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlarmFindManyArgs>(args?: SelectSubset<T, AlarmFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Alarm.
     * @param {AlarmCreateArgs} args - Arguments to create a Alarm.
     * @example
     * // Create one Alarm
     * const Alarm = await prisma.alarm.create({
     *   data: {
     *     // ... data to create a Alarm
     *   }
     * })
     * 
     */
    create<T extends AlarmCreateArgs>(args: SelectSubset<T, AlarmCreateArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Alarms.
     * @param {AlarmCreateManyArgs} args - Arguments to create many Alarms.
     * @example
     * // Create many Alarms
     * const alarm = await prisma.alarm.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlarmCreateManyArgs>(args?: SelectSubset<T, AlarmCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alarms and returns the data saved in the database.
     * @param {AlarmCreateManyAndReturnArgs} args - Arguments to create many Alarms.
     * @example
     * // Create many Alarms
     * const alarm = await prisma.alarm.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alarms and only return the `id`
     * const alarmWithIdOnly = await prisma.alarm.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlarmCreateManyAndReturnArgs>(args?: SelectSubset<T, AlarmCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Alarm.
     * @param {AlarmDeleteArgs} args - Arguments to delete one Alarm.
     * @example
     * // Delete one Alarm
     * const Alarm = await prisma.alarm.delete({
     *   where: {
     *     // ... filter to delete one Alarm
     *   }
     * })
     * 
     */
    delete<T extends AlarmDeleteArgs>(args: SelectSubset<T, AlarmDeleteArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Alarm.
     * @param {AlarmUpdateArgs} args - Arguments to update one Alarm.
     * @example
     * // Update one Alarm
     * const alarm = await prisma.alarm.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlarmUpdateArgs>(args: SelectSubset<T, AlarmUpdateArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Alarms.
     * @param {AlarmDeleteManyArgs} args - Arguments to filter Alarms to delete.
     * @example
     * // Delete a few Alarms
     * const { count } = await prisma.alarm.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlarmDeleteManyArgs>(args?: SelectSubset<T, AlarmDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alarms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alarms
     * const alarm = await prisma.alarm.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlarmUpdateManyArgs>(args: SelectSubset<T, AlarmUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alarm.
     * @param {AlarmUpsertArgs} args - Arguments to update or create a Alarm.
     * @example
     * // Update or create a Alarm
     * const alarm = await prisma.alarm.upsert({
     *   create: {
     *     // ... data to create a Alarm
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alarm we want to update
     *   }
     * })
     */
    upsert<T extends AlarmUpsertArgs>(args: SelectSubset<T, AlarmUpsertArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Alarms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmCountArgs} args - Arguments to filter Alarms to count.
     * @example
     * // Count the number of Alarms
     * const count = await prisma.alarm.count({
     *   where: {
     *     // ... the filter for the Alarms we want to count
     *   }
     * })
    **/
    count<T extends AlarmCountArgs>(
      args?: Subset<T, AlarmCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlarmCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alarm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlarmAggregateArgs>(args: Subset<T, AlarmAggregateArgs>): Prisma.PrismaPromise<GetAlarmAggregateType<T>>

    /**
     * Group by Alarm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlarmGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlarmGroupByArgs['orderBy'] }
        : { orderBy?: AlarmGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlarmGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlarmGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alarm model
   */
  readonly fields: AlarmFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alarm.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlarmClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alarm model
   */ 
  interface AlarmFieldRefs {
    readonly id: FieldRef<"Alarm", 'Int'>
    readonly userId: FieldRef<"Alarm", 'Int'>
    readonly symbol: FieldRef<"Alarm", 'String'>
    readonly name: FieldRef<"Alarm", 'String'>
    readonly typ: FieldRef<"Alarm", 'String'>
    readonly schwelle: FieldRef<"Alarm", 'Float'>
    readonly richtung: FieldRef<"Alarm", 'String'>
    readonly status: FieldRef<"Alarm", 'String'>
    readonly channel: FieldRef<"Alarm", 'String'>
    readonly createdAt: FieldRef<"Alarm", 'DateTime'>
    readonly updatedAt: FieldRef<"Alarm", 'DateTime'>
    readonly ausgeloestAt: FieldRef<"Alarm", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Alarm findUnique
   */
  export type AlarmFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarm to fetch.
     */
    where: AlarmWhereUniqueInput
  }

  /**
   * Alarm findUniqueOrThrow
   */
  export type AlarmFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarm to fetch.
     */
    where: AlarmWhereUniqueInput
  }

  /**
   * Alarm findFirst
   */
  export type AlarmFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarm to fetch.
     */
    where?: AlarmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alarms.
     */
    cursor?: AlarmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alarms.
     */
    distinct?: AlarmScalarFieldEnum | AlarmScalarFieldEnum[]
  }

  /**
   * Alarm findFirstOrThrow
   */
  export type AlarmFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarm to fetch.
     */
    where?: AlarmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alarms.
     */
    cursor?: AlarmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alarms.
     */
    distinct?: AlarmScalarFieldEnum | AlarmScalarFieldEnum[]
  }

  /**
   * Alarm findMany
   */
  export type AlarmFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarms to fetch.
     */
    where?: AlarmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alarms.
     */
    cursor?: AlarmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    distinct?: AlarmScalarFieldEnum | AlarmScalarFieldEnum[]
  }

  /**
   * Alarm create
   */
  export type AlarmCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * The data needed to create a Alarm.
     */
    data: XOR<AlarmCreateInput, AlarmUncheckedCreateInput>
  }

  /**
   * Alarm createMany
   */
  export type AlarmCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alarms.
     */
    data: AlarmCreateManyInput | AlarmCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alarm createManyAndReturn
   */
  export type AlarmCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Alarms.
     */
    data: AlarmCreateManyInput | AlarmCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alarm update
   */
  export type AlarmUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * The data needed to update a Alarm.
     */
    data: XOR<AlarmUpdateInput, AlarmUncheckedUpdateInput>
    /**
     * Choose, which Alarm to update.
     */
    where: AlarmWhereUniqueInput
  }

  /**
   * Alarm updateMany
   */
  export type AlarmUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alarms.
     */
    data: XOR<AlarmUpdateManyMutationInput, AlarmUncheckedUpdateManyInput>
    /**
     * Filter which Alarms to update
     */
    where?: AlarmWhereInput
  }

  /**
   * Alarm upsert
   */
  export type AlarmUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * The filter to search for the Alarm to update in case it exists.
     */
    where: AlarmWhereUniqueInput
    /**
     * In case the Alarm found by the `where` argument doesn't exist, create a new Alarm with this data.
     */
    create: XOR<AlarmCreateInput, AlarmUncheckedCreateInput>
    /**
     * In case the Alarm was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlarmUpdateInput, AlarmUncheckedUpdateInput>
  }

  /**
   * Alarm delete
   */
  export type AlarmDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter which Alarm to delete.
     */
    where: AlarmWhereUniqueInput
  }

  /**
   * Alarm deleteMany
   */
  export type AlarmDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alarms to delete
     */
    where?: AlarmWhereInput
  }

  /**
   * Alarm without action
   */
  export type AlarmDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
  }


  /**
   * Model Transaktion
   */

  export type AggregateTransaktion = {
    _count: TransaktionCountAggregateOutputType | null
    _avg: TransaktionAvgAggregateOutputType | null
    _sum: TransaktionSumAggregateOutputType | null
    _min: TransaktionMinAggregateOutputType | null
    _max: TransaktionMaxAggregateOutputType | null
  }

  export type TransaktionAvgAggregateOutputType = {
    id: number | null
    kontoId: number | null
    positionId: number | null
    quantity: number | null
    price: number | null
    fees: number | null
  }

  export type TransaktionSumAggregateOutputType = {
    id: number | null
    kontoId: number | null
    positionId: number | null
    quantity: number | null
    price: number | null
    fees: number | null
  }

  export type TransaktionMinAggregateOutputType = {
    id: number | null
    kontoId: number | null
    positionId: number | null
    typ: string | null
    symbol: string | null
    quantity: number | null
    price: number | null
    fees: number | null
    datum: Date | null
    description: string | null
    createdAt: Date | null
  }

  export type TransaktionMaxAggregateOutputType = {
    id: number | null
    kontoId: number | null
    positionId: number | null
    typ: string | null
    symbol: string | null
    quantity: number | null
    price: number | null
    fees: number | null
    datum: Date | null
    description: string | null
    createdAt: Date | null
  }

  export type TransaktionCountAggregateOutputType = {
    id: number
    kontoId: number
    positionId: number
    typ: number
    symbol: number
    quantity: number
    price: number
    fees: number
    datum: number
    description: number
    createdAt: number
    _all: number
  }


  export type TransaktionAvgAggregateInputType = {
    id?: true
    kontoId?: true
    positionId?: true
    quantity?: true
    price?: true
    fees?: true
  }

  export type TransaktionSumAggregateInputType = {
    id?: true
    kontoId?: true
    positionId?: true
    quantity?: true
    price?: true
    fees?: true
  }

  export type TransaktionMinAggregateInputType = {
    id?: true
    kontoId?: true
    positionId?: true
    typ?: true
    symbol?: true
    quantity?: true
    price?: true
    fees?: true
    datum?: true
    description?: true
    createdAt?: true
  }

  export type TransaktionMaxAggregateInputType = {
    id?: true
    kontoId?: true
    positionId?: true
    typ?: true
    symbol?: true
    quantity?: true
    price?: true
    fees?: true
    datum?: true
    description?: true
    createdAt?: true
  }

  export type TransaktionCountAggregateInputType = {
    id?: true
    kontoId?: true
    positionId?: true
    typ?: true
    symbol?: true
    quantity?: true
    price?: true
    fees?: true
    datum?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type TransaktionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaktion to aggregate.
     */
    where?: TransaktionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaktions to fetch.
     */
    orderBy?: TransaktionOrderByWithRelationInput | TransaktionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransaktionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaktions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaktions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transaktions
    **/
    _count?: true | TransaktionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransaktionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransaktionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransaktionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransaktionMaxAggregateInputType
  }

  export type GetTransaktionAggregateType<T extends TransaktionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaktion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaktion[P]>
      : GetScalarType<T[P], AggregateTransaktion[P]>
  }




  export type TransaktionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransaktionWhereInput
    orderBy?: TransaktionOrderByWithAggregationInput | TransaktionOrderByWithAggregationInput[]
    by: TransaktionScalarFieldEnum[] | TransaktionScalarFieldEnum
    having?: TransaktionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransaktionCountAggregateInputType | true
    _avg?: TransaktionAvgAggregateInputType
    _sum?: TransaktionSumAggregateInputType
    _min?: TransaktionMinAggregateInputType
    _max?: TransaktionMaxAggregateInputType
  }

  export type TransaktionGroupByOutputType = {
    id: number
    kontoId: number
    positionId: number | null
    typ: string
    symbol: string
    quantity: number | null
    price: number
    fees: number | null
    datum: Date
    description: string | null
    createdAt: Date
    _count: TransaktionCountAggregateOutputType | null
    _avg: TransaktionAvgAggregateOutputType | null
    _sum: TransaktionSumAggregateOutputType | null
    _min: TransaktionMinAggregateOutputType | null
    _max: TransaktionMaxAggregateOutputType | null
  }

  type GetTransaktionGroupByPayload<T extends TransaktionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransaktionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransaktionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransaktionGroupByOutputType[P]>
            : GetScalarType<T[P], TransaktionGroupByOutputType[P]>
        }
      >
    >


  export type TransaktionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kontoId?: boolean
    positionId?: boolean
    typ?: boolean
    symbol?: boolean
    quantity?: boolean
    price?: boolean
    fees?: boolean
    datum?: boolean
    description?: boolean
    createdAt?: boolean
    konto?: boolean | KontoDefaultArgs<ExtArgs>
    position?: boolean | Transaktion$positionArgs<ExtArgs>
  }, ExtArgs["result"]["transaktion"]>

  export type TransaktionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kontoId?: boolean
    positionId?: boolean
    typ?: boolean
    symbol?: boolean
    quantity?: boolean
    price?: boolean
    fees?: boolean
    datum?: boolean
    description?: boolean
    createdAt?: boolean
    konto?: boolean | KontoDefaultArgs<ExtArgs>
    position?: boolean | Transaktion$positionArgs<ExtArgs>
  }, ExtArgs["result"]["transaktion"]>

  export type TransaktionSelectScalar = {
    id?: boolean
    kontoId?: boolean
    positionId?: boolean
    typ?: boolean
    symbol?: boolean
    quantity?: boolean
    price?: boolean
    fees?: boolean
    datum?: boolean
    description?: boolean
    createdAt?: boolean
  }

  export type TransaktionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    konto?: boolean | KontoDefaultArgs<ExtArgs>
    position?: boolean | Transaktion$positionArgs<ExtArgs>
  }
  export type TransaktionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    konto?: boolean | KontoDefaultArgs<ExtArgs>
    position?: boolean | Transaktion$positionArgs<ExtArgs>
  }

  export type $TransaktionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaktion"
    objects: {
      konto: Prisma.$KontoPayload<ExtArgs>
      position: Prisma.$PositionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      kontoId: number
      positionId: number | null
      typ: string
      symbol: string
      quantity: number | null
      price: number
      fees: number | null
      datum: Date
      description: string | null
      createdAt: Date
    }, ExtArgs["result"]["transaktion"]>
    composites: {}
  }

  type TransaktionGetPayload<S extends boolean | null | undefined | TransaktionDefaultArgs> = $Result.GetResult<Prisma.$TransaktionPayload, S>

  type TransaktionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransaktionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransaktionCountAggregateInputType | true
    }

  export interface TransaktionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaktion'], meta: { name: 'Transaktion' } }
    /**
     * Find zero or one Transaktion that matches the filter.
     * @param {TransaktionFindUniqueArgs} args - Arguments to find a Transaktion
     * @example
     * // Get one Transaktion
     * const transaktion = await prisma.transaktion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransaktionFindUniqueArgs>(args: SelectSubset<T, TransaktionFindUniqueArgs<ExtArgs>>): Prisma__TransaktionClient<$Result.GetResult<Prisma.$TransaktionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transaktion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransaktionFindUniqueOrThrowArgs} args - Arguments to find a Transaktion
     * @example
     * // Get one Transaktion
     * const transaktion = await prisma.transaktion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransaktionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransaktionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransaktionClient<$Result.GetResult<Prisma.$TransaktionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transaktion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaktionFindFirstArgs} args - Arguments to find a Transaktion
     * @example
     * // Get one Transaktion
     * const transaktion = await prisma.transaktion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransaktionFindFirstArgs>(args?: SelectSubset<T, TransaktionFindFirstArgs<ExtArgs>>): Prisma__TransaktionClient<$Result.GetResult<Prisma.$TransaktionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transaktion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaktionFindFirstOrThrowArgs} args - Arguments to find a Transaktion
     * @example
     * // Get one Transaktion
     * const transaktion = await prisma.transaktion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransaktionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransaktionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransaktionClient<$Result.GetResult<Prisma.$TransaktionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transaktions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaktionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transaktions
     * const transaktions = await prisma.transaktion.findMany()
     * 
     * // Get first 10 Transaktions
     * const transaktions = await prisma.transaktion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transaktionWithIdOnly = await prisma.transaktion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransaktionFindManyArgs>(args?: SelectSubset<T, TransaktionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransaktionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transaktion.
     * @param {TransaktionCreateArgs} args - Arguments to create a Transaktion.
     * @example
     * // Create one Transaktion
     * const Transaktion = await prisma.transaktion.create({
     *   data: {
     *     // ... data to create a Transaktion
     *   }
     * })
     * 
     */
    create<T extends TransaktionCreateArgs>(args: SelectSubset<T, TransaktionCreateArgs<ExtArgs>>): Prisma__TransaktionClient<$Result.GetResult<Prisma.$TransaktionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transaktions.
     * @param {TransaktionCreateManyArgs} args - Arguments to create many Transaktions.
     * @example
     * // Create many Transaktions
     * const transaktion = await prisma.transaktion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransaktionCreateManyArgs>(args?: SelectSubset<T, TransaktionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transaktions and returns the data saved in the database.
     * @param {TransaktionCreateManyAndReturnArgs} args - Arguments to create many Transaktions.
     * @example
     * // Create many Transaktions
     * const transaktion = await prisma.transaktion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transaktions and only return the `id`
     * const transaktionWithIdOnly = await prisma.transaktion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransaktionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransaktionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransaktionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transaktion.
     * @param {TransaktionDeleteArgs} args - Arguments to delete one Transaktion.
     * @example
     * // Delete one Transaktion
     * const Transaktion = await prisma.transaktion.delete({
     *   where: {
     *     // ... filter to delete one Transaktion
     *   }
     * })
     * 
     */
    delete<T extends TransaktionDeleteArgs>(args: SelectSubset<T, TransaktionDeleteArgs<ExtArgs>>): Prisma__TransaktionClient<$Result.GetResult<Prisma.$TransaktionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transaktion.
     * @param {TransaktionUpdateArgs} args - Arguments to update one Transaktion.
     * @example
     * // Update one Transaktion
     * const transaktion = await prisma.transaktion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransaktionUpdateArgs>(args: SelectSubset<T, TransaktionUpdateArgs<ExtArgs>>): Prisma__TransaktionClient<$Result.GetResult<Prisma.$TransaktionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transaktions.
     * @param {TransaktionDeleteManyArgs} args - Arguments to filter Transaktions to delete.
     * @example
     * // Delete a few Transaktions
     * const { count } = await prisma.transaktion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransaktionDeleteManyArgs>(args?: SelectSubset<T, TransaktionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transaktions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaktionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transaktions
     * const transaktion = await prisma.transaktion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransaktionUpdateManyArgs>(args: SelectSubset<T, TransaktionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaktion.
     * @param {TransaktionUpsertArgs} args - Arguments to update or create a Transaktion.
     * @example
     * // Update or create a Transaktion
     * const transaktion = await prisma.transaktion.upsert({
     *   create: {
     *     // ... data to create a Transaktion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaktion we want to update
     *   }
     * })
     */
    upsert<T extends TransaktionUpsertArgs>(args: SelectSubset<T, TransaktionUpsertArgs<ExtArgs>>): Prisma__TransaktionClient<$Result.GetResult<Prisma.$TransaktionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transaktions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaktionCountArgs} args - Arguments to filter Transaktions to count.
     * @example
     * // Count the number of Transaktions
     * const count = await prisma.transaktion.count({
     *   where: {
     *     // ... the filter for the Transaktions we want to count
     *   }
     * })
    **/
    count<T extends TransaktionCountArgs>(
      args?: Subset<T, TransaktionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransaktionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaktion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaktionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransaktionAggregateArgs>(args: Subset<T, TransaktionAggregateArgs>): Prisma.PrismaPromise<GetTransaktionAggregateType<T>>

    /**
     * Group by Transaktion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaktionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransaktionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransaktionGroupByArgs['orderBy'] }
        : { orderBy?: TransaktionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransaktionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransaktionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaktion model
   */
  readonly fields: TransaktionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaktion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransaktionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    konto<T extends KontoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KontoDefaultArgs<ExtArgs>>): Prisma__KontoClient<$Result.GetResult<Prisma.$KontoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    position<T extends Transaktion$positionArgs<ExtArgs> = {}>(args?: Subset<T, Transaktion$positionArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaktion model
   */ 
  interface TransaktionFieldRefs {
    readonly id: FieldRef<"Transaktion", 'Int'>
    readonly kontoId: FieldRef<"Transaktion", 'Int'>
    readonly positionId: FieldRef<"Transaktion", 'Int'>
    readonly typ: FieldRef<"Transaktion", 'String'>
    readonly symbol: FieldRef<"Transaktion", 'String'>
    readonly quantity: FieldRef<"Transaktion", 'Float'>
    readonly price: FieldRef<"Transaktion", 'Float'>
    readonly fees: FieldRef<"Transaktion", 'Float'>
    readonly datum: FieldRef<"Transaktion", 'DateTime'>
    readonly description: FieldRef<"Transaktion", 'String'>
    readonly createdAt: FieldRef<"Transaktion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaktion findUnique
   */
  export type TransaktionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaktion
     */
    select?: TransaktionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaktionInclude<ExtArgs> | null
    /**
     * Filter, which Transaktion to fetch.
     */
    where: TransaktionWhereUniqueInput
  }

  /**
   * Transaktion findUniqueOrThrow
   */
  export type TransaktionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaktion
     */
    select?: TransaktionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaktionInclude<ExtArgs> | null
    /**
     * Filter, which Transaktion to fetch.
     */
    where: TransaktionWhereUniqueInput
  }

  /**
   * Transaktion findFirst
   */
  export type TransaktionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaktion
     */
    select?: TransaktionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaktionInclude<ExtArgs> | null
    /**
     * Filter, which Transaktion to fetch.
     */
    where?: TransaktionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaktions to fetch.
     */
    orderBy?: TransaktionOrderByWithRelationInput | TransaktionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transaktions.
     */
    cursor?: TransaktionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaktions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaktions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transaktions.
     */
    distinct?: TransaktionScalarFieldEnum | TransaktionScalarFieldEnum[]
  }

  /**
   * Transaktion findFirstOrThrow
   */
  export type TransaktionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaktion
     */
    select?: TransaktionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaktionInclude<ExtArgs> | null
    /**
     * Filter, which Transaktion to fetch.
     */
    where?: TransaktionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaktions to fetch.
     */
    orderBy?: TransaktionOrderByWithRelationInput | TransaktionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transaktions.
     */
    cursor?: TransaktionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaktions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaktions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transaktions.
     */
    distinct?: TransaktionScalarFieldEnum | TransaktionScalarFieldEnum[]
  }

  /**
   * Transaktion findMany
   */
  export type TransaktionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaktion
     */
    select?: TransaktionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaktionInclude<ExtArgs> | null
    /**
     * Filter, which Transaktions to fetch.
     */
    where?: TransaktionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaktions to fetch.
     */
    orderBy?: TransaktionOrderByWithRelationInput | TransaktionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transaktions.
     */
    cursor?: TransaktionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaktions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaktions.
     */
    skip?: number
    distinct?: TransaktionScalarFieldEnum | TransaktionScalarFieldEnum[]
  }

  /**
   * Transaktion create
   */
  export type TransaktionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaktion
     */
    select?: TransaktionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaktionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaktion.
     */
    data: XOR<TransaktionCreateInput, TransaktionUncheckedCreateInput>
  }

  /**
   * Transaktion createMany
   */
  export type TransaktionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transaktions.
     */
    data: TransaktionCreateManyInput | TransaktionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaktion createManyAndReturn
   */
  export type TransaktionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaktion
     */
    select?: TransaktionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Transaktions.
     */
    data: TransaktionCreateManyInput | TransaktionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaktionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaktion update
   */
  export type TransaktionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaktion
     */
    select?: TransaktionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaktionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaktion.
     */
    data: XOR<TransaktionUpdateInput, TransaktionUncheckedUpdateInput>
    /**
     * Choose, which Transaktion to update.
     */
    where: TransaktionWhereUniqueInput
  }

  /**
   * Transaktion updateMany
   */
  export type TransaktionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transaktions.
     */
    data: XOR<TransaktionUpdateManyMutationInput, TransaktionUncheckedUpdateManyInput>
    /**
     * Filter which Transaktions to update
     */
    where?: TransaktionWhereInput
  }

  /**
   * Transaktion upsert
   */
  export type TransaktionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaktion
     */
    select?: TransaktionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaktionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaktion to update in case it exists.
     */
    where: TransaktionWhereUniqueInput
    /**
     * In case the Transaktion found by the `where` argument doesn't exist, create a new Transaktion with this data.
     */
    create: XOR<TransaktionCreateInput, TransaktionUncheckedCreateInput>
    /**
     * In case the Transaktion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransaktionUpdateInput, TransaktionUncheckedUpdateInput>
  }

  /**
   * Transaktion delete
   */
  export type TransaktionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaktion
     */
    select?: TransaktionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaktionInclude<ExtArgs> | null
    /**
     * Filter which Transaktion to delete.
     */
    where: TransaktionWhereUniqueInput
  }

  /**
   * Transaktion deleteMany
   */
  export type TransaktionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaktions to delete
     */
    where?: TransaktionWhereInput
  }

  /**
   * Transaktion.position
   */
  export type Transaktion$positionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    where?: PositionWhereInput
  }

  /**
   * Transaktion without action
   */
  export type TransaktionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaktion
     */
    select?: TransaktionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaktionInclude<ExtArgs> | null
  }


  /**
   * Model KiBewertung
   */

  export type AggregateKiBewertung = {
    _count: KiBewertungCountAggregateOutputType | null
    _avg: KiBewertungAvgAggregateOutputType | null
    _sum: KiBewertungSumAggregateOutputType | null
    _min: KiBewertungMinAggregateOutputType | null
    _max: KiBewertungMaxAggregateOutputType | null
  }

  export type KiBewertungAvgAggregateOutputType = {
    id: number | null
    aktienideeId: number | null
    scoreFundamental: number | null
    scoreTechnisch: number | null
    scoreKombiniert: number | null
  }

  export type KiBewertungSumAggregateOutputType = {
    id: number | null
    aktienideeId: number | null
    scoreFundamental: number | null
    scoreTechnisch: number | null
    scoreKombiniert: number | null
  }

  export type KiBewertungMinAggregateOutputType = {
    id: number | null
    aktienideeId: number | null
    symbol: string | null
    scoreFundamental: number | null
    scoreTechnisch: number | null
    scoreKombiniert: number | null
    kommentar: string | null
    createdAt: Date | null
  }

  export type KiBewertungMaxAggregateOutputType = {
    id: number | null
    aktienideeId: number | null
    symbol: string | null
    scoreFundamental: number | null
    scoreTechnisch: number | null
    scoreKombiniert: number | null
    kommentar: string | null
    createdAt: Date | null
  }

  export type KiBewertungCountAggregateOutputType = {
    id: number
    aktienideeId: number
    symbol: number
    scoreFundamental: number
    scoreTechnisch: number
    scoreKombiniert: number
    kommentar: number
    createdAt: number
    _all: number
  }


  export type KiBewertungAvgAggregateInputType = {
    id?: true
    aktienideeId?: true
    scoreFundamental?: true
    scoreTechnisch?: true
    scoreKombiniert?: true
  }

  export type KiBewertungSumAggregateInputType = {
    id?: true
    aktienideeId?: true
    scoreFundamental?: true
    scoreTechnisch?: true
    scoreKombiniert?: true
  }

  export type KiBewertungMinAggregateInputType = {
    id?: true
    aktienideeId?: true
    symbol?: true
    scoreFundamental?: true
    scoreTechnisch?: true
    scoreKombiniert?: true
    kommentar?: true
    createdAt?: true
  }

  export type KiBewertungMaxAggregateInputType = {
    id?: true
    aktienideeId?: true
    symbol?: true
    scoreFundamental?: true
    scoreTechnisch?: true
    scoreKombiniert?: true
    kommentar?: true
    createdAt?: true
  }

  export type KiBewertungCountAggregateInputType = {
    id?: true
    aktienideeId?: true
    symbol?: true
    scoreFundamental?: true
    scoreTechnisch?: true
    scoreKombiniert?: true
    kommentar?: true
    createdAt?: true
    _all?: true
  }

  export type KiBewertungAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KiBewertung to aggregate.
     */
    where?: KiBewertungWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KiBewertungs to fetch.
     */
    orderBy?: KiBewertungOrderByWithRelationInput | KiBewertungOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KiBewertungWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KiBewertungs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KiBewertungs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KiBewertungs
    **/
    _count?: true | KiBewertungCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KiBewertungAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KiBewertungSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KiBewertungMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KiBewertungMaxAggregateInputType
  }

  export type GetKiBewertungAggregateType<T extends KiBewertungAggregateArgs> = {
        [P in keyof T & keyof AggregateKiBewertung]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKiBewertung[P]>
      : GetScalarType<T[P], AggregateKiBewertung[P]>
  }




  export type KiBewertungGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KiBewertungWhereInput
    orderBy?: KiBewertungOrderByWithAggregationInput | KiBewertungOrderByWithAggregationInput[]
    by: KiBewertungScalarFieldEnum[] | KiBewertungScalarFieldEnum
    having?: KiBewertungScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KiBewertungCountAggregateInputType | true
    _avg?: KiBewertungAvgAggregateInputType
    _sum?: KiBewertungSumAggregateInputType
    _min?: KiBewertungMinAggregateInputType
    _max?: KiBewertungMaxAggregateInputType
  }

  export type KiBewertungGroupByOutputType = {
    id: number
    aktienideeId: number
    symbol: string
    scoreFundamental: number | null
    scoreTechnisch: number | null
    scoreKombiniert: number | null
    kommentar: string | null
    createdAt: Date
    _count: KiBewertungCountAggregateOutputType | null
    _avg: KiBewertungAvgAggregateOutputType | null
    _sum: KiBewertungSumAggregateOutputType | null
    _min: KiBewertungMinAggregateOutputType | null
    _max: KiBewertungMaxAggregateOutputType | null
  }

  type GetKiBewertungGroupByPayload<T extends KiBewertungGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KiBewertungGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KiBewertungGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KiBewertungGroupByOutputType[P]>
            : GetScalarType<T[P], KiBewertungGroupByOutputType[P]>
        }
      >
    >


  export type KiBewertungSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    aktienideeId?: boolean
    symbol?: boolean
    scoreFundamental?: boolean
    scoreTechnisch?: boolean
    scoreKombiniert?: boolean
    kommentar?: boolean
    createdAt?: boolean
    aktienidee?: boolean | AktienideeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kiBewertung"]>

  export type KiBewertungSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    aktienideeId?: boolean
    symbol?: boolean
    scoreFundamental?: boolean
    scoreTechnisch?: boolean
    scoreKombiniert?: boolean
    kommentar?: boolean
    createdAt?: boolean
    aktienidee?: boolean | AktienideeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kiBewertung"]>

  export type KiBewertungSelectScalar = {
    id?: boolean
    aktienideeId?: boolean
    symbol?: boolean
    scoreFundamental?: boolean
    scoreTechnisch?: boolean
    scoreKombiniert?: boolean
    kommentar?: boolean
    createdAt?: boolean
  }

  export type KiBewertungInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aktienidee?: boolean | AktienideeDefaultArgs<ExtArgs>
  }
  export type KiBewertungIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aktienidee?: boolean | AktienideeDefaultArgs<ExtArgs>
  }

  export type $KiBewertungPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KiBewertung"
    objects: {
      aktienidee: Prisma.$AktienideePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      aktienideeId: number
      symbol: string
      scoreFundamental: number | null
      scoreTechnisch: number | null
      scoreKombiniert: number | null
      kommentar: string | null
      createdAt: Date
    }, ExtArgs["result"]["kiBewertung"]>
    composites: {}
  }

  type KiBewertungGetPayload<S extends boolean | null | undefined | KiBewertungDefaultArgs> = $Result.GetResult<Prisma.$KiBewertungPayload, S>

  type KiBewertungCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KiBewertungFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KiBewertungCountAggregateInputType | true
    }

  export interface KiBewertungDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KiBewertung'], meta: { name: 'KiBewertung' } }
    /**
     * Find zero or one KiBewertung that matches the filter.
     * @param {KiBewertungFindUniqueArgs} args - Arguments to find a KiBewertung
     * @example
     * // Get one KiBewertung
     * const kiBewertung = await prisma.kiBewertung.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KiBewertungFindUniqueArgs>(args: SelectSubset<T, KiBewertungFindUniqueArgs<ExtArgs>>): Prisma__KiBewertungClient<$Result.GetResult<Prisma.$KiBewertungPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one KiBewertung that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KiBewertungFindUniqueOrThrowArgs} args - Arguments to find a KiBewertung
     * @example
     * // Get one KiBewertung
     * const kiBewertung = await prisma.kiBewertung.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KiBewertungFindUniqueOrThrowArgs>(args: SelectSubset<T, KiBewertungFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KiBewertungClient<$Result.GetResult<Prisma.$KiBewertungPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first KiBewertung that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KiBewertungFindFirstArgs} args - Arguments to find a KiBewertung
     * @example
     * // Get one KiBewertung
     * const kiBewertung = await prisma.kiBewertung.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KiBewertungFindFirstArgs>(args?: SelectSubset<T, KiBewertungFindFirstArgs<ExtArgs>>): Prisma__KiBewertungClient<$Result.GetResult<Prisma.$KiBewertungPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first KiBewertung that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KiBewertungFindFirstOrThrowArgs} args - Arguments to find a KiBewertung
     * @example
     * // Get one KiBewertung
     * const kiBewertung = await prisma.kiBewertung.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KiBewertungFindFirstOrThrowArgs>(args?: SelectSubset<T, KiBewertungFindFirstOrThrowArgs<ExtArgs>>): Prisma__KiBewertungClient<$Result.GetResult<Prisma.$KiBewertungPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more KiBewertungs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KiBewertungFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KiBewertungs
     * const kiBewertungs = await prisma.kiBewertung.findMany()
     * 
     * // Get first 10 KiBewertungs
     * const kiBewertungs = await prisma.kiBewertung.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kiBewertungWithIdOnly = await prisma.kiBewertung.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KiBewertungFindManyArgs>(args?: SelectSubset<T, KiBewertungFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KiBewertungPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a KiBewertung.
     * @param {KiBewertungCreateArgs} args - Arguments to create a KiBewertung.
     * @example
     * // Create one KiBewertung
     * const KiBewertung = await prisma.kiBewertung.create({
     *   data: {
     *     // ... data to create a KiBewertung
     *   }
     * })
     * 
     */
    create<T extends KiBewertungCreateArgs>(args: SelectSubset<T, KiBewertungCreateArgs<ExtArgs>>): Prisma__KiBewertungClient<$Result.GetResult<Prisma.$KiBewertungPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many KiBewertungs.
     * @param {KiBewertungCreateManyArgs} args - Arguments to create many KiBewertungs.
     * @example
     * // Create many KiBewertungs
     * const kiBewertung = await prisma.kiBewertung.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KiBewertungCreateManyArgs>(args?: SelectSubset<T, KiBewertungCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KiBewertungs and returns the data saved in the database.
     * @param {KiBewertungCreateManyAndReturnArgs} args - Arguments to create many KiBewertungs.
     * @example
     * // Create many KiBewertungs
     * const kiBewertung = await prisma.kiBewertung.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KiBewertungs and only return the `id`
     * const kiBewertungWithIdOnly = await prisma.kiBewertung.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KiBewertungCreateManyAndReturnArgs>(args?: SelectSubset<T, KiBewertungCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KiBewertungPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a KiBewertung.
     * @param {KiBewertungDeleteArgs} args - Arguments to delete one KiBewertung.
     * @example
     * // Delete one KiBewertung
     * const KiBewertung = await prisma.kiBewertung.delete({
     *   where: {
     *     // ... filter to delete one KiBewertung
     *   }
     * })
     * 
     */
    delete<T extends KiBewertungDeleteArgs>(args: SelectSubset<T, KiBewertungDeleteArgs<ExtArgs>>): Prisma__KiBewertungClient<$Result.GetResult<Prisma.$KiBewertungPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one KiBewertung.
     * @param {KiBewertungUpdateArgs} args - Arguments to update one KiBewertung.
     * @example
     * // Update one KiBewertung
     * const kiBewertung = await prisma.kiBewertung.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KiBewertungUpdateArgs>(args: SelectSubset<T, KiBewertungUpdateArgs<ExtArgs>>): Prisma__KiBewertungClient<$Result.GetResult<Prisma.$KiBewertungPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more KiBewertungs.
     * @param {KiBewertungDeleteManyArgs} args - Arguments to filter KiBewertungs to delete.
     * @example
     * // Delete a few KiBewertungs
     * const { count } = await prisma.kiBewertung.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KiBewertungDeleteManyArgs>(args?: SelectSubset<T, KiBewertungDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KiBewertungs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KiBewertungUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KiBewertungs
     * const kiBewertung = await prisma.kiBewertung.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KiBewertungUpdateManyArgs>(args: SelectSubset<T, KiBewertungUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KiBewertung.
     * @param {KiBewertungUpsertArgs} args - Arguments to update or create a KiBewertung.
     * @example
     * // Update or create a KiBewertung
     * const kiBewertung = await prisma.kiBewertung.upsert({
     *   create: {
     *     // ... data to create a KiBewertung
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KiBewertung we want to update
     *   }
     * })
     */
    upsert<T extends KiBewertungUpsertArgs>(args: SelectSubset<T, KiBewertungUpsertArgs<ExtArgs>>): Prisma__KiBewertungClient<$Result.GetResult<Prisma.$KiBewertungPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of KiBewertungs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KiBewertungCountArgs} args - Arguments to filter KiBewertungs to count.
     * @example
     * // Count the number of KiBewertungs
     * const count = await prisma.kiBewertung.count({
     *   where: {
     *     // ... the filter for the KiBewertungs we want to count
     *   }
     * })
    **/
    count<T extends KiBewertungCountArgs>(
      args?: Subset<T, KiBewertungCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KiBewertungCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KiBewertung.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KiBewertungAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KiBewertungAggregateArgs>(args: Subset<T, KiBewertungAggregateArgs>): Prisma.PrismaPromise<GetKiBewertungAggregateType<T>>

    /**
     * Group by KiBewertung.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KiBewertungGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KiBewertungGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KiBewertungGroupByArgs['orderBy'] }
        : { orderBy?: KiBewertungGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KiBewertungGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKiBewertungGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KiBewertung model
   */
  readonly fields: KiBewertungFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KiBewertung.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KiBewertungClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    aktienidee<T extends AktienideeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AktienideeDefaultArgs<ExtArgs>>): Prisma__AktienideeClient<$Result.GetResult<Prisma.$AktienideePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KiBewertung model
   */ 
  interface KiBewertungFieldRefs {
    readonly id: FieldRef<"KiBewertung", 'Int'>
    readonly aktienideeId: FieldRef<"KiBewertung", 'Int'>
    readonly symbol: FieldRef<"KiBewertung", 'String'>
    readonly scoreFundamental: FieldRef<"KiBewertung", 'Float'>
    readonly scoreTechnisch: FieldRef<"KiBewertung", 'Float'>
    readonly scoreKombiniert: FieldRef<"KiBewertung", 'Float'>
    readonly kommentar: FieldRef<"KiBewertung", 'String'>
    readonly createdAt: FieldRef<"KiBewertung", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KiBewertung findUnique
   */
  export type KiBewertungFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KiBewertung
     */
    select?: KiBewertungSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KiBewertungInclude<ExtArgs> | null
    /**
     * Filter, which KiBewertung to fetch.
     */
    where: KiBewertungWhereUniqueInput
  }

  /**
   * KiBewertung findUniqueOrThrow
   */
  export type KiBewertungFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KiBewertung
     */
    select?: KiBewertungSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KiBewertungInclude<ExtArgs> | null
    /**
     * Filter, which KiBewertung to fetch.
     */
    where: KiBewertungWhereUniqueInput
  }

  /**
   * KiBewertung findFirst
   */
  export type KiBewertungFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KiBewertung
     */
    select?: KiBewertungSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KiBewertungInclude<ExtArgs> | null
    /**
     * Filter, which KiBewertung to fetch.
     */
    where?: KiBewertungWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KiBewertungs to fetch.
     */
    orderBy?: KiBewertungOrderByWithRelationInput | KiBewertungOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KiBewertungs.
     */
    cursor?: KiBewertungWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KiBewertungs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KiBewertungs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KiBewertungs.
     */
    distinct?: KiBewertungScalarFieldEnum | KiBewertungScalarFieldEnum[]
  }

  /**
   * KiBewertung findFirstOrThrow
   */
  export type KiBewertungFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KiBewertung
     */
    select?: KiBewertungSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KiBewertungInclude<ExtArgs> | null
    /**
     * Filter, which KiBewertung to fetch.
     */
    where?: KiBewertungWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KiBewertungs to fetch.
     */
    orderBy?: KiBewertungOrderByWithRelationInput | KiBewertungOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KiBewertungs.
     */
    cursor?: KiBewertungWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KiBewertungs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KiBewertungs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KiBewertungs.
     */
    distinct?: KiBewertungScalarFieldEnum | KiBewertungScalarFieldEnum[]
  }

  /**
   * KiBewertung findMany
   */
  export type KiBewertungFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KiBewertung
     */
    select?: KiBewertungSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KiBewertungInclude<ExtArgs> | null
    /**
     * Filter, which KiBewertungs to fetch.
     */
    where?: KiBewertungWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KiBewertungs to fetch.
     */
    orderBy?: KiBewertungOrderByWithRelationInput | KiBewertungOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KiBewertungs.
     */
    cursor?: KiBewertungWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KiBewertungs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KiBewertungs.
     */
    skip?: number
    distinct?: KiBewertungScalarFieldEnum | KiBewertungScalarFieldEnum[]
  }

  /**
   * KiBewertung create
   */
  export type KiBewertungCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KiBewertung
     */
    select?: KiBewertungSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KiBewertungInclude<ExtArgs> | null
    /**
     * The data needed to create a KiBewertung.
     */
    data: XOR<KiBewertungCreateInput, KiBewertungUncheckedCreateInput>
  }

  /**
   * KiBewertung createMany
   */
  export type KiBewertungCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KiBewertungs.
     */
    data: KiBewertungCreateManyInput | KiBewertungCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KiBewertung createManyAndReturn
   */
  export type KiBewertungCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KiBewertung
     */
    select?: KiBewertungSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many KiBewertungs.
     */
    data: KiBewertungCreateManyInput | KiBewertungCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KiBewertungIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KiBewertung update
   */
  export type KiBewertungUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KiBewertung
     */
    select?: KiBewertungSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KiBewertungInclude<ExtArgs> | null
    /**
     * The data needed to update a KiBewertung.
     */
    data: XOR<KiBewertungUpdateInput, KiBewertungUncheckedUpdateInput>
    /**
     * Choose, which KiBewertung to update.
     */
    where: KiBewertungWhereUniqueInput
  }

  /**
   * KiBewertung updateMany
   */
  export type KiBewertungUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KiBewertungs.
     */
    data: XOR<KiBewertungUpdateManyMutationInput, KiBewertungUncheckedUpdateManyInput>
    /**
     * Filter which KiBewertungs to update
     */
    where?: KiBewertungWhereInput
  }

  /**
   * KiBewertung upsert
   */
  export type KiBewertungUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KiBewertung
     */
    select?: KiBewertungSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KiBewertungInclude<ExtArgs> | null
    /**
     * The filter to search for the KiBewertung to update in case it exists.
     */
    where: KiBewertungWhereUniqueInput
    /**
     * In case the KiBewertung found by the `where` argument doesn't exist, create a new KiBewertung with this data.
     */
    create: XOR<KiBewertungCreateInput, KiBewertungUncheckedCreateInput>
    /**
     * In case the KiBewertung was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KiBewertungUpdateInput, KiBewertungUncheckedUpdateInput>
  }

  /**
   * KiBewertung delete
   */
  export type KiBewertungDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KiBewertung
     */
    select?: KiBewertungSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KiBewertungInclude<ExtArgs> | null
    /**
     * Filter which KiBewertung to delete.
     */
    where: KiBewertungWhereUniqueInput
  }

  /**
   * KiBewertung deleteMany
   */
  export type KiBewertungDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KiBewertungs to delete
     */
    where?: KiBewertungWhereInput
  }

  /**
   * KiBewertung without action
   */
  export type KiBewertungDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KiBewertung
     */
    select?: KiBewertungSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KiBewertungInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    settings: 'settings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BrokerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    notes: 'notes',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BrokerScalarFieldEnum = (typeof BrokerScalarFieldEnum)[keyof typeof BrokerScalarFieldEnum]


  export const KontoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    accountNumber: 'accountNumber',
    currency: 'currency',
    brokerId: 'brokerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KontoScalarFieldEnum = (typeof KontoScalarFieldEnum)[keyof typeof KontoScalarFieldEnum]


  export const PositionScalarFieldEnum: {
    id: 'id',
    kontoId: 'kontoId',
    assetType: 'assetType',
    symbol: 'symbol',
    name: 'name',
    quantity: 'quantity',
    entryPrice: 'entryPrice',
    currentPrice: 'currentPrice',
    entryDate: 'entryDate',
    fees: 'fees',
    leverage: 'leverage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type PositionScalarFieldEnum = (typeof PositionScalarFieldEnum)[keyof typeof PositionScalarFieldEnum]


  export const AktienideeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    symbol: 'symbol',
    name: 'name',
    strategie: 'strategie',
    branche: 'branche',
    analyst: 'analyst',
    entryPrice: 'entryPrice',
    kursziel: 'kursziel',
    reasoning: 'reasoning',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AktienideeScalarFieldEnum = (typeof AktienideeScalarFieldEnum)[keyof typeof AktienideeScalarFieldEnum]


  export const AlarmScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    symbol: 'symbol',
    name: 'name',
    typ: 'typ',
    schwelle: 'schwelle',
    richtung: 'richtung',
    status: 'status',
    channel: 'channel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ausgeloestAt: 'ausgeloestAt'
  };

  export type AlarmScalarFieldEnum = (typeof AlarmScalarFieldEnum)[keyof typeof AlarmScalarFieldEnum]


  export const TransaktionScalarFieldEnum: {
    id: 'id',
    kontoId: 'kontoId',
    positionId: 'positionId',
    typ: 'typ',
    symbol: 'symbol',
    quantity: 'quantity',
    price: 'price',
    fees: 'fees',
    datum: 'datum',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type TransaktionScalarFieldEnum = (typeof TransaktionScalarFieldEnum)[keyof typeof TransaktionScalarFieldEnum]


  export const KiBewertungScalarFieldEnum: {
    id: 'id',
    aktienideeId: 'aktienideeId',
    symbol: 'symbol',
    scoreFundamental: 'scoreFundamental',
    scoreTechnisch: 'scoreTechnisch',
    scoreKombiniert: 'scoreKombiniert',
    kommentar: 'kommentar',
    createdAt: 'createdAt'
  };

  export type KiBewertungScalarFieldEnum = (typeof KiBewertungScalarFieldEnum)[keyof typeof KiBewertungScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    settings?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    brokers?: BrokerListRelationFilter
    aktienideen?: AktienideeListRelationFilter
    alarme?: AlarmListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    settings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brokers?: BrokerOrderByRelationAggregateInput
    aktienideen?: AktienideeOrderByRelationAggregateInput
    alarme?: AlarmOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    settings?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    brokers?: BrokerListRelationFilter
    aktienideen?: AktienideeListRelationFilter
    alarme?: AlarmListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    settings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    settings?: JsonNullableWithAggregatesFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type BrokerWhereInput = {
    AND?: BrokerWhereInput | BrokerWhereInput[]
    OR?: BrokerWhereInput[]
    NOT?: BrokerWhereInput | BrokerWhereInput[]
    id?: IntFilter<"Broker"> | number
    name?: StringFilter<"Broker"> | string
    type?: StringFilter<"Broker"> | string
    notes?: StringNullableFilter<"Broker"> | string | null
    userId?: IntFilter<"Broker"> | number
    createdAt?: DateTimeFilter<"Broker"> | Date | string
    updatedAt?: DateTimeFilter<"Broker"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    konten?: KontoListRelationFilter
  }

  export type BrokerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    notes?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    konten?: KontoOrderByRelationAggregateInput
  }

  export type BrokerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BrokerWhereInput | BrokerWhereInput[]
    OR?: BrokerWhereInput[]
    NOT?: BrokerWhereInput | BrokerWhereInput[]
    name?: StringFilter<"Broker"> | string
    type?: StringFilter<"Broker"> | string
    notes?: StringNullableFilter<"Broker"> | string | null
    userId?: IntFilter<"Broker"> | number
    createdAt?: DateTimeFilter<"Broker"> | Date | string
    updatedAt?: DateTimeFilter<"Broker"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    konten?: KontoListRelationFilter
  }, "id">

  export type BrokerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    notes?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BrokerCountOrderByAggregateInput
    _avg?: BrokerAvgOrderByAggregateInput
    _max?: BrokerMaxOrderByAggregateInput
    _min?: BrokerMinOrderByAggregateInput
    _sum?: BrokerSumOrderByAggregateInput
  }

  export type BrokerScalarWhereWithAggregatesInput = {
    AND?: BrokerScalarWhereWithAggregatesInput | BrokerScalarWhereWithAggregatesInput[]
    OR?: BrokerScalarWhereWithAggregatesInput[]
    NOT?: BrokerScalarWhereWithAggregatesInput | BrokerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Broker"> | number
    name?: StringWithAggregatesFilter<"Broker"> | string
    type?: StringWithAggregatesFilter<"Broker"> | string
    notes?: StringNullableWithAggregatesFilter<"Broker"> | string | null
    userId?: IntWithAggregatesFilter<"Broker"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Broker"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Broker"> | Date | string
  }

  export type KontoWhereInput = {
    AND?: KontoWhereInput | KontoWhereInput[]
    OR?: KontoWhereInput[]
    NOT?: KontoWhereInput | KontoWhereInput[]
    id?: IntFilter<"Konto"> | number
    name?: StringFilter<"Konto"> | string
    accountNumber?: StringNullableFilter<"Konto"> | string | null
    currency?: StringFilter<"Konto"> | string
    brokerId?: IntFilter<"Konto"> | number
    createdAt?: DateTimeFilter<"Konto"> | Date | string
    updatedAt?: DateTimeFilter<"Konto"> | Date | string
    broker?: XOR<BrokerRelationFilter, BrokerWhereInput>
    positionen?: PositionListRelationFilter
    transaktionen?: TransaktionListRelationFilter
  }

  export type KontoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    accountNumber?: SortOrderInput | SortOrder
    currency?: SortOrder
    brokerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    broker?: BrokerOrderByWithRelationInput
    positionen?: PositionOrderByRelationAggregateInput
    transaktionen?: TransaktionOrderByRelationAggregateInput
  }

  export type KontoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KontoWhereInput | KontoWhereInput[]
    OR?: KontoWhereInput[]
    NOT?: KontoWhereInput | KontoWhereInput[]
    name?: StringFilter<"Konto"> | string
    accountNumber?: StringNullableFilter<"Konto"> | string | null
    currency?: StringFilter<"Konto"> | string
    brokerId?: IntFilter<"Konto"> | number
    createdAt?: DateTimeFilter<"Konto"> | Date | string
    updatedAt?: DateTimeFilter<"Konto"> | Date | string
    broker?: XOR<BrokerRelationFilter, BrokerWhereInput>
    positionen?: PositionListRelationFilter
    transaktionen?: TransaktionListRelationFilter
  }, "id">

  export type KontoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    accountNumber?: SortOrderInput | SortOrder
    currency?: SortOrder
    brokerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KontoCountOrderByAggregateInput
    _avg?: KontoAvgOrderByAggregateInput
    _max?: KontoMaxOrderByAggregateInput
    _min?: KontoMinOrderByAggregateInput
    _sum?: KontoSumOrderByAggregateInput
  }

  export type KontoScalarWhereWithAggregatesInput = {
    AND?: KontoScalarWhereWithAggregatesInput | KontoScalarWhereWithAggregatesInput[]
    OR?: KontoScalarWhereWithAggregatesInput[]
    NOT?: KontoScalarWhereWithAggregatesInput | KontoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Konto"> | number
    name?: StringWithAggregatesFilter<"Konto"> | string
    accountNumber?: StringNullableWithAggregatesFilter<"Konto"> | string | null
    currency?: StringWithAggregatesFilter<"Konto"> | string
    brokerId?: IntWithAggregatesFilter<"Konto"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Konto"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Konto"> | Date | string
  }

  export type PositionWhereInput = {
    AND?: PositionWhereInput | PositionWhereInput[]
    OR?: PositionWhereInput[]
    NOT?: PositionWhereInput | PositionWhereInput[]
    id?: IntFilter<"Position"> | number
    kontoId?: IntFilter<"Position"> | number
    assetType?: StringFilter<"Position"> | string
    symbol?: StringFilter<"Position"> | string
    name?: StringNullableFilter<"Position"> | string | null
    quantity?: FloatFilter<"Position"> | number
    entryPrice?: FloatFilter<"Position"> | number
    currentPrice?: FloatNullableFilter<"Position"> | number | null
    entryDate?: DateTimeFilter<"Position"> | Date | string
    fees?: FloatNullableFilter<"Position"> | number | null
    leverage?: FloatNullableFilter<"Position"> | number | null
    createdAt?: DateTimeFilter<"Position"> | Date | string
    updatedAt?: DateTimeFilter<"Position"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Position"> | Date | string | null
    konto?: XOR<KontoRelationFilter, KontoWhereInput>
    transaktionen?: TransaktionListRelationFilter
  }

  export type PositionOrderByWithRelationInput = {
    id?: SortOrder
    kontoId?: SortOrder
    assetType?: SortOrder
    symbol?: SortOrder
    name?: SortOrderInput | SortOrder
    quantity?: SortOrder
    entryPrice?: SortOrder
    currentPrice?: SortOrderInput | SortOrder
    entryDate?: SortOrder
    fees?: SortOrderInput | SortOrder
    leverage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    konto?: KontoOrderByWithRelationInput
    transaktionen?: TransaktionOrderByRelationAggregateInput
  }

  export type PositionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PositionWhereInput | PositionWhereInput[]
    OR?: PositionWhereInput[]
    NOT?: PositionWhereInput | PositionWhereInput[]
    kontoId?: IntFilter<"Position"> | number
    assetType?: StringFilter<"Position"> | string
    symbol?: StringFilter<"Position"> | string
    name?: StringNullableFilter<"Position"> | string | null
    quantity?: FloatFilter<"Position"> | number
    entryPrice?: FloatFilter<"Position"> | number
    currentPrice?: FloatNullableFilter<"Position"> | number | null
    entryDate?: DateTimeFilter<"Position"> | Date | string
    fees?: FloatNullableFilter<"Position"> | number | null
    leverage?: FloatNullableFilter<"Position"> | number | null
    createdAt?: DateTimeFilter<"Position"> | Date | string
    updatedAt?: DateTimeFilter<"Position"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Position"> | Date | string | null
    konto?: XOR<KontoRelationFilter, KontoWhereInput>
    transaktionen?: TransaktionListRelationFilter
  }, "id">

  export type PositionOrderByWithAggregationInput = {
    id?: SortOrder
    kontoId?: SortOrder
    assetType?: SortOrder
    symbol?: SortOrder
    name?: SortOrderInput | SortOrder
    quantity?: SortOrder
    entryPrice?: SortOrder
    currentPrice?: SortOrderInput | SortOrder
    entryDate?: SortOrder
    fees?: SortOrderInput | SortOrder
    leverage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: PositionCountOrderByAggregateInput
    _avg?: PositionAvgOrderByAggregateInput
    _max?: PositionMaxOrderByAggregateInput
    _min?: PositionMinOrderByAggregateInput
    _sum?: PositionSumOrderByAggregateInput
  }

  export type PositionScalarWhereWithAggregatesInput = {
    AND?: PositionScalarWhereWithAggregatesInput | PositionScalarWhereWithAggregatesInput[]
    OR?: PositionScalarWhereWithAggregatesInput[]
    NOT?: PositionScalarWhereWithAggregatesInput | PositionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Position"> | number
    kontoId?: IntWithAggregatesFilter<"Position"> | number
    assetType?: StringWithAggregatesFilter<"Position"> | string
    symbol?: StringWithAggregatesFilter<"Position"> | string
    name?: StringNullableWithAggregatesFilter<"Position"> | string | null
    quantity?: FloatWithAggregatesFilter<"Position"> | number
    entryPrice?: FloatWithAggregatesFilter<"Position"> | number
    currentPrice?: FloatNullableWithAggregatesFilter<"Position"> | number | null
    entryDate?: DateTimeWithAggregatesFilter<"Position"> | Date | string
    fees?: FloatNullableWithAggregatesFilter<"Position"> | number | null
    leverage?: FloatNullableWithAggregatesFilter<"Position"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Position"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Position"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Position"> | Date | string | null
  }

  export type AktienideeWhereInput = {
    AND?: AktienideeWhereInput | AktienideeWhereInput[]
    OR?: AktienideeWhereInput[]
    NOT?: AktienideeWhereInput | AktienideeWhereInput[]
    id?: IntFilter<"Aktienidee"> | number
    userId?: IntFilter<"Aktienidee"> | number
    symbol?: StringFilter<"Aktienidee"> | string
    name?: StringFilter<"Aktienidee"> | string
    strategie?: StringFilter<"Aktienidee"> | string
    branche?: StringNullableFilter<"Aktienidee"> | string | null
    analyst?: StringNullableFilter<"Aktienidee"> | string | null
    entryPrice?: FloatNullableFilter<"Aktienidee"> | number | null
    kursziel?: FloatNullableFilter<"Aktienidee"> | number | null
    reasoning?: StringNullableFilter<"Aktienidee"> | string | null
    status?: StringFilter<"Aktienidee"> | string
    createdAt?: DateTimeFilter<"Aktienidee"> | Date | string
    updatedAt?: DateTimeFilter<"Aktienidee"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    bewertungen?: KiBewertungListRelationFilter
  }

  export type AktienideeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    strategie?: SortOrder
    branche?: SortOrderInput | SortOrder
    analyst?: SortOrderInput | SortOrder
    entryPrice?: SortOrderInput | SortOrder
    kursziel?: SortOrderInput | SortOrder
    reasoning?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    bewertungen?: KiBewertungOrderByRelationAggregateInput
  }

  export type AktienideeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AktienideeWhereInput | AktienideeWhereInput[]
    OR?: AktienideeWhereInput[]
    NOT?: AktienideeWhereInput | AktienideeWhereInput[]
    userId?: IntFilter<"Aktienidee"> | number
    symbol?: StringFilter<"Aktienidee"> | string
    name?: StringFilter<"Aktienidee"> | string
    strategie?: StringFilter<"Aktienidee"> | string
    branche?: StringNullableFilter<"Aktienidee"> | string | null
    analyst?: StringNullableFilter<"Aktienidee"> | string | null
    entryPrice?: FloatNullableFilter<"Aktienidee"> | number | null
    kursziel?: FloatNullableFilter<"Aktienidee"> | number | null
    reasoning?: StringNullableFilter<"Aktienidee"> | string | null
    status?: StringFilter<"Aktienidee"> | string
    createdAt?: DateTimeFilter<"Aktienidee"> | Date | string
    updatedAt?: DateTimeFilter<"Aktienidee"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    bewertungen?: KiBewertungListRelationFilter
  }, "id">

  export type AktienideeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    strategie?: SortOrder
    branche?: SortOrderInput | SortOrder
    analyst?: SortOrderInput | SortOrder
    entryPrice?: SortOrderInput | SortOrder
    kursziel?: SortOrderInput | SortOrder
    reasoning?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AktienideeCountOrderByAggregateInput
    _avg?: AktienideeAvgOrderByAggregateInput
    _max?: AktienideeMaxOrderByAggregateInput
    _min?: AktienideeMinOrderByAggregateInput
    _sum?: AktienideeSumOrderByAggregateInput
  }

  export type AktienideeScalarWhereWithAggregatesInput = {
    AND?: AktienideeScalarWhereWithAggregatesInput | AktienideeScalarWhereWithAggregatesInput[]
    OR?: AktienideeScalarWhereWithAggregatesInput[]
    NOT?: AktienideeScalarWhereWithAggregatesInput | AktienideeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Aktienidee"> | number
    userId?: IntWithAggregatesFilter<"Aktienidee"> | number
    symbol?: StringWithAggregatesFilter<"Aktienidee"> | string
    name?: StringWithAggregatesFilter<"Aktienidee"> | string
    strategie?: StringWithAggregatesFilter<"Aktienidee"> | string
    branche?: StringNullableWithAggregatesFilter<"Aktienidee"> | string | null
    analyst?: StringNullableWithAggregatesFilter<"Aktienidee"> | string | null
    entryPrice?: FloatNullableWithAggregatesFilter<"Aktienidee"> | number | null
    kursziel?: FloatNullableWithAggregatesFilter<"Aktienidee"> | number | null
    reasoning?: StringNullableWithAggregatesFilter<"Aktienidee"> | string | null
    status?: StringWithAggregatesFilter<"Aktienidee"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Aktienidee"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Aktienidee"> | Date | string
  }

  export type AlarmWhereInput = {
    AND?: AlarmWhereInput | AlarmWhereInput[]
    OR?: AlarmWhereInput[]
    NOT?: AlarmWhereInput | AlarmWhereInput[]
    id?: IntFilter<"Alarm"> | number
    userId?: IntFilter<"Alarm"> | number
    symbol?: StringFilter<"Alarm"> | string
    name?: StringFilter<"Alarm"> | string
    typ?: StringFilter<"Alarm"> | string
    schwelle?: FloatFilter<"Alarm"> | number
    richtung?: StringFilter<"Alarm"> | string
    status?: StringFilter<"Alarm"> | string
    channel?: StringFilter<"Alarm"> | string
    createdAt?: DateTimeFilter<"Alarm"> | Date | string
    updatedAt?: DateTimeFilter<"Alarm"> | Date | string
    ausgeloestAt?: DateTimeNullableFilter<"Alarm"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AlarmOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    typ?: SortOrder
    schwelle?: SortOrder
    richtung?: SortOrder
    status?: SortOrder
    channel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ausgeloestAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AlarmWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlarmWhereInput | AlarmWhereInput[]
    OR?: AlarmWhereInput[]
    NOT?: AlarmWhereInput | AlarmWhereInput[]
    userId?: IntFilter<"Alarm"> | number
    symbol?: StringFilter<"Alarm"> | string
    name?: StringFilter<"Alarm"> | string
    typ?: StringFilter<"Alarm"> | string
    schwelle?: FloatFilter<"Alarm"> | number
    richtung?: StringFilter<"Alarm"> | string
    status?: StringFilter<"Alarm"> | string
    channel?: StringFilter<"Alarm"> | string
    createdAt?: DateTimeFilter<"Alarm"> | Date | string
    updatedAt?: DateTimeFilter<"Alarm"> | Date | string
    ausgeloestAt?: DateTimeNullableFilter<"Alarm"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AlarmOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    typ?: SortOrder
    schwelle?: SortOrder
    richtung?: SortOrder
    status?: SortOrder
    channel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ausgeloestAt?: SortOrderInput | SortOrder
    _count?: AlarmCountOrderByAggregateInput
    _avg?: AlarmAvgOrderByAggregateInput
    _max?: AlarmMaxOrderByAggregateInput
    _min?: AlarmMinOrderByAggregateInput
    _sum?: AlarmSumOrderByAggregateInput
  }

  export type AlarmScalarWhereWithAggregatesInput = {
    AND?: AlarmScalarWhereWithAggregatesInput | AlarmScalarWhereWithAggregatesInput[]
    OR?: AlarmScalarWhereWithAggregatesInput[]
    NOT?: AlarmScalarWhereWithAggregatesInput | AlarmScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Alarm"> | number
    userId?: IntWithAggregatesFilter<"Alarm"> | number
    symbol?: StringWithAggregatesFilter<"Alarm"> | string
    name?: StringWithAggregatesFilter<"Alarm"> | string
    typ?: StringWithAggregatesFilter<"Alarm"> | string
    schwelle?: FloatWithAggregatesFilter<"Alarm"> | number
    richtung?: StringWithAggregatesFilter<"Alarm"> | string
    status?: StringWithAggregatesFilter<"Alarm"> | string
    channel?: StringWithAggregatesFilter<"Alarm"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Alarm"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Alarm"> | Date | string
    ausgeloestAt?: DateTimeNullableWithAggregatesFilter<"Alarm"> | Date | string | null
  }

  export type TransaktionWhereInput = {
    AND?: TransaktionWhereInput | TransaktionWhereInput[]
    OR?: TransaktionWhereInput[]
    NOT?: TransaktionWhereInput | TransaktionWhereInput[]
    id?: IntFilter<"Transaktion"> | number
    kontoId?: IntFilter<"Transaktion"> | number
    positionId?: IntNullableFilter<"Transaktion"> | number | null
    typ?: StringFilter<"Transaktion"> | string
    symbol?: StringFilter<"Transaktion"> | string
    quantity?: FloatNullableFilter<"Transaktion"> | number | null
    price?: FloatFilter<"Transaktion"> | number
    fees?: FloatNullableFilter<"Transaktion"> | number | null
    datum?: DateTimeFilter<"Transaktion"> | Date | string
    description?: StringNullableFilter<"Transaktion"> | string | null
    createdAt?: DateTimeFilter<"Transaktion"> | Date | string
    konto?: XOR<KontoRelationFilter, KontoWhereInput>
    position?: XOR<PositionNullableRelationFilter, PositionWhereInput> | null
  }

  export type TransaktionOrderByWithRelationInput = {
    id?: SortOrder
    kontoId?: SortOrder
    positionId?: SortOrderInput | SortOrder
    typ?: SortOrder
    symbol?: SortOrder
    quantity?: SortOrderInput | SortOrder
    price?: SortOrder
    fees?: SortOrderInput | SortOrder
    datum?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    konto?: KontoOrderByWithRelationInput
    position?: PositionOrderByWithRelationInput
  }

  export type TransaktionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransaktionWhereInput | TransaktionWhereInput[]
    OR?: TransaktionWhereInput[]
    NOT?: TransaktionWhereInput | TransaktionWhereInput[]
    kontoId?: IntFilter<"Transaktion"> | number
    positionId?: IntNullableFilter<"Transaktion"> | number | null
    typ?: StringFilter<"Transaktion"> | string
    symbol?: StringFilter<"Transaktion"> | string
    quantity?: FloatNullableFilter<"Transaktion"> | number | null
    price?: FloatFilter<"Transaktion"> | number
    fees?: FloatNullableFilter<"Transaktion"> | number | null
    datum?: DateTimeFilter<"Transaktion"> | Date | string
    description?: StringNullableFilter<"Transaktion"> | string | null
    createdAt?: DateTimeFilter<"Transaktion"> | Date | string
    konto?: XOR<KontoRelationFilter, KontoWhereInput>
    position?: XOR<PositionNullableRelationFilter, PositionWhereInput> | null
  }, "id">

  export type TransaktionOrderByWithAggregationInput = {
    id?: SortOrder
    kontoId?: SortOrder
    positionId?: SortOrderInput | SortOrder
    typ?: SortOrder
    symbol?: SortOrder
    quantity?: SortOrderInput | SortOrder
    price?: SortOrder
    fees?: SortOrderInput | SortOrder
    datum?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TransaktionCountOrderByAggregateInput
    _avg?: TransaktionAvgOrderByAggregateInput
    _max?: TransaktionMaxOrderByAggregateInput
    _min?: TransaktionMinOrderByAggregateInput
    _sum?: TransaktionSumOrderByAggregateInput
  }

  export type TransaktionScalarWhereWithAggregatesInput = {
    AND?: TransaktionScalarWhereWithAggregatesInput | TransaktionScalarWhereWithAggregatesInput[]
    OR?: TransaktionScalarWhereWithAggregatesInput[]
    NOT?: TransaktionScalarWhereWithAggregatesInput | TransaktionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transaktion"> | number
    kontoId?: IntWithAggregatesFilter<"Transaktion"> | number
    positionId?: IntNullableWithAggregatesFilter<"Transaktion"> | number | null
    typ?: StringWithAggregatesFilter<"Transaktion"> | string
    symbol?: StringWithAggregatesFilter<"Transaktion"> | string
    quantity?: FloatNullableWithAggregatesFilter<"Transaktion"> | number | null
    price?: FloatWithAggregatesFilter<"Transaktion"> | number
    fees?: FloatNullableWithAggregatesFilter<"Transaktion"> | number | null
    datum?: DateTimeWithAggregatesFilter<"Transaktion"> | Date | string
    description?: StringNullableWithAggregatesFilter<"Transaktion"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Transaktion"> | Date | string
  }

  export type KiBewertungWhereInput = {
    AND?: KiBewertungWhereInput | KiBewertungWhereInput[]
    OR?: KiBewertungWhereInput[]
    NOT?: KiBewertungWhereInput | KiBewertungWhereInput[]
    id?: IntFilter<"KiBewertung"> | number
    aktienideeId?: IntFilter<"KiBewertung"> | number
    symbol?: StringFilter<"KiBewertung"> | string
    scoreFundamental?: FloatNullableFilter<"KiBewertung"> | number | null
    scoreTechnisch?: FloatNullableFilter<"KiBewertung"> | number | null
    scoreKombiniert?: FloatNullableFilter<"KiBewertung"> | number | null
    kommentar?: StringNullableFilter<"KiBewertung"> | string | null
    createdAt?: DateTimeFilter<"KiBewertung"> | Date | string
    aktienidee?: XOR<AktienideeRelationFilter, AktienideeWhereInput>
  }

  export type KiBewertungOrderByWithRelationInput = {
    id?: SortOrder
    aktienideeId?: SortOrder
    symbol?: SortOrder
    scoreFundamental?: SortOrderInput | SortOrder
    scoreTechnisch?: SortOrderInput | SortOrder
    scoreKombiniert?: SortOrderInput | SortOrder
    kommentar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    aktienidee?: AktienideeOrderByWithRelationInput
  }

  export type KiBewertungWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KiBewertungWhereInput | KiBewertungWhereInput[]
    OR?: KiBewertungWhereInput[]
    NOT?: KiBewertungWhereInput | KiBewertungWhereInput[]
    aktienideeId?: IntFilter<"KiBewertung"> | number
    symbol?: StringFilter<"KiBewertung"> | string
    scoreFundamental?: FloatNullableFilter<"KiBewertung"> | number | null
    scoreTechnisch?: FloatNullableFilter<"KiBewertung"> | number | null
    scoreKombiniert?: FloatNullableFilter<"KiBewertung"> | number | null
    kommentar?: StringNullableFilter<"KiBewertung"> | string | null
    createdAt?: DateTimeFilter<"KiBewertung"> | Date | string
    aktienidee?: XOR<AktienideeRelationFilter, AktienideeWhereInput>
  }, "id">

  export type KiBewertungOrderByWithAggregationInput = {
    id?: SortOrder
    aktienideeId?: SortOrder
    symbol?: SortOrder
    scoreFundamental?: SortOrderInput | SortOrder
    scoreTechnisch?: SortOrderInput | SortOrder
    scoreKombiniert?: SortOrderInput | SortOrder
    kommentar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: KiBewertungCountOrderByAggregateInput
    _avg?: KiBewertungAvgOrderByAggregateInput
    _max?: KiBewertungMaxOrderByAggregateInput
    _min?: KiBewertungMinOrderByAggregateInput
    _sum?: KiBewertungSumOrderByAggregateInput
  }

  export type KiBewertungScalarWhereWithAggregatesInput = {
    AND?: KiBewertungScalarWhereWithAggregatesInput | KiBewertungScalarWhereWithAggregatesInput[]
    OR?: KiBewertungScalarWhereWithAggregatesInput[]
    NOT?: KiBewertungScalarWhereWithAggregatesInput | KiBewertungScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KiBewertung"> | number
    aktienideeId?: IntWithAggregatesFilter<"KiBewertung"> | number
    symbol?: StringWithAggregatesFilter<"KiBewertung"> | string
    scoreFundamental?: FloatNullableWithAggregatesFilter<"KiBewertung"> | number | null
    scoreTechnisch?: FloatNullableWithAggregatesFilter<"KiBewertung"> | number | null
    scoreKombiniert?: FloatNullableWithAggregatesFilter<"KiBewertung"> | number | null
    kommentar?: StringNullableWithAggregatesFilter<"KiBewertung"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"KiBewertung"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    name?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    brokers?: BrokerCreateNestedManyWithoutUserInput
    aktienideen?: AktienideeCreateNestedManyWithoutUserInput
    alarme?: AlarmCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    brokers?: BrokerUncheckedCreateNestedManyWithoutUserInput
    aktienideen?: AktienideeUncheckedCreateNestedManyWithoutUserInput
    alarme?: AlarmUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brokers?: BrokerUpdateManyWithoutUserNestedInput
    aktienideen?: AktienideeUpdateManyWithoutUserNestedInput
    alarme?: AlarmUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brokers?: BrokerUncheckedUpdateManyWithoutUserNestedInput
    aktienideen?: AktienideeUncheckedUpdateManyWithoutUserNestedInput
    alarme?: AlarmUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrokerCreateInput = {
    name: string
    type: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBrokersInput
    konten?: KontoCreateNestedManyWithoutBrokerInput
  }

  export type BrokerUncheckedCreateInput = {
    id?: number
    name: string
    type: string
    notes?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    konten?: KontoUncheckedCreateNestedManyWithoutBrokerInput
  }

  export type BrokerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBrokersNestedInput
    konten?: KontoUpdateManyWithoutBrokerNestedInput
  }

  export type BrokerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    konten?: KontoUncheckedUpdateManyWithoutBrokerNestedInput
  }

  export type BrokerCreateManyInput = {
    id?: number
    name: string
    type: string
    notes?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrokerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrokerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KontoCreateInput = {
    name: string
    accountNumber?: string | null
    currency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    broker: BrokerCreateNestedOneWithoutKontenInput
    positionen?: PositionCreateNestedManyWithoutKontoInput
    transaktionen?: TransaktionCreateNestedManyWithoutKontoInput
  }

  export type KontoUncheckedCreateInput = {
    id?: number
    name: string
    accountNumber?: string | null
    currency?: string
    brokerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    positionen?: PositionUncheckedCreateNestedManyWithoutKontoInput
    transaktionen?: TransaktionUncheckedCreateNestedManyWithoutKontoInput
  }

  export type KontoUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broker?: BrokerUpdateOneRequiredWithoutKontenNestedInput
    positionen?: PositionUpdateManyWithoutKontoNestedInput
    transaktionen?: TransaktionUpdateManyWithoutKontoNestedInput
  }

  export type KontoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    brokerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    positionen?: PositionUncheckedUpdateManyWithoutKontoNestedInput
    transaktionen?: TransaktionUncheckedUpdateManyWithoutKontoNestedInput
  }

  export type KontoCreateManyInput = {
    id?: number
    name: string
    accountNumber?: string | null
    currency?: string
    brokerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KontoUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KontoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    brokerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionCreateInput = {
    assetType: string
    symbol: string
    name?: string | null
    quantity: number
    entryPrice: number
    currentPrice?: number | null
    entryDate: Date | string
    fees?: number | null
    leverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    konto: KontoCreateNestedOneWithoutPositionenInput
    transaktionen?: TransaktionCreateNestedManyWithoutPositionInput
  }

  export type PositionUncheckedCreateInput = {
    id?: number
    kontoId: number
    assetType: string
    symbol: string
    name?: string | null
    quantity: number
    entryPrice: number
    currentPrice?: number | null
    entryDate: Date | string
    fees?: number | null
    leverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    transaktionen?: TransaktionUncheckedCreateNestedManyWithoutPositionInput
  }

  export type PositionUpdateInput = {
    assetType?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    leverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    konto?: KontoUpdateOneRequiredWithoutPositionenNestedInput
    transaktionen?: TransaktionUpdateManyWithoutPositionNestedInput
  }

  export type PositionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    kontoId?: IntFieldUpdateOperationsInput | number
    assetType?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    leverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaktionen?: TransaktionUncheckedUpdateManyWithoutPositionNestedInput
  }

  export type PositionCreateManyInput = {
    id?: number
    kontoId: number
    assetType: string
    symbol: string
    name?: string | null
    quantity: number
    entryPrice: number
    currentPrice?: number | null
    entryDate: Date | string
    fees?: number | null
    leverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PositionUpdateManyMutationInput = {
    assetType?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    leverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PositionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    kontoId?: IntFieldUpdateOperationsInput | number
    assetType?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    leverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AktienideeCreateInput = {
    symbol: string
    name: string
    strategie: string
    branche?: string | null
    analyst?: string | null
    entryPrice?: number | null
    kursziel?: number | null
    reasoning?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAktienideenInput
    bewertungen?: KiBewertungCreateNestedManyWithoutAktienideeInput
  }

  export type AktienideeUncheckedCreateInput = {
    id?: number
    userId: number
    symbol: string
    name: string
    strategie: string
    branche?: string | null
    analyst?: string | null
    entryPrice?: number | null
    kursziel?: number | null
    reasoning?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bewertungen?: KiBewertungUncheckedCreateNestedManyWithoutAktienideeInput
  }

  export type AktienideeUpdateInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    strategie?: StringFieldUpdateOperationsInput | string
    branche?: NullableStringFieldUpdateOperationsInput | string | null
    analyst?: NullableStringFieldUpdateOperationsInput | string | null
    entryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    kursziel?: NullableFloatFieldUpdateOperationsInput | number | null
    reasoning?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAktienideenNestedInput
    bewertungen?: KiBewertungUpdateManyWithoutAktienideeNestedInput
  }

  export type AktienideeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    strategie?: StringFieldUpdateOperationsInput | string
    branche?: NullableStringFieldUpdateOperationsInput | string | null
    analyst?: NullableStringFieldUpdateOperationsInput | string | null
    entryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    kursziel?: NullableFloatFieldUpdateOperationsInput | number | null
    reasoning?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bewertungen?: KiBewertungUncheckedUpdateManyWithoutAktienideeNestedInput
  }

  export type AktienideeCreateManyInput = {
    id?: number
    userId: number
    symbol: string
    name: string
    strategie: string
    branche?: string | null
    analyst?: string | null
    entryPrice?: number | null
    kursziel?: number | null
    reasoning?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AktienideeUpdateManyMutationInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    strategie?: StringFieldUpdateOperationsInput | string
    branche?: NullableStringFieldUpdateOperationsInput | string | null
    analyst?: NullableStringFieldUpdateOperationsInput | string | null
    entryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    kursziel?: NullableFloatFieldUpdateOperationsInput | number | null
    reasoning?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AktienideeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    strategie?: StringFieldUpdateOperationsInput | string
    branche?: NullableStringFieldUpdateOperationsInput | string | null
    analyst?: NullableStringFieldUpdateOperationsInput | string | null
    entryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    kursziel?: NullableFloatFieldUpdateOperationsInput | number | null
    reasoning?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlarmCreateInput = {
    symbol: string
    name: string
    typ: string
    schwelle: number
    richtung: string
    status?: string
    channel?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ausgeloestAt?: Date | string | null
    user: UserCreateNestedOneWithoutAlarmeInput
  }

  export type AlarmUncheckedCreateInput = {
    id?: number
    userId: number
    symbol: string
    name: string
    typ: string
    schwelle: number
    richtung: string
    status?: string
    channel?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ausgeloestAt?: Date | string | null
  }

  export type AlarmUpdateInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typ?: StringFieldUpdateOperationsInput | string
    schwelle?: FloatFieldUpdateOperationsInput | number
    richtung?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ausgeloestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAlarmeNestedInput
  }

  export type AlarmUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typ?: StringFieldUpdateOperationsInput | string
    schwelle?: FloatFieldUpdateOperationsInput | number
    richtung?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ausgeloestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlarmCreateManyInput = {
    id?: number
    userId: number
    symbol: string
    name: string
    typ: string
    schwelle: number
    richtung: string
    status?: string
    channel?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ausgeloestAt?: Date | string | null
  }

  export type AlarmUpdateManyMutationInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typ?: StringFieldUpdateOperationsInput | string
    schwelle?: FloatFieldUpdateOperationsInput | number
    richtung?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ausgeloestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlarmUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typ?: StringFieldUpdateOperationsInput | string
    schwelle?: FloatFieldUpdateOperationsInput | number
    richtung?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ausgeloestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransaktionCreateInput = {
    typ: string
    symbol: string
    quantity?: number | null
    price: number
    fees?: number | null
    datum: Date | string
    description?: string | null
    createdAt?: Date | string
    konto: KontoCreateNestedOneWithoutTransaktionenInput
    position?: PositionCreateNestedOneWithoutTransaktionenInput
  }

  export type TransaktionUncheckedCreateInput = {
    id?: number
    kontoId: number
    positionId?: number | null
    typ: string
    symbol: string
    quantity?: number | null
    price: number
    fees?: number | null
    datum: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type TransaktionUpdateInput = {
    typ?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    konto?: KontoUpdateOneRequiredWithoutTransaktionenNestedInput
    position?: PositionUpdateOneWithoutTransaktionenNestedInput
  }

  export type TransaktionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    kontoId?: IntFieldUpdateOperationsInput | number
    positionId?: NullableIntFieldUpdateOperationsInput | number | null
    typ?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransaktionCreateManyInput = {
    id?: number
    kontoId: number
    positionId?: number | null
    typ: string
    symbol: string
    quantity?: number | null
    price: number
    fees?: number | null
    datum: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type TransaktionUpdateManyMutationInput = {
    typ?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransaktionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    kontoId?: IntFieldUpdateOperationsInput | number
    positionId?: NullableIntFieldUpdateOperationsInput | number | null
    typ?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KiBewertungCreateInput = {
    symbol: string
    scoreFundamental?: number | null
    scoreTechnisch?: number | null
    scoreKombiniert?: number | null
    kommentar?: string | null
    createdAt?: Date | string
    aktienidee: AktienideeCreateNestedOneWithoutBewertungenInput
  }

  export type KiBewertungUncheckedCreateInput = {
    id?: number
    aktienideeId: number
    symbol: string
    scoreFundamental?: number | null
    scoreTechnisch?: number | null
    scoreKombiniert?: number | null
    kommentar?: string | null
    createdAt?: Date | string
  }

  export type KiBewertungUpdateInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    scoreFundamental?: NullableFloatFieldUpdateOperationsInput | number | null
    scoreTechnisch?: NullableFloatFieldUpdateOperationsInput | number | null
    scoreKombiniert?: NullableFloatFieldUpdateOperationsInput | number | null
    kommentar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aktienidee?: AktienideeUpdateOneRequiredWithoutBewertungenNestedInput
  }

  export type KiBewertungUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    aktienideeId?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    scoreFundamental?: NullableFloatFieldUpdateOperationsInput | number | null
    scoreTechnisch?: NullableFloatFieldUpdateOperationsInput | number | null
    scoreKombiniert?: NullableFloatFieldUpdateOperationsInput | number | null
    kommentar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KiBewertungCreateManyInput = {
    id?: number
    aktienideeId: number
    symbol: string
    scoreFundamental?: number | null
    scoreTechnisch?: number | null
    scoreKombiniert?: number | null
    kommentar?: string | null
    createdAt?: Date | string
  }

  export type KiBewertungUpdateManyMutationInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    scoreFundamental?: NullableFloatFieldUpdateOperationsInput | number | null
    scoreTechnisch?: NullableFloatFieldUpdateOperationsInput | number | null
    scoreKombiniert?: NullableFloatFieldUpdateOperationsInput | number | null
    kommentar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KiBewertungUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    aktienideeId?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    scoreFundamental?: NullableFloatFieldUpdateOperationsInput | number | null
    scoreTechnisch?: NullableFloatFieldUpdateOperationsInput | number | null
    scoreKombiniert?: NullableFloatFieldUpdateOperationsInput | number | null
    kommentar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BrokerListRelationFilter = {
    every?: BrokerWhereInput
    some?: BrokerWhereInput
    none?: BrokerWhereInput
  }

  export type AktienideeListRelationFilter = {
    every?: AktienideeWhereInput
    some?: AktienideeWhereInput
    none?: AktienideeWhereInput
  }

  export type AlarmListRelationFilter = {
    every?: AlarmWhereInput
    some?: AlarmWhereInput
    none?: AlarmWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BrokerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AktienideeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlarmOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type KontoListRelationFilter = {
    every?: KontoWhereInput
    some?: KontoWhereInput
    none?: KontoWhereInput
  }

  export type KontoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BrokerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BrokerAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BrokerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BrokerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BrokerSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BrokerRelationFilter = {
    is?: BrokerWhereInput
    isNot?: BrokerWhereInput
  }

  export type PositionListRelationFilter = {
    every?: PositionWhereInput
    some?: PositionWhereInput
    none?: PositionWhereInput
  }

  export type TransaktionListRelationFilter = {
    every?: TransaktionWhereInput
    some?: TransaktionWhereInput
    none?: TransaktionWhereInput
  }

  export type PositionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransaktionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KontoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    accountNumber?: SortOrder
    currency?: SortOrder
    brokerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KontoAvgOrderByAggregateInput = {
    id?: SortOrder
    brokerId?: SortOrder
  }

  export type KontoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    accountNumber?: SortOrder
    currency?: SortOrder
    brokerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KontoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    accountNumber?: SortOrder
    currency?: SortOrder
    brokerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KontoSumOrderByAggregateInput = {
    id?: SortOrder
    brokerId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type KontoRelationFilter = {
    is?: KontoWhereInput
    isNot?: KontoWhereInput
  }

  export type PositionCountOrderByAggregateInput = {
    id?: SortOrder
    kontoId?: SortOrder
    assetType?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    entryPrice?: SortOrder
    currentPrice?: SortOrder
    entryDate?: SortOrder
    fees?: SortOrder
    leverage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PositionAvgOrderByAggregateInput = {
    id?: SortOrder
    kontoId?: SortOrder
    quantity?: SortOrder
    entryPrice?: SortOrder
    currentPrice?: SortOrder
    fees?: SortOrder
    leverage?: SortOrder
  }

  export type PositionMaxOrderByAggregateInput = {
    id?: SortOrder
    kontoId?: SortOrder
    assetType?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    entryPrice?: SortOrder
    currentPrice?: SortOrder
    entryDate?: SortOrder
    fees?: SortOrder
    leverage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PositionMinOrderByAggregateInput = {
    id?: SortOrder
    kontoId?: SortOrder
    assetType?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    entryPrice?: SortOrder
    currentPrice?: SortOrder
    entryDate?: SortOrder
    fees?: SortOrder
    leverage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PositionSumOrderByAggregateInput = {
    id?: SortOrder
    kontoId?: SortOrder
    quantity?: SortOrder
    entryPrice?: SortOrder
    currentPrice?: SortOrder
    fees?: SortOrder
    leverage?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type KiBewertungListRelationFilter = {
    every?: KiBewertungWhereInput
    some?: KiBewertungWhereInput
    none?: KiBewertungWhereInput
  }

  export type KiBewertungOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AktienideeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    strategie?: SortOrder
    branche?: SortOrder
    analyst?: SortOrder
    entryPrice?: SortOrder
    kursziel?: SortOrder
    reasoning?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AktienideeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    entryPrice?: SortOrder
    kursziel?: SortOrder
  }

  export type AktienideeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    strategie?: SortOrder
    branche?: SortOrder
    analyst?: SortOrder
    entryPrice?: SortOrder
    kursziel?: SortOrder
    reasoning?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AktienideeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    strategie?: SortOrder
    branche?: SortOrder
    analyst?: SortOrder
    entryPrice?: SortOrder
    kursziel?: SortOrder
    reasoning?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AktienideeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    entryPrice?: SortOrder
    kursziel?: SortOrder
  }

  export type AlarmCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    typ?: SortOrder
    schwelle?: SortOrder
    richtung?: SortOrder
    status?: SortOrder
    channel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ausgeloestAt?: SortOrder
  }

  export type AlarmAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    schwelle?: SortOrder
  }

  export type AlarmMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    typ?: SortOrder
    schwelle?: SortOrder
    richtung?: SortOrder
    status?: SortOrder
    channel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ausgeloestAt?: SortOrder
  }

  export type AlarmMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    typ?: SortOrder
    schwelle?: SortOrder
    richtung?: SortOrder
    status?: SortOrder
    channel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ausgeloestAt?: SortOrder
  }

  export type AlarmSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    schwelle?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PositionNullableRelationFilter = {
    is?: PositionWhereInput | null
    isNot?: PositionWhereInput | null
  }

  export type TransaktionCountOrderByAggregateInput = {
    id?: SortOrder
    kontoId?: SortOrder
    positionId?: SortOrder
    typ?: SortOrder
    symbol?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    fees?: SortOrder
    datum?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type TransaktionAvgOrderByAggregateInput = {
    id?: SortOrder
    kontoId?: SortOrder
    positionId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    fees?: SortOrder
  }

  export type TransaktionMaxOrderByAggregateInput = {
    id?: SortOrder
    kontoId?: SortOrder
    positionId?: SortOrder
    typ?: SortOrder
    symbol?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    fees?: SortOrder
    datum?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type TransaktionMinOrderByAggregateInput = {
    id?: SortOrder
    kontoId?: SortOrder
    positionId?: SortOrder
    typ?: SortOrder
    symbol?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    fees?: SortOrder
    datum?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type TransaktionSumOrderByAggregateInput = {
    id?: SortOrder
    kontoId?: SortOrder
    positionId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    fees?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type AktienideeRelationFilter = {
    is?: AktienideeWhereInput
    isNot?: AktienideeWhereInput
  }

  export type KiBewertungCountOrderByAggregateInput = {
    id?: SortOrder
    aktienideeId?: SortOrder
    symbol?: SortOrder
    scoreFundamental?: SortOrder
    scoreTechnisch?: SortOrder
    scoreKombiniert?: SortOrder
    kommentar?: SortOrder
    createdAt?: SortOrder
  }

  export type KiBewertungAvgOrderByAggregateInput = {
    id?: SortOrder
    aktienideeId?: SortOrder
    scoreFundamental?: SortOrder
    scoreTechnisch?: SortOrder
    scoreKombiniert?: SortOrder
  }

  export type KiBewertungMaxOrderByAggregateInput = {
    id?: SortOrder
    aktienideeId?: SortOrder
    symbol?: SortOrder
    scoreFundamental?: SortOrder
    scoreTechnisch?: SortOrder
    scoreKombiniert?: SortOrder
    kommentar?: SortOrder
    createdAt?: SortOrder
  }

  export type KiBewertungMinOrderByAggregateInput = {
    id?: SortOrder
    aktienideeId?: SortOrder
    symbol?: SortOrder
    scoreFundamental?: SortOrder
    scoreTechnisch?: SortOrder
    scoreKombiniert?: SortOrder
    kommentar?: SortOrder
    createdAt?: SortOrder
  }

  export type KiBewertungSumOrderByAggregateInput = {
    id?: SortOrder
    aktienideeId?: SortOrder
    scoreFundamental?: SortOrder
    scoreTechnisch?: SortOrder
    scoreKombiniert?: SortOrder
  }

  export type BrokerCreateNestedManyWithoutUserInput = {
    create?: XOR<BrokerCreateWithoutUserInput, BrokerUncheckedCreateWithoutUserInput> | BrokerCreateWithoutUserInput[] | BrokerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BrokerCreateOrConnectWithoutUserInput | BrokerCreateOrConnectWithoutUserInput[]
    createMany?: BrokerCreateManyUserInputEnvelope
    connect?: BrokerWhereUniqueInput | BrokerWhereUniqueInput[]
  }

  export type AktienideeCreateNestedManyWithoutUserInput = {
    create?: XOR<AktienideeCreateWithoutUserInput, AktienideeUncheckedCreateWithoutUserInput> | AktienideeCreateWithoutUserInput[] | AktienideeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AktienideeCreateOrConnectWithoutUserInput | AktienideeCreateOrConnectWithoutUserInput[]
    createMany?: AktienideeCreateManyUserInputEnvelope
    connect?: AktienideeWhereUniqueInput | AktienideeWhereUniqueInput[]
  }

  export type AlarmCreateNestedManyWithoutUserInput = {
    create?: XOR<AlarmCreateWithoutUserInput, AlarmUncheckedCreateWithoutUserInput> | AlarmCreateWithoutUserInput[] | AlarmUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlarmCreateOrConnectWithoutUserInput | AlarmCreateOrConnectWithoutUserInput[]
    createMany?: AlarmCreateManyUserInputEnvelope
    connect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
  }

  export type BrokerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BrokerCreateWithoutUserInput, BrokerUncheckedCreateWithoutUserInput> | BrokerCreateWithoutUserInput[] | BrokerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BrokerCreateOrConnectWithoutUserInput | BrokerCreateOrConnectWithoutUserInput[]
    createMany?: BrokerCreateManyUserInputEnvelope
    connect?: BrokerWhereUniqueInput | BrokerWhereUniqueInput[]
  }

  export type AktienideeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AktienideeCreateWithoutUserInput, AktienideeUncheckedCreateWithoutUserInput> | AktienideeCreateWithoutUserInput[] | AktienideeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AktienideeCreateOrConnectWithoutUserInput | AktienideeCreateOrConnectWithoutUserInput[]
    createMany?: AktienideeCreateManyUserInputEnvelope
    connect?: AktienideeWhereUniqueInput | AktienideeWhereUniqueInput[]
  }

  export type AlarmUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AlarmCreateWithoutUserInput, AlarmUncheckedCreateWithoutUserInput> | AlarmCreateWithoutUserInput[] | AlarmUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlarmCreateOrConnectWithoutUserInput | AlarmCreateOrConnectWithoutUserInput[]
    createMany?: AlarmCreateManyUserInputEnvelope
    connect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BrokerUpdateManyWithoutUserNestedInput = {
    create?: XOR<BrokerCreateWithoutUserInput, BrokerUncheckedCreateWithoutUserInput> | BrokerCreateWithoutUserInput[] | BrokerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BrokerCreateOrConnectWithoutUserInput | BrokerCreateOrConnectWithoutUserInput[]
    upsert?: BrokerUpsertWithWhereUniqueWithoutUserInput | BrokerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BrokerCreateManyUserInputEnvelope
    set?: BrokerWhereUniqueInput | BrokerWhereUniqueInput[]
    disconnect?: BrokerWhereUniqueInput | BrokerWhereUniqueInput[]
    delete?: BrokerWhereUniqueInput | BrokerWhereUniqueInput[]
    connect?: BrokerWhereUniqueInput | BrokerWhereUniqueInput[]
    update?: BrokerUpdateWithWhereUniqueWithoutUserInput | BrokerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BrokerUpdateManyWithWhereWithoutUserInput | BrokerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BrokerScalarWhereInput | BrokerScalarWhereInput[]
  }

  export type AktienideeUpdateManyWithoutUserNestedInput = {
    create?: XOR<AktienideeCreateWithoutUserInput, AktienideeUncheckedCreateWithoutUserInput> | AktienideeCreateWithoutUserInput[] | AktienideeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AktienideeCreateOrConnectWithoutUserInput | AktienideeCreateOrConnectWithoutUserInput[]
    upsert?: AktienideeUpsertWithWhereUniqueWithoutUserInput | AktienideeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AktienideeCreateManyUserInputEnvelope
    set?: AktienideeWhereUniqueInput | AktienideeWhereUniqueInput[]
    disconnect?: AktienideeWhereUniqueInput | AktienideeWhereUniqueInput[]
    delete?: AktienideeWhereUniqueInput | AktienideeWhereUniqueInput[]
    connect?: AktienideeWhereUniqueInput | AktienideeWhereUniqueInput[]
    update?: AktienideeUpdateWithWhereUniqueWithoutUserInput | AktienideeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AktienideeUpdateManyWithWhereWithoutUserInput | AktienideeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AktienideeScalarWhereInput | AktienideeScalarWhereInput[]
  }

  export type AlarmUpdateManyWithoutUserNestedInput = {
    create?: XOR<AlarmCreateWithoutUserInput, AlarmUncheckedCreateWithoutUserInput> | AlarmCreateWithoutUserInput[] | AlarmUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlarmCreateOrConnectWithoutUserInput | AlarmCreateOrConnectWithoutUserInput[]
    upsert?: AlarmUpsertWithWhereUniqueWithoutUserInput | AlarmUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AlarmCreateManyUserInputEnvelope
    set?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    disconnect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    delete?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    connect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    update?: AlarmUpdateWithWhereUniqueWithoutUserInput | AlarmUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AlarmUpdateManyWithWhereWithoutUserInput | AlarmUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AlarmScalarWhereInput | AlarmScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BrokerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BrokerCreateWithoutUserInput, BrokerUncheckedCreateWithoutUserInput> | BrokerCreateWithoutUserInput[] | BrokerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BrokerCreateOrConnectWithoutUserInput | BrokerCreateOrConnectWithoutUserInput[]
    upsert?: BrokerUpsertWithWhereUniqueWithoutUserInput | BrokerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BrokerCreateManyUserInputEnvelope
    set?: BrokerWhereUniqueInput | BrokerWhereUniqueInput[]
    disconnect?: BrokerWhereUniqueInput | BrokerWhereUniqueInput[]
    delete?: BrokerWhereUniqueInput | BrokerWhereUniqueInput[]
    connect?: BrokerWhereUniqueInput | BrokerWhereUniqueInput[]
    update?: BrokerUpdateWithWhereUniqueWithoutUserInput | BrokerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BrokerUpdateManyWithWhereWithoutUserInput | BrokerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BrokerScalarWhereInput | BrokerScalarWhereInput[]
  }

  export type AktienideeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AktienideeCreateWithoutUserInput, AktienideeUncheckedCreateWithoutUserInput> | AktienideeCreateWithoutUserInput[] | AktienideeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AktienideeCreateOrConnectWithoutUserInput | AktienideeCreateOrConnectWithoutUserInput[]
    upsert?: AktienideeUpsertWithWhereUniqueWithoutUserInput | AktienideeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AktienideeCreateManyUserInputEnvelope
    set?: AktienideeWhereUniqueInput | AktienideeWhereUniqueInput[]
    disconnect?: AktienideeWhereUniqueInput | AktienideeWhereUniqueInput[]
    delete?: AktienideeWhereUniqueInput | AktienideeWhereUniqueInput[]
    connect?: AktienideeWhereUniqueInput | AktienideeWhereUniqueInput[]
    update?: AktienideeUpdateWithWhereUniqueWithoutUserInput | AktienideeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AktienideeUpdateManyWithWhereWithoutUserInput | AktienideeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AktienideeScalarWhereInput | AktienideeScalarWhereInput[]
  }

  export type AlarmUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AlarmCreateWithoutUserInput, AlarmUncheckedCreateWithoutUserInput> | AlarmCreateWithoutUserInput[] | AlarmUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlarmCreateOrConnectWithoutUserInput | AlarmCreateOrConnectWithoutUserInput[]
    upsert?: AlarmUpsertWithWhereUniqueWithoutUserInput | AlarmUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AlarmCreateManyUserInputEnvelope
    set?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    disconnect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    delete?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    connect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    update?: AlarmUpdateWithWhereUniqueWithoutUserInput | AlarmUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AlarmUpdateManyWithWhereWithoutUserInput | AlarmUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AlarmScalarWhereInput | AlarmScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBrokersInput = {
    create?: XOR<UserCreateWithoutBrokersInput, UserUncheckedCreateWithoutBrokersInput>
    connectOrCreate?: UserCreateOrConnectWithoutBrokersInput
    connect?: UserWhereUniqueInput
  }

  export type KontoCreateNestedManyWithoutBrokerInput = {
    create?: XOR<KontoCreateWithoutBrokerInput, KontoUncheckedCreateWithoutBrokerInput> | KontoCreateWithoutBrokerInput[] | KontoUncheckedCreateWithoutBrokerInput[]
    connectOrCreate?: KontoCreateOrConnectWithoutBrokerInput | KontoCreateOrConnectWithoutBrokerInput[]
    createMany?: KontoCreateManyBrokerInputEnvelope
    connect?: KontoWhereUniqueInput | KontoWhereUniqueInput[]
  }

  export type KontoUncheckedCreateNestedManyWithoutBrokerInput = {
    create?: XOR<KontoCreateWithoutBrokerInput, KontoUncheckedCreateWithoutBrokerInput> | KontoCreateWithoutBrokerInput[] | KontoUncheckedCreateWithoutBrokerInput[]
    connectOrCreate?: KontoCreateOrConnectWithoutBrokerInput | KontoCreateOrConnectWithoutBrokerInput[]
    createMany?: KontoCreateManyBrokerInputEnvelope
    connect?: KontoWhereUniqueInput | KontoWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutBrokersNestedInput = {
    create?: XOR<UserCreateWithoutBrokersInput, UserUncheckedCreateWithoutBrokersInput>
    connectOrCreate?: UserCreateOrConnectWithoutBrokersInput
    upsert?: UserUpsertWithoutBrokersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBrokersInput, UserUpdateWithoutBrokersInput>, UserUncheckedUpdateWithoutBrokersInput>
  }

  export type KontoUpdateManyWithoutBrokerNestedInput = {
    create?: XOR<KontoCreateWithoutBrokerInput, KontoUncheckedCreateWithoutBrokerInput> | KontoCreateWithoutBrokerInput[] | KontoUncheckedCreateWithoutBrokerInput[]
    connectOrCreate?: KontoCreateOrConnectWithoutBrokerInput | KontoCreateOrConnectWithoutBrokerInput[]
    upsert?: KontoUpsertWithWhereUniqueWithoutBrokerInput | KontoUpsertWithWhereUniqueWithoutBrokerInput[]
    createMany?: KontoCreateManyBrokerInputEnvelope
    set?: KontoWhereUniqueInput | KontoWhereUniqueInput[]
    disconnect?: KontoWhereUniqueInput | KontoWhereUniqueInput[]
    delete?: KontoWhereUniqueInput | KontoWhereUniqueInput[]
    connect?: KontoWhereUniqueInput | KontoWhereUniqueInput[]
    update?: KontoUpdateWithWhereUniqueWithoutBrokerInput | KontoUpdateWithWhereUniqueWithoutBrokerInput[]
    updateMany?: KontoUpdateManyWithWhereWithoutBrokerInput | KontoUpdateManyWithWhereWithoutBrokerInput[]
    deleteMany?: KontoScalarWhereInput | KontoScalarWhereInput[]
  }

  export type KontoUncheckedUpdateManyWithoutBrokerNestedInput = {
    create?: XOR<KontoCreateWithoutBrokerInput, KontoUncheckedCreateWithoutBrokerInput> | KontoCreateWithoutBrokerInput[] | KontoUncheckedCreateWithoutBrokerInput[]
    connectOrCreate?: KontoCreateOrConnectWithoutBrokerInput | KontoCreateOrConnectWithoutBrokerInput[]
    upsert?: KontoUpsertWithWhereUniqueWithoutBrokerInput | KontoUpsertWithWhereUniqueWithoutBrokerInput[]
    createMany?: KontoCreateManyBrokerInputEnvelope
    set?: KontoWhereUniqueInput | KontoWhereUniqueInput[]
    disconnect?: KontoWhereUniqueInput | KontoWhereUniqueInput[]
    delete?: KontoWhereUniqueInput | KontoWhereUniqueInput[]
    connect?: KontoWhereUniqueInput | KontoWhereUniqueInput[]
    update?: KontoUpdateWithWhereUniqueWithoutBrokerInput | KontoUpdateWithWhereUniqueWithoutBrokerInput[]
    updateMany?: KontoUpdateManyWithWhereWithoutBrokerInput | KontoUpdateManyWithWhereWithoutBrokerInput[]
    deleteMany?: KontoScalarWhereInput | KontoScalarWhereInput[]
  }

  export type BrokerCreateNestedOneWithoutKontenInput = {
    create?: XOR<BrokerCreateWithoutKontenInput, BrokerUncheckedCreateWithoutKontenInput>
    connectOrCreate?: BrokerCreateOrConnectWithoutKontenInput
    connect?: BrokerWhereUniqueInput
  }

  export type PositionCreateNestedManyWithoutKontoInput = {
    create?: XOR<PositionCreateWithoutKontoInput, PositionUncheckedCreateWithoutKontoInput> | PositionCreateWithoutKontoInput[] | PositionUncheckedCreateWithoutKontoInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutKontoInput | PositionCreateOrConnectWithoutKontoInput[]
    createMany?: PositionCreateManyKontoInputEnvelope
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
  }

  export type TransaktionCreateNestedManyWithoutKontoInput = {
    create?: XOR<TransaktionCreateWithoutKontoInput, TransaktionUncheckedCreateWithoutKontoInput> | TransaktionCreateWithoutKontoInput[] | TransaktionUncheckedCreateWithoutKontoInput[]
    connectOrCreate?: TransaktionCreateOrConnectWithoutKontoInput | TransaktionCreateOrConnectWithoutKontoInput[]
    createMany?: TransaktionCreateManyKontoInputEnvelope
    connect?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
  }

  export type PositionUncheckedCreateNestedManyWithoutKontoInput = {
    create?: XOR<PositionCreateWithoutKontoInput, PositionUncheckedCreateWithoutKontoInput> | PositionCreateWithoutKontoInput[] | PositionUncheckedCreateWithoutKontoInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutKontoInput | PositionCreateOrConnectWithoutKontoInput[]
    createMany?: PositionCreateManyKontoInputEnvelope
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
  }

  export type TransaktionUncheckedCreateNestedManyWithoutKontoInput = {
    create?: XOR<TransaktionCreateWithoutKontoInput, TransaktionUncheckedCreateWithoutKontoInput> | TransaktionCreateWithoutKontoInput[] | TransaktionUncheckedCreateWithoutKontoInput[]
    connectOrCreate?: TransaktionCreateOrConnectWithoutKontoInput | TransaktionCreateOrConnectWithoutKontoInput[]
    createMany?: TransaktionCreateManyKontoInputEnvelope
    connect?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
  }

  export type BrokerUpdateOneRequiredWithoutKontenNestedInput = {
    create?: XOR<BrokerCreateWithoutKontenInput, BrokerUncheckedCreateWithoutKontenInput>
    connectOrCreate?: BrokerCreateOrConnectWithoutKontenInput
    upsert?: BrokerUpsertWithoutKontenInput
    connect?: BrokerWhereUniqueInput
    update?: XOR<XOR<BrokerUpdateToOneWithWhereWithoutKontenInput, BrokerUpdateWithoutKontenInput>, BrokerUncheckedUpdateWithoutKontenInput>
  }

  export type PositionUpdateManyWithoutKontoNestedInput = {
    create?: XOR<PositionCreateWithoutKontoInput, PositionUncheckedCreateWithoutKontoInput> | PositionCreateWithoutKontoInput[] | PositionUncheckedCreateWithoutKontoInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutKontoInput | PositionCreateOrConnectWithoutKontoInput[]
    upsert?: PositionUpsertWithWhereUniqueWithoutKontoInput | PositionUpsertWithWhereUniqueWithoutKontoInput[]
    createMany?: PositionCreateManyKontoInputEnvelope
    set?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    disconnect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    delete?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    update?: PositionUpdateWithWhereUniqueWithoutKontoInput | PositionUpdateWithWhereUniqueWithoutKontoInput[]
    updateMany?: PositionUpdateManyWithWhereWithoutKontoInput | PositionUpdateManyWithWhereWithoutKontoInput[]
    deleteMany?: PositionScalarWhereInput | PositionScalarWhereInput[]
  }

  export type TransaktionUpdateManyWithoutKontoNestedInput = {
    create?: XOR<TransaktionCreateWithoutKontoInput, TransaktionUncheckedCreateWithoutKontoInput> | TransaktionCreateWithoutKontoInput[] | TransaktionUncheckedCreateWithoutKontoInput[]
    connectOrCreate?: TransaktionCreateOrConnectWithoutKontoInput | TransaktionCreateOrConnectWithoutKontoInput[]
    upsert?: TransaktionUpsertWithWhereUniqueWithoutKontoInput | TransaktionUpsertWithWhereUniqueWithoutKontoInput[]
    createMany?: TransaktionCreateManyKontoInputEnvelope
    set?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    disconnect?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    delete?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    connect?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    update?: TransaktionUpdateWithWhereUniqueWithoutKontoInput | TransaktionUpdateWithWhereUniqueWithoutKontoInput[]
    updateMany?: TransaktionUpdateManyWithWhereWithoutKontoInput | TransaktionUpdateManyWithWhereWithoutKontoInput[]
    deleteMany?: TransaktionScalarWhereInput | TransaktionScalarWhereInput[]
  }

  export type PositionUncheckedUpdateManyWithoutKontoNestedInput = {
    create?: XOR<PositionCreateWithoutKontoInput, PositionUncheckedCreateWithoutKontoInput> | PositionCreateWithoutKontoInput[] | PositionUncheckedCreateWithoutKontoInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutKontoInput | PositionCreateOrConnectWithoutKontoInput[]
    upsert?: PositionUpsertWithWhereUniqueWithoutKontoInput | PositionUpsertWithWhereUniqueWithoutKontoInput[]
    createMany?: PositionCreateManyKontoInputEnvelope
    set?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    disconnect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    delete?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    update?: PositionUpdateWithWhereUniqueWithoutKontoInput | PositionUpdateWithWhereUniqueWithoutKontoInput[]
    updateMany?: PositionUpdateManyWithWhereWithoutKontoInput | PositionUpdateManyWithWhereWithoutKontoInput[]
    deleteMany?: PositionScalarWhereInput | PositionScalarWhereInput[]
  }

  export type TransaktionUncheckedUpdateManyWithoutKontoNestedInput = {
    create?: XOR<TransaktionCreateWithoutKontoInput, TransaktionUncheckedCreateWithoutKontoInput> | TransaktionCreateWithoutKontoInput[] | TransaktionUncheckedCreateWithoutKontoInput[]
    connectOrCreate?: TransaktionCreateOrConnectWithoutKontoInput | TransaktionCreateOrConnectWithoutKontoInput[]
    upsert?: TransaktionUpsertWithWhereUniqueWithoutKontoInput | TransaktionUpsertWithWhereUniqueWithoutKontoInput[]
    createMany?: TransaktionCreateManyKontoInputEnvelope
    set?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    disconnect?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    delete?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    connect?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    update?: TransaktionUpdateWithWhereUniqueWithoutKontoInput | TransaktionUpdateWithWhereUniqueWithoutKontoInput[]
    updateMany?: TransaktionUpdateManyWithWhereWithoutKontoInput | TransaktionUpdateManyWithWhereWithoutKontoInput[]
    deleteMany?: TransaktionScalarWhereInput | TransaktionScalarWhereInput[]
  }

  export type KontoCreateNestedOneWithoutPositionenInput = {
    create?: XOR<KontoCreateWithoutPositionenInput, KontoUncheckedCreateWithoutPositionenInput>
    connectOrCreate?: KontoCreateOrConnectWithoutPositionenInput
    connect?: KontoWhereUniqueInput
  }

  export type TransaktionCreateNestedManyWithoutPositionInput = {
    create?: XOR<TransaktionCreateWithoutPositionInput, TransaktionUncheckedCreateWithoutPositionInput> | TransaktionCreateWithoutPositionInput[] | TransaktionUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: TransaktionCreateOrConnectWithoutPositionInput | TransaktionCreateOrConnectWithoutPositionInput[]
    createMany?: TransaktionCreateManyPositionInputEnvelope
    connect?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
  }

  export type TransaktionUncheckedCreateNestedManyWithoutPositionInput = {
    create?: XOR<TransaktionCreateWithoutPositionInput, TransaktionUncheckedCreateWithoutPositionInput> | TransaktionCreateWithoutPositionInput[] | TransaktionUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: TransaktionCreateOrConnectWithoutPositionInput | TransaktionCreateOrConnectWithoutPositionInput[]
    createMany?: TransaktionCreateManyPositionInputEnvelope
    connect?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type KontoUpdateOneRequiredWithoutPositionenNestedInput = {
    create?: XOR<KontoCreateWithoutPositionenInput, KontoUncheckedCreateWithoutPositionenInput>
    connectOrCreate?: KontoCreateOrConnectWithoutPositionenInput
    upsert?: KontoUpsertWithoutPositionenInput
    connect?: KontoWhereUniqueInput
    update?: XOR<XOR<KontoUpdateToOneWithWhereWithoutPositionenInput, KontoUpdateWithoutPositionenInput>, KontoUncheckedUpdateWithoutPositionenInput>
  }

  export type TransaktionUpdateManyWithoutPositionNestedInput = {
    create?: XOR<TransaktionCreateWithoutPositionInput, TransaktionUncheckedCreateWithoutPositionInput> | TransaktionCreateWithoutPositionInput[] | TransaktionUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: TransaktionCreateOrConnectWithoutPositionInput | TransaktionCreateOrConnectWithoutPositionInput[]
    upsert?: TransaktionUpsertWithWhereUniqueWithoutPositionInput | TransaktionUpsertWithWhereUniqueWithoutPositionInput[]
    createMany?: TransaktionCreateManyPositionInputEnvelope
    set?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    disconnect?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    delete?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    connect?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    update?: TransaktionUpdateWithWhereUniqueWithoutPositionInput | TransaktionUpdateWithWhereUniqueWithoutPositionInput[]
    updateMany?: TransaktionUpdateManyWithWhereWithoutPositionInput | TransaktionUpdateManyWithWhereWithoutPositionInput[]
    deleteMany?: TransaktionScalarWhereInput | TransaktionScalarWhereInput[]
  }

  export type TransaktionUncheckedUpdateManyWithoutPositionNestedInput = {
    create?: XOR<TransaktionCreateWithoutPositionInput, TransaktionUncheckedCreateWithoutPositionInput> | TransaktionCreateWithoutPositionInput[] | TransaktionUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: TransaktionCreateOrConnectWithoutPositionInput | TransaktionCreateOrConnectWithoutPositionInput[]
    upsert?: TransaktionUpsertWithWhereUniqueWithoutPositionInput | TransaktionUpsertWithWhereUniqueWithoutPositionInput[]
    createMany?: TransaktionCreateManyPositionInputEnvelope
    set?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    disconnect?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    delete?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    connect?: TransaktionWhereUniqueInput | TransaktionWhereUniqueInput[]
    update?: TransaktionUpdateWithWhereUniqueWithoutPositionInput | TransaktionUpdateWithWhereUniqueWithoutPositionInput[]
    updateMany?: TransaktionUpdateManyWithWhereWithoutPositionInput | TransaktionUpdateManyWithWhereWithoutPositionInput[]
    deleteMany?: TransaktionScalarWhereInput | TransaktionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAktienideenInput = {
    create?: XOR<UserCreateWithoutAktienideenInput, UserUncheckedCreateWithoutAktienideenInput>
    connectOrCreate?: UserCreateOrConnectWithoutAktienideenInput
    connect?: UserWhereUniqueInput
  }

  export type KiBewertungCreateNestedManyWithoutAktienideeInput = {
    create?: XOR<KiBewertungCreateWithoutAktienideeInput, KiBewertungUncheckedCreateWithoutAktienideeInput> | KiBewertungCreateWithoutAktienideeInput[] | KiBewertungUncheckedCreateWithoutAktienideeInput[]
    connectOrCreate?: KiBewertungCreateOrConnectWithoutAktienideeInput | KiBewertungCreateOrConnectWithoutAktienideeInput[]
    createMany?: KiBewertungCreateManyAktienideeInputEnvelope
    connect?: KiBewertungWhereUniqueInput | KiBewertungWhereUniqueInput[]
  }

  export type KiBewertungUncheckedCreateNestedManyWithoutAktienideeInput = {
    create?: XOR<KiBewertungCreateWithoutAktienideeInput, KiBewertungUncheckedCreateWithoutAktienideeInput> | KiBewertungCreateWithoutAktienideeInput[] | KiBewertungUncheckedCreateWithoutAktienideeInput[]
    connectOrCreate?: KiBewertungCreateOrConnectWithoutAktienideeInput | KiBewertungCreateOrConnectWithoutAktienideeInput[]
    createMany?: KiBewertungCreateManyAktienideeInputEnvelope
    connect?: KiBewertungWhereUniqueInput | KiBewertungWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutAktienideenNestedInput = {
    create?: XOR<UserCreateWithoutAktienideenInput, UserUncheckedCreateWithoutAktienideenInput>
    connectOrCreate?: UserCreateOrConnectWithoutAktienideenInput
    upsert?: UserUpsertWithoutAktienideenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAktienideenInput, UserUpdateWithoutAktienideenInput>, UserUncheckedUpdateWithoutAktienideenInput>
  }

  export type KiBewertungUpdateManyWithoutAktienideeNestedInput = {
    create?: XOR<KiBewertungCreateWithoutAktienideeInput, KiBewertungUncheckedCreateWithoutAktienideeInput> | KiBewertungCreateWithoutAktienideeInput[] | KiBewertungUncheckedCreateWithoutAktienideeInput[]
    connectOrCreate?: KiBewertungCreateOrConnectWithoutAktienideeInput | KiBewertungCreateOrConnectWithoutAktienideeInput[]
    upsert?: KiBewertungUpsertWithWhereUniqueWithoutAktienideeInput | KiBewertungUpsertWithWhereUniqueWithoutAktienideeInput[]
    createMany?: KiBewertungCreateManyAktienideeInputEnvelope
    set?: KiBewertungWhereUniqueInput | KiBewertungWhereUniqueInput[]
    disconnect?: KiBewertungWhereUniqueInput | KiBewertungWhereUniqueInput[]
    delete?: KiBewertungWhereUniqueInput | KiBewertungWhereUniqueInput[]
    connect?: KiBewertungWhereUniqueInput | KiBewertungWhereUniqueInput[]
    update?: KiBewertungUpdateWithWhereUniqueWithoutAktienideeInput | KiBewertungUpdateWithWhereUniqueWithoutAktienideeInput[]
    updateMany?: KiBewertungUpdateManyWithWhereWithoutAktienideeInput | KiBewertungUpdateManyWithWhereWithoutAktienideeInput[]
    deleteMany?: KiBewertungScalarWhereInput | KiBewertungScalarWhereInput[]
  }

  export type KiBewertungUncheckedUpdateManyWithoutAktienideeNestedInput = {
    create?: XOR<KiBewertungCreateWithoutAktienideeInput, KiBewertungUncheckedCreateWithoutAktienideeInput> | KiBewertungCreateWithoutAktienideeInput[] | KiBewertungUncheckedCreateWithoutAktienideeInput[]
    connectOrCreate?: KiBewertungCreateOrConnectWithoutAktienideeInput | KiBewertungCreateOrConnectWithoutAktienideeInput[]
    upsert?: KiBewertungUpsertWithWhereUniqueWithoutAktienideeInput | KiBewertungUpsertWithWhereUniqueWithoutAktienideeInput[]
    createMany?: KiBewertungCreateManyAktienideeInputEnvelope
    set?: KiBewertungWhereUniqueInput | KiBewertungWhereUniqueInput[]
    disconnect?: KiBewertungWhereUniqueInput | KiBewertungWhereUniqueInput[]
    delete?: KiBewertungWhereUniqueInput | KiBewertungWhereUniqueInput[]
    connect?: KiBewertungWhereUniqueInput | KiBewertungWhereUniqueInput[]
    update?: KiBewertungUpdateWithWhereUniqueWithoutAktienideeInput | KiBewertungUpdateWithWhereUniqueWithoutAktienideeInput[]
    updateMany?: KiBewertungUpdateManyWithWhereWithoutAktienideeInput | KiBewertungUpdateManyWithWhereWithoutAktienideeInput[]
    deleteMany?: KiBewertungScalarWhereInput | KiBewertungScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAlarmeInput = {
    create?: XOR<UserCreateWithoutAlarmeInput, UserUncheckedCreateWithoutAlarmeInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlarmeInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAlarmeNestedInput = {
    create?: XOR<UserCreateWithoutAlarmeInput, UserUncheckedCreateWithoutAlarmeInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlarmeInput
    upsert?: UserUpsertWithoutAlarmeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAlarmeInput, UserUpdateWithoutAlarmeInput>, UserUncheckedUpdateWithoutAlarmeInput>
  }

  export type KontoCreateNestedOneWithoutTransaktionenInput = {
    create?: XOR<KontoCreateWithoutTransaktionenInput, KontoUncheckedCreateWithoutTransaktionenInput>
    connectOrCreate?: KontoCreateOrConnectWithoutTransaktionenInput
    connect?: KontoWhereUniqueInput
  }

  export type PositionCreateNestedOneWithoutTransaktionenInput = {
    create?: XOR<PositionCreateWithoutTransaktionenInput, PositionUncheckedCreateWithoutTransaktionenInput>
    connectOrCreate?: PositionCreateOrConnectWithoutTransaktionenInput
    connect?: PositionWhereUniqueInput
  }

  export type KontoUpdateOneRequiredWithoutTransaktionenNestedInput = {
    create?: XOR<KontoCreateWithoutTransaktionenInput, KontoUncheckedCreateWithoutTransaktionenInput>
    connectOrCreate?: KontoCreateOrConnectWithoutTransaktionenInput
    upsert?: KontoUpsertWithoutTransaktionenInput
    connect?: KontoWhereUniqueInput
    update?: XOR<XOR<KontoUpdateToOneWithWhereWithoutTransaktionenInput, KontoUpdateWithoutTransaktionenInput>, KontoUncheckedUpdateWithoutTransaktionenInput>
  }

  export type PositionUpdateOneWithoutTransaktionenNestedInput = {
    create?: XOR<PositionCreateWithoutTransaktionenInput, PositionUncheckedCreateWithoutTransaktionenInput>
    connectOrCreate?: PositionCreateOrConnectWithoutTransaktionenInput
    upsert?: PositionUpsertWithoutTransaktionenInput
    disconnect?: PositionWhereInput | boolean
    delete?: PositionWhereInput | boolean
    connect?: PositionWhereUniqueInput
    update?: XOR<XOR<PositionUpdateToOneWithWhereWithoutTransaktionenInput, PositionUpdateWithoutTransaktionenInput>, PositionUncheckedUpdateWithoutTransaktionenInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AktienideeCreateNestedOneWithoutBewertungenInput = {
    create?: XOR<AktienideeCreateWithoutBewertungenInput, AktienideeUncheckedCreateWithoutBewertungenInput>
    connectOrCreate?: AktienideeCreateOrConnectWithoutBewertungenInput
    connect?: AktienideeWhereUniqueInput
  }

  export type AktienideeUpdateOneRequiredWithoutBewertungenNestedInput = {
    create?: XOR<AktienideeCreateWithoutBewertungenInput, AktienideeUncheckedCreateWithoutBewertungenInput>
    connectOrCreate?: AktienideeCreateOrConnectWithoutBewertungenInput
    upsert?: AktienideeUpsertWithoutBewertungenInput
    connect?: AktienideeWhereUniqueInput
    update?: XOR<XOR<AktienideeUpdateToOneWithWhereWithoutBewertungenInput, AktienideeUpdateWithoutBewertungenInput>, AktienideeUncheckedUpdateWithoutBewertungenInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BrokerCreateWithoutUserInput = {
    name: string
    type: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    konten?: KontoCreateNestedManyWithoutBrokerInput
  }

  export type BrokerUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    type: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    konten?: KontoUncheckedCreateNestedManyWithoutBrokerInput
  }

  export type BrokerCreateOrConnectWithoutUserInput = {
    where: BrokerWhereUniqueInput
    create: XOR<BrokerCreateWithoutUserInput, BrokerUncheckedCreateWithoutUserInput>
  }

  export type BrokerCreateManyUserInputEnvelope = {
    data: BrokerCreateManyUserInput | BrokerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AktienideeCreateWithoutUserInput = {
    symbol: string
    name: string
    strategie: string
    branche?: string | null
    analyst?: string | null
    entryPrice?: number | null
    kursziel?: number | null
    reasoning?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bewertungen?: KiBewertungCreateNestedManyWithoutAktienideeInput
  }

  export type AktienideeUncheckedCreateWithoutUserInput = {
    id?: number
    symbol: string
    name: string
    strategie: string
    branche?: string | null
    analyst?: string | null
    entryPrice?: number | null
    kursziel?: number | null
    reasoning?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bewertungen?: KiBewertungUncheckedCreateNestedManyWithoutAktienideeInput
  }

  export type AktienideeCreateOrConnectWithoutUserInput = {
    where: AktienideeWhereUniqueInput
    create: XOR<AktienideeCreateWithoutUserInput, AktienideeUncheckedCreateWithoutUserInput>
  }

  export type AktienideeCreateManyUserInputEnvelope = {
    data: AktienideeCreateManyUserInput | AktienideeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AlarmCreateWithoutUserInput = {
    symbol: string
    name: string
    typ: string
    schwelle: number
    richtung: string
    status?: string
    channel?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ausgeloestAt?: Date | string | null
  }

  export type AlarmUncheckedCreateWithoutUserInput = {
    id?: number
    symbol: string
    name: string
    typ: string
    schwelle: number
    richtung: string
    status?: string
    channel?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ausgeloestAt?: Date | string | null
  }

  export type AlarmCreateOrConnectWithoutUserInput = {
    where: AlarmWhereUniqueInput
    create: XOR<AlarmCreateWithoutUserInput, AlarmUncheckedCreateWithoutUserInput>
  }

  export type AlarmCreateManyUserInputEnvelope = {
    data: AlarmCreateManyUserInput | AlarmCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BrokerUpsertWithWhereUniqueWithoutUserInput = {
    where: BrokerWhereUniqueInput
    update: XOR<BrokerUpdateWithoutUserInput, BrokerUncheckedUpdateWithoutUserInput>
    create: XOR<BrokerCreateWithoutUserInput, BrokerUncheckedCreateWithoutUserInput>
  }

  export type BrokerUpdateWithWhereUniqueWithoutUserInput = {
    where: BrokerWhereUniqueInput
    data: XOR<BrokerUpdateWithoutUserInput, BrokerUncheckedUpdateWithoutUserInput>
  }

  export type BrokerUpdateManyWithWhereWithoutUserInput = {
    where: BrokerScalarWhereInput
    data: XOR<BrokerUpdateManyMutationInput, BrokerUncheckedUpdateManyWithoutUserInput>
  }

  export type BrokerScalarWhereInput = {
    AND?: BrokerScalarWhereInput | BrokerScalarWhereInput[]
    OR?: BrokerScalarWhereInput[]
    NOT?: BrokerScalarWhereInput | BrokerScalarWhereInput[]
    id?: IntFilter<"Broker"> | number
    name?: StringFilter<"Broker"> | string
    type?: StringFilter<"Broker"> | string
    notes?: StringNullableFilter<"Broker"> | string | null
    userId?: IntFilter<"Broker"> | number
    createdAt?: DateTimeFilter<"Broker"> | Date | string
    updatedAt?: DateTimeFilter<"Broker"> | Date | string
  }

  export type AktienideeUpsertWithWhereUniqueWithoutUserInput = {
    where: AktienideeWhereUniqueInput
    update: XOR<AktienideeUpdateWithoutUserInput, AktienideeUncheckedUpdateWithoutUserInput>
    create: XOR<AktienideeCreateWithoutUserInput, AktienideeUncheckedCreateWithoutUserInput>
  }

  export type AktienideeUpdateWithWhereUniqueWithoutUserInput = {
    where: AktienideeWhereUniqueInput
    data: XOR<AktienideeUpdateWithoutUserInput, AktienideeUncheckedUpdateWithoutUserInput>
  }

  export type AktienideeUpdateManyWithWhereWithoutUserInput = {
    where: AktienideeScalarWhereInput
    data: XOR<AktienideeUpdateManyMutationInput, AktienideeUncheckedUpdateManyWithoutUserInput>
  }

  export type AktienideeScalarWhereInput = {
    AND?: AktienideeScalarWhereInput | AktienideeScalarWhereInput[]
    OR?: AktienideeScalarWhereInput[]
    NOT?: AktienideeScalarWhereInput | AktienideeScalarWhereInput[]
    id?: IntFilter<"Aktienidee"> | number
    userId?: IntFilter<"Aktienidee"> | number
    symbol?: StringFilter<"Aktienidee"> | string
    name?: StringFilter<"Aktienidee"> | string
    strategie?: StringFilter<"Aktienidee"> | string
    branche?: StringNullableFilter<"Aktienidee"> | string | null
    analyst?: StringNullableFilter<"Aktienidee"> | string | null
    entryPrice?: FloatNullableFilter<"Aktienidee"> | number | null
    kursziel?: FloatNullableFilter<"Aktienidee"> | number | null
    reasoning?: StringNullableFilter<"Aktienidee"> | string | null
    status?: StringFilter<"Aktienidee"> | string
    createdAt?: DateTimeFilter<"Aktienidee"> | Date | string
    updatedAt?: DateTimeFilter<"Aktienidee"> | Date | string
  }

  export type AlarmUpsertWithWhereUniqueWithoutUserInput = {
    where: AlarmWhereUniqueInput
    update: XOR<AlarmUpdateWithoutUserInput, AlarmUncheckedUpdateWithoutUserInput>
    create: XOR<AlarmCreateWithoutUserInput, AlarmUncheckedCreateWithoutUserInput>
  }

  export type AlarmUpdateWithWhereUniqueWithoutUserInput = {
    where: AlarmWhereUniqueInput
    data: XOR<AlarmUpdateWithoutUserInput, AlarmUncheckedUpdateWithoutUserInput>
  }

  export type AlarmUpdateManyWithWhereWithoutUserInput = {
    where: AlarmScalarWhereInput
    data: XOR<AlarmUpdateManyMutationInput, AlarmUncheckedUpdateManyWithoutUserInput>
  }

  export type AlarmScalarWhereInput = {
    AND?: AlarmScalarWhereInput | AlarmScalarWhereInput[]
    OR?: AlarmScalarWhereInput[]
    NOT?: AlarmScalarWhereInput | AlarmScalarWhereInput[]
    id?: IntFilter<"Alarm"> | number
    userId?: IntFilter<"Alarm"> | number
    symbol?: StringFilter<"Alarm"> | string
    name?: StringFilter<"Alarm"> | string
    typ?: StringFilter<"Alarm"> | string
    schwelle?: FloatFilter<"Alarm"> | number
    richtung?: StringFilter<"Alarm"> | string
    status?: StringFilter<"Alarm"> | string
    channel?: StringFilter<"Alarm"> | string
    createdAt?: DateTimeFilter<"Alarm"> | Date | string
    updatedAt?: DateTimeFilter<"Alarm"> | Date | string
    ausgeloestAt?: DateTimeNullableFilter<"Alarm"> | Date | string | null
  }

  export type UserCreateWithoutBrokersInput = {
    email: string
    password: string
    name?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    aktienideen?: AktienideeCreateNestedManyWithoutUserInput
    alarme?: AlarmCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBrokersInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    aktienideen?: AktienideeUncheckedCreateNestedManyWithoutUserInput
    alarme?: AlarmUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBrokersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBrokersInput, UserUncheckedCreateWithoutBrokersInput>
  }

  export type KontoCreateWithoutBrokerInput = {
    name: string
    accountNumber?: string | null
    currency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    positionen?: PositionCreateNestedManyWithoutKontoInput
    transaktionen?: TransaktionCreateNestedManyWithoutKontoInput
  }

  export type KontoUncheckedCreateWithoutBrokerInput = {
    id?: number
    name: string
    accountNumber?: string | null
    currency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    positionen?: PositionUncheckedCreateNestedManyWithoutKontoInput
    transaktionen?: TransaktionUncheckedCreateNestedManyWithoutKontoInput
  }

  export type KontoCreateOrConnectWithoutBrokerInput = {
    where: KontoWhereUniqueInput
    create: XOR<KontoCreateWithoutBrokerInput, KontoUncheckedCreateWithoutBrokerInput>
  }

  export type KontoCreateManyBrokerInputEnvelope = {
    data: KontoCreateManyBrokerInput | KontoCreateManyBrokerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBrokersInput = {
    update: XOR<UserUpdateWithoutBrokersInput, UserUncheckedUpdateWithoutBrokersInput>
    create: XOR<UserCreateWithoutBrokersInput, UserUncheckedCreateWithoutBrokersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBrokersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBrokersInput, UserUncheckedUpdateWithoutBrokersInput>
  }

  export type UserUpdateWithoutBrokersInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aktienideen?: AktienideeUpdateManyWithoutUserNestedInput
    alarme?: AlarmUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBrokersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aktienideen?: AktienideeUncheckedUpdateManyWithoutUserNestedInput
    alarme?: AlarmUncheckedUpdateManyWithoutUserNestedInput
  }

  export type KontoUpsertWithWhereUniqueWithoutBrokerInput = {
    where: KontoWhereUniqueInput
    update: XOR<KontoUpdateWithoutBrokerInput, KontoUncheckedUpdateWithoutBrokerInput>
    create: XOR<KontoCreateWithoutBrokerInput, KontoUncheckedCreateWithoutBrokerInput>
  }

  export type KontoUpdateWithWhereUniqueWithoutBrokerInput = {
    where: KontoWhereUniqueInput
    data: XOR<KontoUpdateWithoutBrokerInput, KontoUncheckedUpdateWithoutBrokerInput>
  }

  export type KontoUpdateManyWithWhereWithoutBrokerInput = {
    where: KontoScalarWhereInput
    data: XOR<KontoUpdateManyMutationInput, KontoUncheckedUpdateManyWithoutBrokerInput>
  }

  export type KontoScalarWhereInput = {
    AND?: KontoScalarWhereInput | KontoScalarWhereInput[]
    OR?: KontoScalarWhereInput[]
    NOT?: KontoScalarWhereInput | KontoScalarWhereInput[]
    id?: IntFilter<"Konto"> | number
    name?: StringFilter<"Konto"> | string
    accountNumber?: StringNullableFilter<"Konto"> | string | null
    currency?: StringFilter<"Konto"> | string
    brokerId?: IntFilter<"Konto"> | number
    createdAt?: DateTimeFilter<"Konto"> | Date | string
    updatedAt?: DateTimeFilter<"Konto"> | Date | string
  }

  export type BrokerCreateWithoutKontenInput = {
    name: string
    type: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBrokersInput
  }

  export type BrokerUncheckedCreateWithoutKontenInput = {
    id?: number
    name: string
    type: string
    notes?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrokerCreateOrConnectWithoutKontenInput = {
    where: BrokerWhereUniqueInput
    create: XOR<BrokerCreateWithoutKontenInput, BrokerUncheckedCreateWithoutKontenInput>
  }

  export type PositionCreateWithoutKontoInput = {
    assetType: string
    symbol: string
    name?: string | null
    quantity: number
    entryPrice: number
    currentPrice?: number | null
    entryDate: Date | string
    fees?: number | null
    leverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    transaktionen?: TransaktionCreateNestedManyWithoutPositionInput
  }

  export type PositionUncheckedCreateWithoutKontoInput = {
    id?: number
    assetType: string
    symbol: string
    name?: string | null
    quantity: number
    entryPrice: number
    currentPrice?: number | null
    entryDate: Date | string
    fees?: number | null
    leverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    transaktionen?: TransaktionUncheckedCreateNestedManyWithoutPositionInput
  }

  export type PositionCreateOrConnectWithoutKontoInput = {
    where: PositionWhereUniqueInput
    create: XOR<PositionCreateWithoutKontoInput, PositionUncheckedCreateWithoutKontoInput>
  }

  export type PositionCreateManyKontoInputEnvelope = {
    data: PositionCreateManyKontoInput | PositionCreateManyKontoInput[]
    skipDuplicates?: boolean
  }

  export type TransaktionCreateWithoutKontoInput = {
    typ: string
    symbol: string
    quantity?: number | null
    price: number
    fees?: number | null
    datum: Date | string
    description?: string | null
    createdAt?: Date | string
    position?: PositionCreateNestedOneWithoutTransaktionenInput
  }

  export type TransaktionUncheckedCreateWithoutKontoInput = {
    id?: number
    positionId?: number | null
    typ: string
    symbol: string
    quantity?: number | null
    price: number
    fees?: number | null
    datum: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type TransaktionCreateOrConnectWithoutKontoInput = {
    where: TransaktionWhereUniqueInput
    create: XOR<TransaktionCreateWithoutKontoInput, TransaktionUncheckedCreateWithoutKontoInput>
  }

  export type TransaktionCreateManyKontoInputEnvelope = {
    data: TransaktionCreateManyKontoInput | TransaktionCreateManyKontoInput[]
    skipDuplicates?: boolean
  }

  export type BrokerUpsertWithoutKontenInput = {
    update: XOR<BrokerUpdateWithoutKontenInput, BrokerUncheckedUpdateWithoutKontenInput>
    create: XOR<BrokerCreateWithoutKontenInput, BrokerUncheckedCreateWithoutKontenInput>
    where?: BrokerWhereInput
  }

  export type BrokerUpdateToOneWithWhereWithoutKontenInput = {
    where?: BrokerWhereInput
    data: XOR<BrokerUpdateWithoutKontenInput, BrokerUncheckedUpdateWithoutKontenInput>
  }

  export type BrokerUpdateWithoutKontenInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBrokersNestedInput
  }

  export type BrokerUncheckedUpdateWithoutKontenInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionUpsertWithWhereUniqueWithoutKontoInput = {
    where: PositionWhereUniqueInput
    update: XOR<PositionUpdateWithoutKontoInput, PositionUncheckedUpdateWithoutKontoInput>
    create: XOR<PositionCreateWithoutKontoInput, PositionUncheckedCreateWithoutKontoInput>
  }

  export type PositionUpdateWithWhereUniqueWithoutKontoInput = {
    where: PositionWhereUniqueInput
    data: XOR<PositionUpdateWithoutKontoInput, PositionUncheckedUpdateWithoutKontoInput>
  }

  export type PositionUpdateManyWithWhereWithoutKontoInput = {
    where: PositionScalarWhereInput
    data: XOR<PositionUpdateManyMutationInput, PositionUncheckedUpdateManyWithoutKontoInput>
  }

  export type PositionScalarWhereInput = {
    AND?: PositionScalarWhereInput | PositionScalarWhereInput[]
    OR?: PositionScalarWhereInput[]
    NOT?: PositionScalarWhereInput | PositionScalarWhereInput[]
    id?: IntFilter<"Position"> | number
    kontoId?: IntFilter<"Position"> | number
    assetType?: StringFilter<"Position"> | string
    symbol?: StringFilter<"Position"> | string
    name?: StringNullableFilter<"Position"> | string | null
    quantity?: FloatFilter<"Position"> | number
    entryPrice?: FloatFilter<"Position"> | number
    currentPrice?: FloatNullableFilter<"Position"> | number | null
    entryDate?: DateTimeFilter<"Position"> | Date | string
    fees?: FloatNullableFilter<"Position"> | number | null
    leverage?: FloatNullableFilter<"Position"> | number | null
    createdAt?: DateTimeFilter<"Position"> | Date | string
    updatedAt?: DateTimeFilter<"Position"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Position"> | Date | string | null
  }

  export type TransaktionUpsertWithWhereUniqueWithoutKontoInput = {
    where: TransaktionWhereUniqueInput
    update: XOR<TransaktionUpdateWithoutKontoInput, TransaktionUncheckedUpdateWithoutKontoInput>
    create: XOR<TransaktionCreateWithoutKontoInput, TransaktionUncheckedCreateWithoutKontoInput>
  }

  export type TransaktionUpdateWithWhereUniqueWithoutKontoInput = {
    where: TransaktionWhereUniqueInput
    data: XOR<TransaktionUpdateWithoutKontoInput, TransaktionUncheckedUpdateWithoutKontoInput>
  }

  export type TransaktionUpdateManyWithWhereWithoutKontoInput = {
    where: TransaktionScalarWhereInput
    data: XOR<TransaktionUpdateManyMutationInput, TransaktionUncheckedUpdateManyWithoutKontoInput>
  }

  export type TransaktionScalarWhereInput = {
    AND?: TransaktionScalarWhereInput | TransaktionScalarWhereInput[]
    OR?: TransaktionScalarWhereInput[]
    NOT?: TransaktionScalarWhereInput | TransaktionScalarWhereInput[]
    id?: IntFilter<"Transaktion"> | number
    kontoId?: IntFilter<"Transaktion"> | number
    positionId?: IntNullableFilter<"Transaktion"> | number | null
    typ?: StringFilter<"Transaktion"> | string
    symbol?: StringFilter<"Transaktion"> | string
    quantity?: FloatNullableFilter<"Transaktion"> | number | null
    price?: FloatFilter<"Transaktion"> | number
    fees?: FloatNullableFilter<"Transaktion"> | number | null
    datum?: DateTimeFilter<"Transaktion"> | Date | string
    description?: StringNullableFilter<"Transaktion"> | string | null
    createdAt?: DateTimeFilter<"Transaktion"> | Date | string
  }

  export type KontoCreateWithoutPositionenInput = {
    name: string
    accountNumber?: string | null
    currency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    broker: BrokerCreateNestedOneWithoutKontenInput
    transaktionen?: TransaktionCreateNestedManyWithoutKontoInput
  }

  export type KontoUncheckedCreateWithoutPositionenInput = {
    id?: number
    name: string
    accountNumber?: string | null
    currency?: string
    brokerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transaktionen?: TransaktionUncheckedCreateNestedManyWithoutKontoInput
  }

  export type KontoCreateOrConnectWithoutPositionenInput = {
    where: KontoWhereUniqueInput
    create: XOR<KontoCreateWithoutPositionenInput, KontoUncheckedCreateWithoutPositionenInput>
  }

  export type TransaktionCreateWithoutPositionInput = {
    typ: string
    symbol: string
    quantity?: number | null
    price: number
    fees?: number | null
    datum: Date | string
    description?: string | null
    createdAt?: Date | string
    konto: KontoCreateNestedOneWithoutTransaktionenInput
  }

  export type TransaktionUncheckedCreateWithoutPositionInput = {
    id?: number
    kontoId: number
    typ: string
    symbol: string
    quantity?: number | null
    price: number
    fees?: number | null
    datum: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type TransaktionCreateOrConnectWithoutPositionInput = {
    where: TransaktionWhereUniqueInput
    create: XOR<TransaktionCreateWithoutPositionInput, TransaktionUncheckedCreateWithoutPositionInput>
  }

  export type TransaktionCreateManyPositionInputEnvelope = {
    data: TransaktionCreateManyPositionInput | TransaktionCreateManyPositionInput[]
    skipDuplicates?: boolean
  }

  export type KontoUpsertWithoutPositionenInput = {
    update: XOR<KontoUpdateWithoutPositionenInput, KontoUncheckedUpdateWithoutPositionenInput>
    create: XOR<KontoCreateWithoutPositionenInput, KontoUncheckedCreateWithoutPositionenInput>
    where?: KontoWhereInput
  }

  export type KontoUpdateToOneWithWhereWithoutPositionenInput = {
    where?: KontoWhereInput
    data: XOR<KontoUpdateWithoutPositionenInput, KontoUncheckedUpdateWithoutPositionenInput>
  }

  export type KontoUpdateWithoutPositionenInput = {
    name?: StringFieldUpdateOperationsInput | string
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broker?: BrokerUpdateOneRequiredWithoutKontenNestedInput
    transaktionen?: TransaktionUpdateManyWithoutKontoNestedInput
  }

  export type KontoUncheckedUpdateWithoutPositionenInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    brokerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaktionen?: TransaktionUncheckedUpdateManyWithoutKontoNestedInput
  }

  export type TransaktionUpsertWithWhereUniqueWithoutPositionInput = {
    where: TransaktionWhereUniqueInput
    update: XOR<TransaktionUpdateWithoutPositionInput, TransaktionUncheckedUpdateWithoutPositionInput>
    create: XOR<TransaktionCreateWithoutPositionInput, TransaktionUncheckedCreateWithoutPositionInput>
  }

  export type TransaktionUpdateWithWhereUniqueWithoutPositionInput = {
    where: TransaktionWhereUniqueInput
    data: XOR<TransaktionUpdateWithoutPositionInput, TransaktionUncheckedUpdateWithoutPositionInput>
  }

  export type TransaktionUpdateManyWithWhereWithoutPositionInput = {
    where: TransaktionScalarWhereInput
    data: XOR<TransaktionUpdateManyMutationInput, TransaktionUncheckedUpdateManyWithoutPositionInput>
  }

  export type UserCreateWithoutAktienideenInput = {
    email: string
    password: string
    name?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    brokers?: BrokerCreateNestedManyWithoutUserInput
    alarme?: AlarmCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAktienideenInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    brokers?: BrokerUncheckedCreateNestedManyWithoutUserInput
    alarme?: AlarmUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAktienideenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAktienideenInput, UserUncheckedCreateWithoutAktienideenInput>
  }

  export type KiBewertungCreateWithoutAktienideeInput = {
    symbol: string
    scoreFundamental?: number | null
    scoreTechnisch?: number | null
    scoreKombiniert?: number | null
    kommentar?: string | null
    createdAt?: Date | string
  }

  export type KiBewertungUncheckedCreateWithoutAktienideeInput = {
    id?: number
    symbol: string
    scoreFundamental?: number | null
    scoreTechnisch?: number | null
    scoreKombiniert?: number | null
    kommentar?: string | null
    createdAt?: Date | string
  }

  export type KiBewertungCreateOrConnectWithoutAktienideeInput = {
    where: KiBewertungWhereUniqueInput
    create: XOR<KiBewertungCreateWithoutAktienideeInput, KiBewertungUncheckedCreateWithoutAktienideeInput>
  }

  export type KiBewertungCreateManyAktienideeInputEnvelope = {
    data: KiBewertungCreateManyAktienideeInput | KiBewertungCreateManyAktienideeInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAktienideenInput = {
    update: XOR<UserUpdateWithoutAktienideenInput, UserUncheckedUpdateWithoutAktienideenInput>
    create: XOR<UserCreateWithoutAktienideenInput, UserUncheckedCreateWithoutAktienideenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAktienideenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAktienideenInput, UserUncheckedUpdateWithoutAktienideenInput>
  }

  export type UserUpdateWithoutAktienideenInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brokers?: BrokerUpdateManyWithoutUserNestedInput
    alarme?: AlarmUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAktienideenInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brokers?: BrokerUncheckedUpdateManyWithoutUserNestedInput
    alarme?: AlarmUncheckedUpdateManyWithoutUserNestedInput
  }

  export type KiBewertungUpsertWithWhereUniqueWithoutAktienideeInput = {
    where: KiBewertungWhereUniqueInput
    update: XOR<KiBewertungUpdateWithoutAktienideeInput, KiBewertungUncheckedUpdateWithoutAktienideeInput>
    create: XOR<KiBewertungCreateWithoutAktienideeInput, KiBewertungUncheckedCreateWithoutAktienideeInput>
  }

  export type KiBewertungUpdateWithWhereUniqueWithoutAktienideeInput = {
    where: KiBewertungWhereUniqueInput
    data: XOR<KiBewertungUpdateWithoutAktienideeInput, KiBewertungUncheckedUpdateWithoutAktienideeInput>
  }

  export type KiBewertungUpdateManyWithWhereWithoutAktienideeInput = {
    where: KiBewertungScalarWhereInput
    data: XOR<KiBewertungUpdateManyMutationInput, KiBewertungUncheckedUpdateManyWithoutAktienideeInput>
  }

  export type KiBewertungScalarWhereInput = {
    AND?: KiBewertungScalarWhereInput | KiBewertungScalarWhereInput[]
    OR?: KiBewertungScalarWhereInput[]
    NOT?: KiBewertungScalarWhereInput | KiBewertungScalarWhereInput[]
    id?: IntFilter<"KiBewertung"> | number
    aktienideeId?: IntFilter<"KiBewertung"> | number
    symbol?: StringFilter<"KiBewertung"> | string
    scoreFundamental?: FloatNullableFilter<"KiBewertung"> | number | null
    scoreTechnisch?: FloatNullableFilter<"KiBewertung"> | number | null
    scoreKombiniert?: FloatNullableFilter<"KiBewertung"> | number | null
    kommentar?: StringNullableFilter<"KiBewertung"> | string | null
    createdAt?: DateTimeFilter<"KiBewertung"> | Date | string
  }

  export type UserCreateWithoutAlarmeInput = {
    email: string
    password: string
    name?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    brokers?: BrokerCreateNestedManyWithoutUserInput
    aktienideen?: AktienideeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAlarmeInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    brokers?: BrokerUncheckedCreateNestedManyWithoutUserInput
    aktienideen?: AktienideeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAlarmeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAlarmeInput, UserUncheckedCreateWithoutAlarmeInput>
  }

  export type UserUpsertWithoutAlarmeInput = {
    update: XOR<UserUpdateWithoutAlarmeInput, UserUncheckedUpdateWithoutAlarmeInput>
    create: XOR<UserCreateWithoutAlarmeInput, UserUncheckedCreateWithoutAlarmeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAlarmeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAlarmeInput, UserUncheckedUpdateWithoutAlarmeInput>
  }

  export type UserUpdateWithoutAlarmeInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brokers?: BrokerUpdateManyWithoutUserNestedInput
    aktienideen?: AktienideeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAlarmeInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brokers?: BrokerUncheckedUpdateManyWithoutUserNestedInput
    aktienideen?: AktienideeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type KontoCreateWithoutTransaktionenInput = {
    name: string
    accountNumber?: string | null
    currency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    broker: BrokerCreateNestedOneWithoutKontenInput
    positionen?: PositionCreateNestedManyWithoutKontoInput
  }

  export type KontoUncheckedCreateWithoutTransaktionenInput = {
    id?: number
    name: string
    accountNumber?: string | null
    currency?: string
    brokerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    positionen?: PositionUncheckedCreateNestedManyWithoutKontoInput
  }

  export type KontoCreateOrConnectWithoutTransaktionenInput = {
    where: KontoWhereUniqueInput
    create: XOR<KontoCreateWithoutTransaktionenInput, KontoUncheckedCreateWithoutTransaktionenInput>
  }

  export type PositionCreateWithoutTransaktionenInput = {
    assetType: string
    symbol: string
    name?: string | null
    quantity: number
    entryPrice: number
    currentPrice?: number | null
    entryDate: Date | string
    fees?: number | null
    leverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    konto: KontoCreateNestedOneWithoutPositionenInput
  }

  export type PositionUncheckedCreateWithoutTransaktionenInput = {
    id?: number
    kontoId: number
    assetType: string
    symbol: string
    name?: string | null
    quantity: number
    entryPrice: number
    currentPrice?: number | null
    entryDate: Date | string
    fees?: number | null
    leverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PositionCreateOrConnectWithoutTransaktionenInput = {
    where: PositionWhereUniqueInput
    create: XOR<PositionCreateWithoutTransaktionenInput, PositionUncheckedCreateWithoutTransaktionenInput>
  }

  export type KontoUpsertWithoutTransaktionenInput = {
    update: XOR<KontoUpdateWithoutTransaktionenInput, KontoUncheckedUpdateWithoutTransaktionenInput>
    create: XOR<KontoCreateWithoutTransaktionenInput, KontoUncheckedCreateWithoutTransaktionenInput>
    where?: KontoWhereInput
  }

  export type KontoUpdateToOneWithWhereWithoutTransaktionenInput = {
    where?: KontoWhereInput
    data: XOR<KontoUpdateWithoutTransaktionenInput, KontoUncheckedUpdateWithoutTransaktionenInput>
  }

  export type KontoUpdateWithoutTransaktionenInput = {
    name?: StringFieldUpdateOperationsInput | string
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    broker?: BrokerUpdateOneRequiredWithoutKontenNestedInput
    positionen?: PositionUpdateManyWithoutKontoNestedInput
  }

  export type KontoUncheckedUpdateWithoutTransaktionenInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    brokerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    positionen?: PositionUncheckedUpdateManyWithoutKontoNestedInput
  }

  export type PositionUpsertWithoutTransaktionenInput = {
    update: XOR<PositionUpdateWithoutTransaktionenInput, PositionUncheckedUpdateWithoutTransaktionenInput>
    create: XOR<PositionCreateWithoutTransaktionenInput, PositionUncheckedCreateWithoutTransaktionenInput>
    where?: PositionWhereInput
  }

  export type PositionUpdateToOneWithWhereWithoutTransaktionenInput = {
    where?: PositionWhereInput
    data: XOR<PositionUpdateWithoutTransaktionenInput, PositionUncheckedUpdateWithoutTransaktionenInput>
  }

  export type PositionUpdateWithoutTransaktionenInput = {
    assetType?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    leverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    konto?: KontoUpdateOneRequiredWithoutPositionenNestedInput
  }

  export type PositionUncheckedUpdateWithoutTransaktionenInput = {
    id?: IntFieldUpdateOperationsInput | number
    kontoId?: IntFieldUpdateOperationsInput | number
    assetType?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    leverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AktienideeCreateWithoutBewertungenInput = {
    symbol: string
    name: string
    strategie: string
    branche?: string | null
    analyst?: string | null
    entryPrice?: number | null
    kursziel?: number | null
    reasoning?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAktienideenInput
  }

  export type AktienideeUncheckedCreateWithoutBewertungenInput = {
    id?: number
    userId: number
    symbol: string
    name: string
    strategie: string
    branche?: string | null
    analyst?: string | null
    entryPrice?: number | null
    kursziel?: number | null
    reasoning?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AktienideeCreateOrConnectWithoutBewertungenInput = {
    where: AktienideeWhereUniqueInput
    create: XOR<AktienideeCreateWithoutBewertungenInput, AktienideeUncheckedCreateWithoutBewertungenInput>
  }

  export type AktienideeUpsertWithoutBewertungenInput = {
    update: XOR<AktienideeUpdateWithoutBewertungenInput, AktienideeUncheckedUpdateWithoutBewertungenInput>
    create: XOR<AktienideeCreateWithoutBewertungenInput, AktienideeUncheckedCreateWithoutBewertungenInput>
    where?: AktienideeWhereInput
  }

  export type AktienideeUpdateToOneWithWhereWithoutBewertungenInput = {
    where?: AktienideeWhereInput
    data: XOR<AktienideeUpdateWithoutBewertungenInput, AktienideeUncheckedUpdateWithoutBewertungenInput>
  }

  export type AktienideeUpdateWithoutBewertungenInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    strategie?: StringFieldUpdateOperationsInput | string
    branche?: NullableStringFieldUpdateOperationsInput | string | null
    analyst?: NullableStringFieldUpdateOperationsInput | string | null
    entryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    kursziel?: NullableFloatFieldUpdateOperationsInput | number | null
    reasoning?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAktienideenNestedInput
  }

  export type AktienideeUncheckedUpdateWithoutBewertungenInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    strategie?: StringFieldUpdateOperationsInput | string
    branche?: NullableStringFieldUpdateOperationsInput | string | null
    analyst?: NullableStringFieldUpdateOperationsInput | string | null
    entryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    kursziel?: NullableFloatFieldUpdateOperationsInput | number | null
    reasoning?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrokerCreateManyUserInput = {
    id?: number
    name: string
    type: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AktienideeCreateManyUserInput = {
    id?: number
    symbol: string
    name: string
    strategie: string
    branche?: string | null
    analyst?: string | null
    entryPrice?: number | null
    kursziel?: number | null
    reasoning?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlarmCreateManyUserInput = {
    id?: number
    symbol: string
    name: string
    typ: string
    schwelle: number
    richtung: string
    status?: string
    channel?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ausgeloestAt?: Date | string | null
  }

  export type BrokerUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    konten?: KontoUpdateManyWithoutBrokerNestedInput
  }

  export type BrokerUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    konten?: KontoUncheckedUpdateManyWithoutBrokerNestedInput
  }

  export type BrokerUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AktienideeUpdateWithoutUserInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    strategie?: StringFieldUpdateOperationsInput | string
    branche?: NullableStringFieldUpdateOperationsInput | string | null
    analyst?: NullableStringFieldUpdateOperationsInput | string | null
    entryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    kursziel?: NullableFloatFieldUpdateOperationsInput | number | null
    reasoning?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bewertungen?: KiBewertungUpdateManyWithoutAktienideeNestedInput
  }

  export type AktienideeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    strategie?: StringFieldUpdateOperationsInput | string
    branche?: NullableStringFieldUpdateOperationsInput | string | null
    analyst?: NullableStringFieldUpdateOperationsInput | string | null
    entryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    kursziel?: NullableFloatFieldUpdateOperationsInput | number | null
    reasoning?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bewertungen?: KiBewertungUncheckedUpdateManyWithoutAktienideeNestedInput
  }

  export type AktienideeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    strategie?: StringFieldUpdateOperationsInput | string
    branche?: NullableStringFieldUpdateOperationsInput | string | null
    analyst?: NullableStringFieldUpdateOperationsInput | string | null
    entryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    kursziel?: NullableFloatFieldUpdateOperationsInput | number | null
    reasoning?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlarmUpdateWithoutUserInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typ?: StringFieldUpdateOperationsInput | string
    schwelle?: FloatFieldUpdateOperationsInput | number
    richtung?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ausgeloestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlarmUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typ?: StringFieldUpdateOperationsInput | string
    schwelle?: FloatFieldUpdateOperationsInput | number
    richtung?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ausgeloestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlarmUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typ?: StringFieldUpdateOperationsInput | string
    schwelle?: FloatFieldUpdateOperationsInput | number
    richtung?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ausgeloestAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KontoCreateManyBrokerInput = {
    id?: number
    name: string
    accountNumber?: string | null
    currency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KontoUpdateWithoutBrokerInput = {
    name?: StringFieldUpdateOperationsInput | string
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    positionen?: PositionUpdateManyWithoutKontoNestedInput
    transaktionen?: TransaktionUpdateManyWithoutKontoNestedInput
  }

  export type KontoUncheckedUpdateWithoutBrokerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    positionen?: PositionUncheckedUpdateManyWithoutKontoNestedInput
    transaktionen?: TransaktionUncheckedUpdateManyWithoutKontoNestedInput
  }

  export type KontoUncheckedUpdateManyWithoutBrokerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionCreateManyKontoInput = {
    id?: number
    assetType: string
    symbol: string
    name?: string | null
    quantity: number
    entryPrice: number
    currentPrice?: number | null
    entryDate: Date | string
    fees?: number | null
    leverage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type TransaktionCreateManyKontoInput = {
    id?: number
    positionId?: number | null
    typ: string
    symbol: string
    quantity?: number | null
    price: number
    fees?: number | null
    datum: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type PositionUpdateWithoutKontoInput = {
    assetType?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    leverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaktionen?: TransaktionUpdateManyWithoutPositionNestedInput
  }

  export type PositionUncheckedUpdateWithoutKontoInput = {
    id?: IntFieldUpdateOperationsInput | number
    assetType?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    leverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaktionen?: TransaktionUncheckedUpdateManyWithoutPositionNestedInput
  }

  export type PositionUncheckedUpdateManyWithoutKontoInput = {
    id?: IntFieldUpdateOperationsInput | number
    assetType?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    currentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    leverage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransaktionUpdateWithoutKontoInput = {
    typ?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    position?: PositionUpdateOneWithoutTransaktionenNestedInput
  }

  export type TransaktionUncheckedUpdateWithoutKontoInput = {
    id?: IntFieldUpdateOperationsInput | number
    positionId?: NullableIntFieldUpdateOperationsInput | number | null
    typ?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransaktionUncheckedUpdateManyWithoutKontoInput = {
    id?: IntFieldUpdateOperationsInput | number
    positionId?: NullableIntFieldUpdateOperationsInput | number | null
    typ?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransaktionCreateManyPositionInput = {
    id?: number
    kontoId: number
    typ: string
    symbol: string
    quantity?: number | null
    price: number
    fees?: number | null
    datum: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type TransaktionUpdateWithoutPositionInput = {
    typ?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    konto?: KontoUpdateOneRequiredWithoutTransaktionenNestedInput
  }

  export type TransaktionUncheckedUpdateWithoutPositionInput = {
    id?: IntFieldUpdateOperationsInput | number
    kontoId?: IntFieldUpdateOperationsInput | number
    typ?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransaktionUncheckedUpdateManyWithoutPositionInput = {
    id?: IntFieldUpdateOperationsInput | number
    kontoId?: IntFieldUpdateOperationsInput | number
    typ?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    fees?: NullableFloatFieldUpdateOperationsInput | number | null
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KiBewertungCreateManyAktienideeInput = {
    id?: number
    symbol: string
    scoreFundamental?: number | null
    scoreTechnisch?: number | null
    scoreKombiniert?: number | null
    kommentar?: string | null
    createdAt?: Date | string
  }

  export type KiBewertungUpdateWithoutAktienideeInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    scoreFundamental?: NullableFloatFieldUpdateOperationsInput | number | null
    scoreTechnisch?: NullableFloatFieldUpdateOperationsInput | number | null
    scoreKombiniert?: NullableFloatFieldUpdateOperationsInput | number | null
    kommentar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KiBewertungUncheckedUpdateWithoutAktienideeInput = {
    id?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    scoreFundamental?: NullableFloatFieldUpdateOperationsInput | number | null
    scoreTechnisch?: NullableFloatFieldUpdateOperationsInput | number | null
    scoreKombiniert?: NullableFloatFieldUpdateOperationsInput | number | null
    kommentar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KiBewertungUncheckedUpdateManyWithoutAktienideeInput = {
    id?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    scoreFundamental?: NullableFloatFieldUpdateOperationsInput | number | null
    scoreTechnisch?: NullableFloatFieldUpdateOperationsInput | number | null
    scoreKombiniert?: NullableFloatFieldUpdateOperationsInput | number | null
    kommentar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BrokerCountOutputTypeDefaultArgs instead
     */
    export type BrokerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BrokerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KontoCountOutputTypeDefaultArgs instead
     */
    export type KontoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KontoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PositionCountOutputTypeDefaultArgs instead
     */
    export type PositionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PositionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AktienideeCountOutputTypeDefaultArgs instead
     */
    export type AktienideeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AktienideeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BrokerDefaultArgs instead
     */
    export type BrokerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BrokerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KontoDefaultArgs instead
     */
    export type KontoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KontoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PositionDefaultArgs instead
     */
    export type PositionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PositionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AktienideeDefaultArgs instead
     */
    export type AktienideeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AktienideeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlarmDefaultArgs instead
     */
    export type AlarmArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlarmDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransaktionDefaultArgs instead
     */
    export type TransaktionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransaktionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KiBewertungDefaultArgs instead
     */
    export type KiBewertungArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KiBewertungDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
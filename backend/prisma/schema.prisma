generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  brokers   Broker[]
  aktienideen Aktienidee[]
  alarme    Alarm[]
}

model Broker {
  id        Int      @id @default(autoincrement())
  name      String
  type      String   // Online, Bank, etc.
  notes     String?
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  konten    Konto[]
}

model Konto {
  id           Int      @id @default(autoincrement())
  name         String
  accountNumber String?
  currency     String   @default("EUR")
  brokerId     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  broker       Broker   @relation(fields: [brokerId], references: [id])
  positionen   Position[]
  transaktionen Transaktion[]
}

model Position {
  id           Int      @id @default(autoincrement())
  kontoId      Int
  assetType    String   // Aktie, ETF, Crypto, CFD
  symbol       String
  name         String?
  quantity     Float
  entryPrice   Float
  currentPrice Float?
  entryDate    DateTime
  fees         Float?   @default(0)
  leverage     Float?   @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
  
  // Relations
  konto        Konto    @relation(fields: [kontoId], references: [id])
  transaktionen Transaktion[]
  
  @@index([kontoId, symbol])
}

model Aktienidee {
  id           Int      @id @default(autoincrement())
  userId       Int
  symbol       String
  name         String
  strategie    String   // Kurzfristig, Mittelfristig, Langfristig
  branche      String?
  analyst      String?
  entryPrice   Float?
  kursziel     Float?
  reasoning    String?
  status       String   @default("Offen") // Offen, Umgesetzt, Verworfen
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user         User     @relation(fields: [userId], references: [id])
  bewertungen  KiBewertung[]
  
  @@index([userId, symbol])
}

model Alarm {
  id           Int      @id @default(autoincrement())
  userId       Int
  symbol       String
  name         String
  typ          String   // Preis, Prozent, Volume
  schwelle     Float
  richtung     String   // Über, Unter
  status       String   @default("Aktiv") // Aktiv, Ausgelöst, Pausiert
  channel      String   @default("InApp") // InApp, Discord, Email
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ausgeloestAt DateTime?
  
  // Relations
  user         User     @relation(fields: [userId], references: [id])
  
  @@index([userId, status])
}

model Transaktion {
  id           Int      @id @default(autoincrement())
  kontoId      Int
  positionId   Int?
  typ          String   // Kauf, Verkauf, Dividende, Gebühr
  symbol       String
  quantity     Float?
  price        Float
  fees         Float?   @default(0)
  datum        DateTime
  description  String?
  createdAt    DateTime @default(now())
  
  // Relations
  konto        Konto    @relation(fields: [kontoId], references: [id])
  position     Position? @relation(fields: [positionId], references: [id])
  
  @@index([kontoId, datum])
}

model KiBewertung {
  id                Int      @id @default(autoincrement())
  aktienideeId      Int
  symbol            String
  scoreFundamental  Float?   // 1-10
  scoreTechnisch    Float?   // 1-10
  scoreKombiniert   Float?   // 1-10
  kommentar         String?
  createdAt         DateTime @default(now())
  
  // Relations
  aktienidee        Aktienidee @relation(fields: [aktienideeId], references: [id])
  
  @@index([aktienideeId, createdAt])
}
